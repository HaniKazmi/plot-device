{"version":3,"file":"Graphs-4050425d.js","sources":["../../node_modules/@mui/base/utils/prepareForSlot.js","../../node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js","../../node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js","../../node_modules/@mui/material/Radio/RadioButtonIcon.js","../../node_modules/@mui/material/RadioGroup/RadioGroupContext.js","../../node_modules/@mui/material/RadioGroup/useRadioGroup.js","../../node_modules/@mui/material/Radio/radioClasses.js","../../node_modules/@mui/material/Radio/Radio.js","../../node_modules/@mui/icons-material/esm/TaskAlt.js","../../node_modules/@mui/icons-material/esm/VideogameAsset.js","../../node_modules/@mui/icons-material/esm/Whatshot.js","../../src/vg/CardMediaImage.tsx","../../src/vg/Stats.tsx","../../src/vg/Sunburst.tsx","../../src/vg/Barchart.tsx","../../src/vg/Timeline.tsx","../../src/vg/Graphs.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ownerState\"];\nimport * as React from 'react';\nexport function prepareForSlot(Component) {\n  return /*#__PURE__*/React.forwardRef(function Slot(props, ref) {\n    const other = _objectWithoutPropertiesLoose(props, _excluded);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, other, {\n      ref\n    }));\n  });\n}","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"\n}), 'RadioButtonUnchecked');","'use client';\n\nimport * as React from 'react';\nimport createSvgIcon from '../../utils/createSvgIcon';\n\n/**\n * @ignore - internal component.\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z\"\n}), 'RadioButtonChecked');","'use client';\n\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport RadioButtonUncheckedIcon from '../internal/svg-icons/RadioButtonUnchecked';\nimport RadioButtonCheckedIcon from '../internal/svg-icons/RadioButtonChecked';\nimport styled from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst RadioButtonIconRoot = styled('span')({\n  position: 'relative',\n  display: 'flex'\n});\nconst RadioButtonIconBackground = styled(RadioButtonUncheckedIcon)({\n  // Scale applied to prevent dot misalignment in Safari\n  transform: 'scale(1)'\n});\nconst RadioButtonIconDot = styled(RadioButtonCheckedIcon)(({\n  theme,\n  ownerState\n}) => _extends({\n  left: 0,\n  position: 'absolute',\n  transform: 'scale(0)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeIn,\n    duration: theme.transitions.duration.shortest\n  })\n}, ownerState.checked && {\n  transform: 'scale(1)',\n  transition: theme.transitions.create('transform', {\n    easing: theme.transitions.easing.easeOut,\n    duration: theme.transitions.duration.shortest\n  })\n}));\n\n/**\n * @ignore - internal component.\n */\nfunction RadioButtonIcon(props) {\n  const {\n    checked = false,\n    classes = {},\n    fontSize\n  } = props;\n  const ownerState = _extends({}, props, {\n    checked\n  });\n  return /*#__PURE__*/_jsxs(RadioButtonIconRoot, {\n    className: classes.root,\n    ownerState: ownerState,\n    children: [/*#__PURE__*/_jsx(RadioButtonIconBackground, {\n      fontSize: fontSize,\n      className: classes.background,\n      ownerState: ownerState\n    }), /*#__PURE__*/_jsx(RadioButtonIconDot, {\n      fontSize: fontSize,\n      className: classes.dot,\n      ownerState: ownerState\n    })]\n  });\n}\nprocess.env.NODE_ENV !== \"production\" ? RadioButtonIcon.propTypes = {\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   */\n  fontSize: PropTypes.oneOf(['small', 'medium'])\n} : void 0;\nexport default RadioButtonIcon;","import * as React from 'react';\n/**\n * @ignore - internal component.\n */\nconst RadioGroupContext = /*#__PURE__*/React.createContext(undefined);\nif (process.env.NODE_ENV !== 'production') {\n  RadioGroupContext.displayName = 'RadioGroupContext';\n}\nexport default RadioGroupContext;","'use client';\n\nimport * as React from 'react';\nimport RadioGroupContext from './RadioGroupContext';\nexport default function useRadioGroup() {\n  return React.useContext(RadioGroupContext);\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getRadioUtilityClass(slot) {\n  return generateUtilityClass('MuiRadio', slot);\n}\nconst radioClasses = generateUtilityClasses('MuiRadio', ['root', 'checked', 'disabled', 'colorPrimary', 'colorSecondary', 'sizeSmall']);\nexport default radioClasses;","'use client';\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"checked\", \"checkedIcon\", \"color\", \"icon\", \"name\", \"onChange\", \"size\", \"className\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { refType } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base/composeClasses';\nimport { alpha } from '@mui/system';\nimport SwitchBase from '../internal/SwitchBase';\nimport useThemeProps from '../styles/useThemeProps';\nimport RadioButtonIcon from './RadioButtonIcon';\nimport capitalize from '../utils/capitalize';\nimport createChainedFunction from '../utils/createChainedFunction';\nimport useRadioGroup from '../RadioGroup/useRadioGroup';\nimport radioClasses, { getRadioUtilityClass } from './radioClasses';\nimport styled, { rootShouldForwardProp } from '../styles/styled';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    size\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, size !== 'medium' && `size${capitalize(size)}`]\n  };\n  return _extends({}, classes, composeClasses(slots, getRadioUtilityClass, classes));\n};\nconst RadioRoot = styled(SwitchBase, {\n  shouldForwardProp: prop => rootShouldForwardProp(prop) || prop === 'classes',\n  name: 'MuiRadio',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, styles[`color${capitalize(ownerState.color)}`]];\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, !ownerState.disableRipple && {\n  '&:hover': {\n    backgroundColor: theme.vars ? `rgba(${ownerState.color === 'default' ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : alpha(ownerState.color === 'default' ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),\n    // Reset on touch devices, it doesn't add specificity\n    '@media (hover: none)': {\n      backgroundColor: 'transparent'\n    }\n  }\n}, ownerState.color !== 'default' && {\n  [`&.${radioClasses.checked}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  }\n}, {\n  [`&.${radioClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.action.disabled\n  }\n}));\nfunction areEqualValues(a, b) {\n  if (typeof b === 'object' && b !== null) {\n    return a === b;\n  }\n\n  // The value could be a number, the DOM will stringify it anyway.\n  return String(a) === String(b);\n}\nconst defaultCheckedIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {\n  checked: true\n});\nconst defaultIcon = /*#__PURE__*/_jsx(RadioButtonIcon, {});\nconst Radio = /*#__PURE__*/React.forwardRef(function Radio(inProps, ref) {\n  var _defaultIcon$props$fo, _defaultCheckedIcon$p;\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiRadio'\n  });\n  const {\n      checked: checkedProp,\n      checkedIcon = defaultCheckedIcon,\n      color = 'primary',\n      icon = defaultIcon,\n      name: nameProp,\n      onChange: onChangeProp,\n      size = 'medium',\n      className\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const ownerState = _extends({}, props, {\n    color,\n    size\n  });\n  const classes = useUtilityClasses(ownerState);\n  const radioGroup = useRadioGroup();\n  let checked = checkedProp;\n  const onChange = createChainedFunction(onChangeProp, radioGroup && radioGroup.onChange);\n  let name = nameProp;\n  if (radioGroup) {\n    if (typeof checked === 'undefined') {\n      checked = areEqualValues(radioGroup.value, props.value);\n    }\n    if (typeof name === 'undefined') {\n      name = radioGroup.name;\n    }\n  }\n  return /*#__PURE__*/_jsx(RadioRoot, _extends({\n    type: \"radio\",\n    icon: /*#__PURE__*/React.cloneElement(icon, {\n      fontSize: (_defaultIcon$props$fo = defaultIcon.props.fontSize) != null ? _defaultIcon$props$fo : size\n    }),\n    checkedIcon: /*#__PURE__*/React.cloneElement(checkedIcon, {\n      fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon.props.fontSize) != null ? _defaultCheckedIcon$p : size\n    }),\n    ownerState: ownerState,\n    classes: classes,\n    name: name,\n    checked: checked,\n    onChange: onChange,\n    ref: ref,\n    className: clsx(classes.root, className)\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Radio.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * If `true`, the component is checked.\n   */\n  checked: PropTypes.bool,\n  /**\n   * The icon to display when the component is checked.\n   * @default <RadioButtonIcon checked />\n   */\n  checkedIcon: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   * @default 'primary'\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['default', 'primary', 'secondary', 'error', 'info', 'success', 'warning']), PropTypes.string]),\n  /**\n   * If `true`, the component is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the ripple effect is disabled.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n  /**\n   * The icon to display when the component is unchecked.\n   * @default <RadioButtonIcon />\n   */\n  icon: PropTypes.node,\n  /**\n   * The id of the `input` element.\n   */\n  id: PropTypes.string,\n  /**\n   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.\n   */\n  inputProps: PropTypes.object,\n  /**\n   * Pass a ref to the `input` element.\n   */\n  inputRef: refType,\n  /**\n   * Name attribute of the `input` element.\n   */\n  name: PropTypes.string,\n  /**\n   * Callback fired when the state is changed.\n   *\n   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   * You can pull out the new checked state by accessing `event.target.checked` (boolean).\n   */\n  onChange: PropTypes.func,\n  /**\n   * If `true`, the `input` element is required.\n   * @default false\n   */\n  required: PropTypes.bool,\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense radio styling.\n   * @default 'medium'\n   */\n  size: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.string]),\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n  /**\n   * The value of the component. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default Radio;","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zm-2.21 5.04c.13.57.21 1.17.21 1.78 0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8c1.58 0 3.04.46 4.28 1.25l1.44-1.44C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-1.19-.22-2.33-.6-3.39l-1.61 1.61z\"\n}), 'TaskAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-10 7H8v3H6v-3H3v-2h3V8h2v3h3v2zm4.5 2c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm4-3c-.83 0-1.5-.67-1.5-1.5S18.67 9 19.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n}), 'VideogameAsset');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"\n}), 'Whatshot');","import { CardContent, Typography } from \"@mui/material\";\nimport {\n  CardMediaImage,\n  DetailCard,\n  TimelineActivatedSegment,\n  TimelineCard,\n  TimelineEmptySegment,\n  TypedCardMediaImage,\n} from \"../common/Card\";\nimport { VideoGame, companyToColor, ratingToColour, statusToColour } from \"./types\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\nimport { CURRENT_DATE, dateDiffInDays } from \"../utils/dateUtils\";\n\nconst VgCardMediaImage: TypedCardMediaImage<VideoGame> = ({ item, ...props }) => (\n  <CardMediaImage\n    alt={item.name}\n    image={item.banner}\n    detailComponent={(colour) => (\n      <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n        <Grid container spacing={1}>\n          <VgTimelineCard colour={colour} item={item} />\n          <DetailCard\n            colour={colour}\n            label=\"Start Date\"\n            value={item.exactDate ? item.startDate.toLocaleDateString() : item.startDate?.getFullYear()}\n          />\n          <DetailCard\n            colour={colour}\n            label=\"End Date\"\n            value={item.exactDate ? item.endDate?.toLocaleDateString() : item.endDate?.getFullYear()}\n          />\n          <DetailCard colour={colour} label=\"Days To Beat\" value={item.exactDate ? item.numDays : undefined} />\n          <DetailCard colour={colour} label=\"Hours\" value={item.hours} />\n\n          <DetailCard colour={statusToColour(item)} label=\"Status\" value={item.status} />\n          <DetailCard colour={companyToColor(item)} label=\"Platform\" value={item.platform} />\n          <DetailCard colour={colour} label=\"Release Date\" value={item.releaseDate.toLocaleDateString()} />\n          <DetailCard colour={colour} label=\"Format\" value={item.format} />\n\n          <DetailCard colour={colour} label=\"Developer\" value={item.developer} />\n          <DetailCard colour={colour} label=\"Publisher\" value={item.publisher} />\n          <DetailCard colour={colour} label=\"Franchise\" value={item.franchise} />\n          <DetailCard colour={ratingToColour(item)} label=\"PEGI\" value={item.rating} />\n\n          <DetailCard colour={colour} label=\"Genre\" value={item.genre} />\n          <DetailCard large colour={colour} label=\"Themes\" value={item.theme.join(\" - \")} />\n        </Grid>\n      </CardContent>\n    )}\n    {...props}\n  />\n);\n\nconst startYear = new Date(2004, 0, 1);\nconst days = dateDiffInDays(startYear, CURRENT_DATE)!;\n\nconst VgTimelineCard = ({ colour, item: game }: { colour?: string; item: VideoGame }) => {\n  if (!game.startDate || game.startDate < startYear) return null;\n  const endDate = game.endDate\n    ? game.exactDate\n      ? game.endDate\n      : new Date(game.startDate.getFullYear(), game.startDate.getMonth() + 1, game.startDate.getDay())\n    : CURRENT_DATE;\n  const startDays = dateDiffInDays(startYear, game.startDate)!;\n  const startPercent = (startDays / days) * 100;\n  const gameLengthPercent = Math.max(((game.numDays ?? dateDiffInDays(game.startDate, endDate)!) / days) * 100, 0.5);\n  const endPercent = 100 - gameLengthPercent - startPercent;\n\n  return (\n    <TimelineCard\n      segments={[\n        <TimelineEmptySegment key={0} percent={startPercent} />,\n        <TimelineActivatedSegment\n          key={1}\n          percent={gameLengthPercent}\n          backgroundColour={[\"secondary.dark\", \"secondary.light\"]}\n          tooltip={\n            <>\n              {game.exactDate ? (\n                <>\n                  <Typography>\n                    Played {game.startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n                  </Typography>\n                  <Typography>{game.numDays} Days</Typography>\n                </>\n              ) : (\n                <Typography>Played in {game.startDate.getFullYear()}</Typography>\n              )}\n              <Typography>{game.hours} Hours</Typography>\n            </>\n          }\n        />,\n        <TimelineEmptySegment key={2} percent={endPercent} />,\n      ]}\n      colour={colour}\n    />\n  );\n};\n\nexport default VgCardMediaImage;\n","import {\n  AutoGraph,\n  Pause,\n  PlayArrow,\n  ShowChart,\n  TaskAlt,\n  Timer,\n  Update,\n  VideogameAsset,\n  Whatshot,\n} from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { prepareForSlot } from \"@mui/base/utils\";\nimport { CURRENT_YEAR, EARLIEST_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { Company, Measure, Status, VideoGame, companyToColor, platformToShort, statusToColour } from \"./types\";\nimport { StatCard, StatList, StatsListProps } from \"../common/Stats\";\nimport VgCardMediaImage from \"./CardMediaImage\";\nimport { Box, Card, CardContent, CardHeader, FormControl, MenuItem, Radio, Select, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\nimport { FilterDispatch, YearType } from \"./filterUtils\";\n\nconst Stats = ({\n  data,\n  measure,\n  yearType,\n  yearTo,\n  filterDispatch,\n}: {\n  data: VideoGame[];\n  measure: Measure;\n  yearType: YearType;\n  yearTo: number;\n  filterDispatch: FilterDispatch;\n}) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} yearTo={yearTo} yearType={yearType} filterDispatch={filterDispatch} />\n      <ThisYearSoFar data={data} yearTo={yearTo} yearType={yearType} filterDispatch={filterDispatch} />\n      <Averages data={data} yearType={yearType} />\n      <AveragesPerGame data={data} />\n      <Totals data={data} measure={measure} />\n      <CurrentlyPlaying data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n    </Grid>\n  );\n};\n\nconst Segment = ({\n  percent,\n  backgroundColour,\n  spacing = 2,\n}: {\n  percent: number;\n  backgroundColour: string;\n  spacing?: number;\n}) => (\n  <Box\n    sx={{\n      width: `${percent}%`,\n      height: (theme) => theme.spacing(spacing),\n      backgroundColor: backgroundColour,\n    }}\n  />\n);\n\nconst TotalStack = <T extends string>({\n  title,\n  data,\n  measure,\n  groupKey,\n  group,\n  groupToColour,\n  icon,\n}: {\n  title: string;\n  data: VideoGame[];\n  measure: Measure;\n  groupKey: keyof VideoGame;\n  group: T[];\n  groupToColour: (ele: T) => string;\n  icon: ReactNode;\n}) => {\n  const total = measure === \"Count\" ? data.length : data.sum(\"hours\");\n  let percentLeft = 100;\n\n  const totals = group\n    .map((e) => {\n      const count =\n        measure === \"Count\"\n          ? data.filter((vg) => vg[groupKey] === e).length\n          : data.filter((vg) => vg[groupKey] === e).sum(\"hours\");\n      const percent = Math.max((count / total) * 100, 0.5);\n      percentLeft -= percent;\n      return {\n        name: e,\n        count,\n        percent,\n        colour: groupToColour(e),\n      };\n    })\n    .filter((struct) => struct.count > 0);\n\n  totals[0].percent += percentLeft;\n\n  return (\n    <Card sx={{ height: \"100%\" }}>\n      <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n      <CardContent\n        sx={{\n          \":last-child\": { paddingBottom: 1 },\n          height: \"100%\",\n        }}\n      >\n        <Stack direction=\"row\" alignItems=\"center\" height={(theme) => theme.spacing(3)} spacing={0.5}>\n          {totals.map((struct) => (\n            <Segment key={struct.name} percent={struct.percent} backgroundColour={struct.colour} />\n          ))}\n        </Stack>\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          {totals.map((struct) => (\n            <Stack key={struct.name} direction=\"column\" width=\"100%\">\n              <Segment percent={100} backgroundColour={struct.colour} spacing={1} />\n              <Typography variant=\"h6\">{struct.name}</Typography>\n              <Typography variant=\"body1\">{`${struct.count} ${measure === \"Count\" ? \"Games\" : \"Hours\"}`}</Typography>\n            </Stack>\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Totals = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const statusList: Status[] = [\"Beat\", \"Playing\", \"Endless\", \"Abandoned\"];\n  const companyList: Company[] = [\"Nintendo\", \"PlayStation\", \"PC\", \"iOS\", \"Xbox\"];\n  return (\n    <Grid xs={12} sm={12} md={8}>\n      <Stack justifyContent=\"space-between\" height=\"100%\" spacing={1}>\n        <TotalStack\n          title={\"Status\"}\n          icon={<TaskAlt />}\n          data={data}\n          measure={measure}\n          groupKey=\"status\"\n          group={statusList}\n          groupToColour={(ele: Status) => statusToColour({ status: ele })}\n        />\n        <TotalStack\n          title={\"Platforms\"}\n          icon={<VideogameAsset />}\n          data={data}\n          measure={measure}\n          groupKey=\"company\"\n          group={companyList}\n          groupToColour={(ele: Company) => companyToColor({ company: ele })}\n        />\n      </Stack>\n    </Grid>\n  );\n};\n\nconst AllTime = ({\n  data,\n  yearType,\n  yearTo,\n  filterDispatch,\n}: {\n  data: VideoGame[];\n  yearType: YearType;\n  yearTo: number;\n  filterDispatch: FilterDispatch;\n}) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  const titleSelect = (\n    <FormControl variant=\"standard\" sx={{ minWidth: 130, margin: 0 }}>\n      <Select\n        SelectDisplayProps={{ style: { padding: 0 } }}\n        value={yearTo}\n        displayEmpty\n        onChange={(event) =>\n          filterDispatch({ type: \"updateFilter\", filter: \"yearTo\", value: event.target.value as number })\n        }\n        renderValue={(value) => <Typography variant=\"h6\">{value == CURRENT_YEAR ? \"All Time\" : `Up To ${value}`}</Typography>}\n        slots={{ root: prepareForSlot(\"span\") }}\n      >\n        {Array.from({ length: CURRENT_YEAR - EARLIEST_YEAR + 1 }, (_, i) => CURRENT_YEAR - i).map((year) => (\n          <MenuItem key={year} value={year}>\n            {year}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n\n  return (\n    <StatCard\n      icon={<Timer />}\n      title={titleSelect}\n      action={<Radio size=\"small\" checked={yearType == 'date'} onChange={() => filterDispatch({ type: \"toggleYearType\" })} />}\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data, yearTo, yearType, filterDispatch }: { data: VideoGame[], yearTo: number, yearType: YearType, filterDispatch: FilterDispatch }) => {\n  const filtered = data.filter((game) => game.startDate.getFullYear() === yearTo && game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  const titleSelect = (\n    <FormControl variant=\"standard\" sx={{ minWidth: 120, margin: 0 }}>\n      <Select\n        SelectDisplayProps={{ style: { padding: 0 } }}\n        value={yearTo}\n        displayEmpty\n        onChange={(event) =>\n          filterDispatch({ type: \"updateFilter\", filter: \"yearTo\", value: event.target.value as number })\n        }\n        renderValue={(value) => <Typography variant=\"h6\">In {value}</Typography>}\n        slots={{ root: prepareForSlot(\"span\") }}\n      >\n        {Array.from({ length: CURRENT_YEAR - EARLIEST_YEAR + 1 }, (_, i) => CURRENT_YEAR - i).map((year) => (\n          <MenuItem key={year} value={year}>\n            {year}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n\n  return (\n    <StatCard\n      icon={<Update />}\n      title={titleSelect}\n      action={<Radio size=\"small\" checked={yearType == 'exact'} onChange={() => filterDispatch({ type: \"toggleYearType\" })} />}\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data, yearType }: { data: VideoGame[],  yearType: YearType }) => {\n  if (yearType == \"exact\") return;\n  const grouped = data.reduce<Record<string, [number, number]>>((tree, game) => {\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n    tree[year] ??= [0, 0];\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {});\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2));\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2));\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === \"Beat\" && game.hours && game.numDays);\n  const hours = Math.round(filtered.sum(\"hours\") / filtered.length);\n  const days = Math.round(filtered.sum(\"numDays\") / filtered.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Game Average\"\n      content={[\n        [\"Hours\", hours],\n        [\"Days To Beat\", days],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"endDate\")\n    .slice(0, 6);\n  return (\n    <VgStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      labelComponent={StatsCardLabelEndDateHours}\n    />\n  );\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"hours\")\n    .slice(0, 6);\n  return (\n    <VgStatList icon={<Whatshot />} title=\"Most Played\" content={most} labelComponent={StatsCardLabelEndDateHours} />\n  );\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sortByKey(\"startDate\").reverse();\n  if (recent.length == 0) return null;\n  return (\n    <VgStatList\n      icon={<PlayArrow />}\n      title=\"Currently Playing\"\n      content={recent}\n      labelComponent={StatsCardLabelStartDate}\n      width={[12, 12, 4]}\n      pictureWidth={[12, 4, 12]}\n      wrap={false}\n    />\n  );\n};\n\nconst StatsCardLabelEndDateHours = (game: VideoGame) => [\n  [game.endDate?.toLocaleDateString() ?? \"\", `${format(game.hours!)} Hours`],\n];\n\nconst StatsCardLabelStartDate = (game: VideoGame) => [[game.startDate?.toLocaleDateString() ?? \"\"]];\n\nconst VgStatList = (\n  props: Omit<StatsListProps<VideoGame>, \"MediaComponent\" | \"aspectRatio\" | \"divider\" | \"chipComponent\" | \"landscape\">,\n) => (\n  <StatList\n    aspectRatio=\"16/9\"\n    divider\n    chipComponent={platformToShort}\n    landscape\n    MediaComponent={VgCardMediaImage}\n    {...props}\n  />\n);\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup, useTheme } from \"@mui/material\";\nimport { Dispatch, SetStateAction, useMemo, useState } from \"react\";\nimport Plot from \"../plotly\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, isVideoGame, Measure, VideoGame, VideoGameTree } from \"./types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n  colours: string[];\n}\n\nconst isStringArray = (x: unknown[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const theme = useTheme();\n  const controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][] = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\"),\n  ];\n  const { ids, labels, parents, values, colours }: SunburstData = useMemo(\n    () =>\n      dataToSunburstData(\n        data,\n        controlStates.map(([s]) => s),\n        measure,\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, measure, ...controlStates],\n  );\n\n  return (\n    <Card>\n      <CardHeader title=\"Sunburst\" action={<SunBurstControls controlStates={controlStates} />} />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\", maxHeight: \"100vw\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n              marker: { line: { color: theme.palette.background.paper }, colors: colours },\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            margin: { l: 0, r: 0, b: 0, t: 0 },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"name\",\n  \"platform\",\n  \"publisher\",\n  \"genre\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  controlStates,\n}: {\n  controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][];\n}) => {\n  return (\n    <FormGroup>\n      {controlStates.map(([val, setVal], index) => (\n        <SelectBox options={options} key={\"sunburst-control-\" + index} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      return !(measure === \"Hours\" && curr.hours === undefined);\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.name] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n  const colours: string[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string): [number, string] => {\n    let total = 0;\n    let colour = \"\";\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n          if (groups[0] === \"company\") {\n            colour = companyToColor(value);\n          }\n        } else {\n          [count, colour] = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        colours.push(colour);\n        total += count;\n      });\n\n    return [total, colour];\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n    colours,\n  };\n};\n\nexport default Sunburst;\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, Measure, VideoGame, VideoGameStringKeys } from \"./types\";\nimport Barchart, { Grouped } from \"../common/Barchart\";\nimport { YearType } from \"./filterUtils\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  name: false,\n  platform: true,\n  developer: false,\n  publisher: false,\n  rating: true,\n  status: true,\n  genre: true,\n};\n\nconst VgBarchart = ({ data, measure, yearType }: { data: VideoGame[]; measure: Measure, yearType: YearType }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(false);\n  const [stack, setStack] = useState(true);\n\n  const grouped = groupDate(data, group, measure, cumulative, yearType);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (\n  data: VideoGame[],\n  group: VideoGameStringKeys | \"none\",\n  measure: Measure,\n  cumulative: boolean,\n  yearType: YearType,\n): Grouped => {\n  return data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = cumulative || yearType == \"exact\" ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] ??= { color: group === \"company\" ? companyToColor(game) : \"\", data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Grouped);\n};\n\nexport default VgBarchart;\n","import { CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst VgTimeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n  const gameData: [string, string, string, Date, Date][] = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.name, tooltip(row), row.startDate, row.endDate ?? CURRENT_DATE]);\n\n  return (\n    <Timeline data={gameData} showRowLabels={groupData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n<div style=\"display: flex; border: 1px solid black; background-color: ${companyToColor(row)}\" class=\"backgroundPaper\">\n  <div style=\"flex: 0.6; white-space:nowrap; padding: 10px; \"> \n    <b>${row.name}</b><br> \n    <hr />\n    Hours: ${row.hours}<br> \n    Period: ${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString() ?? \"present\"}<br> \n    Days: ${row.numDays ?? \"-\"}\n  </div>\n  ${\n    row.banner\n      ? `\n      <div style=\"flex: 1; min-width: 200px\">\n        <img src=\"${row.banner}\"\n        style=\"max-width: 100%; max-height: 200px;\"> \n      </div>\n   `\n      : ``\n  }\n</div>\n`;\n\nexport default VgTimeline;\n","import Stats from \"./Stats\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport Sunburst from \"./Sunburst\";\nimport Barchart from \"./Barchart\";\nimport Finished from \"../common/Finished\";\nimport Timeline from \"./Timeline\";\nimport { Stack, Typography } from \"@mui/material\";\nimport CardMediaImage from \"./CardMediaImage\";\nimport { FilterDispatch, FilterState } from \"./filterUtils\";\n\nconst Graphs = ({\n  vgData,\n  filterState,\n  filterDispatch,\n}: {\n  vgData: VideoGame[];\n  filterState: FilterState;\n  filterDispatch: FilterDispatch;\n}) =>\n  vgData.length > 0 ? (\n    <Stack spacing={2}>\n      <Stats data={vgData} yearType={filterState.yearType} yearTo={filterState.yearTo} measure={filterState.measure} filterDispatch={filterDispatch} />\n      <Timeline data={vgData} />\n      <Sunburst data={vgData} measure={filterState.measure} />\n      <Barchart data={vgData} measure={filterState.measure} yearType={filterState.yearType} />\n      <Finished MediaComponent={CardMediaImage} title=\"All Games\" data={vgData} width={4} colour={companyToColor} />\n    </Stack>\n  ) : (\n    <Typography variant=\"h1\" textAlign=\"center\">\n      No Data Found\n    </Typography>\n  );\n\nexport default Graphs;\n"],"names":["_excluded","prepareForSlot","Component","React.forwardRef","props","ref","other","_objectWithoutPropertiesLoose","React.createElement","_extends","RadioButtonUncheckedIcon","createSvgIcon","_jsx","RadioButtonCheckedIcon","RadioButtonIconRoot","styled","RadioButtonIconBackground","RadioButtonIconDot","theme","ownerState","RadioButtonIcon","checked","classes","fontSize","_jsxs","RadioGroupContext","React.createContext","RadioGroupContext$1","useRadioGroup","React.useContext","getRadioUtilityClass","slot","generateUtilityClass","radioClasses","generateUtilityClasses","radioClasses$1","useUtilityClasses","color","size","slots","capitalize","composeClasses","RadioRoot","SwitchBase","prop","rootShouldForwardProp","styles","alpha","areEqualValues","a","b","defaultCheckedIcon","defaultIcon","Radio","inProps","_defaultIcon$props$fo","_defaultCheckedIcon$p","useThemeProps","checkedProp","checkedIcon","icon","nameProp","onChangeProp","className","radioGroup","onChange","createChainedFunction","name","React.cloneElement","clsx","Radio$1","TaskAlt","VideogameAsset","Whatshot","VgCardMediaImage","item","jsx","CardMediaImage","colour","CardContent","Grid","VgTimelineCard","DetailCard","_a","_b","_c","statusToColour","companyToColor","ratingToColour","startYear","days","dateDiffInDays","CURRENT_DATE","game","endDate","startPercent","gameLengthPercent","endPercent","TimelineCard","TimelineEmptySegment","TimelineActivatedSegment","jsxs","Fragment","Typography","Stats","data","measure","yearType","yearTo","filterDispatch","AllTime","ThisYearSoFar","Averages","AveragesPerGame","Totals","CurrentlyPlaying","MostPlayed","RecentlyComplete","Segment","percent","backgroundColour","spacing","Box","TotalStack","title","groupKey","group","groupToColour","total","percentLeft","totals","e","count","vg","struct","Card","CardHeader","Stack","statusList","companyList","ele","filtered","time","games","titleSelect","FormControl","Select","event","value","CURRENT_YEAR","EARLIEST_YEAR","_","i","year","MenuItem","StatCard","Timer","Update","grouped","tree","hours","ShowChart","AutoGraph","recent","VgStatList","Pause","StatsCardLabelEndDateHours","most","PlayArrow","StatsCardLabelStartDate","format","StatList","platformToShort","isStringArray","x","Sunburst","useTheme","controlStates","useState","ids","labels","parents","values","colours","useMemo","dataToSunburstData","s","SunBurstControls","Plot","options","FormGroup","val","setVal","index","SelectBox","groups","keyToVal","key","curr","groupVals","obj","recurseGroup","parent","val2","isVideoGame","VgBarchart","setGroup","cumulative","setCumulative","stack","setStack","groupDate","Barchart","FormControlLabel","Switch","groupVal","VgTimeline","groupData","setGroupData","groupFunc","company","gameData","exactDate","startDate","row","tooltip","Timeline","Graphs","vgData","filterState","Finished"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}