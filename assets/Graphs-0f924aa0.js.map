{"version":3,"file":"Graphs-0f924aa0.js","sources":["../../src/show/Barchart.tsx","../../src/show/types.ts","../../src/show/CardMediaImage.tsx","../../src/show/Stats.tsx","../../src/show/Timeline.tsx","../../src/show/Graphs.tsx"],"sourcesContent":["import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"../vg/SelectionComponents\";\nimport { Measure, Season, Show, ShowStringKeys } from \"./types\";\nimport Barchart, { Grouped } from \"../common/Barchart\";\n\nconst options: Record<ShowStringKeys | \"none\", boolean> = {\n  name: false,\n  status: true,\n  none: false,\n};\n\nconst ShowBarchart = ({ data, measure }: { data: Show[]; measure: Measure }) => {\n  const [group, setGroup] = useState<ShowStringKeys | \"none\">(\"none\");\n  const [cumulative, setCumulative] = useState(false);\n  const [stack, setStack] = useState(true);\n\n  const seasonArray = data.flatMap((show) => show.s);\n  const grouped = groupDate(seasonArray, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Episodes\" ? \"Episodes Watched\" : \"Hours Watched\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (ShowStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (data: Season[], group: ShowStringKeys | \"none\", measure: Measure, cumulative: boolean): Grouped => {\n  const grouped = data.reduce((tree, season) => {\n    const { show } = season;\n    const groupVal = group === \"none\" ? \"\" : show[group];\n    const year = cumulative\n      ? season.startDate?.toISOString().substring(0, 7)\n      : season.startDate?.getFullYear().toString();\n    if (!year || !season.minutes) return tree;\n\n    tree[groupVal] ??= { color: \"\", data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Episodes\" ? season.e : season.minutes);\n    return tree;\n  }, {} as Grouped);\n\n  if (measure === \"Hours\") {\n    Object.values(grouped).forEach(({ data: record }) =>\n      Object.entries(record).forEach(([key, value]) => (record[key] = Math.floor(value / 60))),\n    );\n  }\n\n  return grouped;\n};\n\nexport default ShowBarchart;\n","import { KeysMatching } from \"../utils/types\";\n\nexport interface Show {\n  name: string;\n  status: Status;\n  startDate: Date;\n  endDate?: Date;\n  anime: boolean;\n  s: Season[];\n  e: number;\n  minutes: number;\n  banner?: string;\n}\n\nexport interface Season {\n  s: number;\n  e: number;\n  subtitle?: string;\n  startDate: Date;\n  endDate?: Date;\n  episodeLength: number;\n  minutes: number;\n  show: Show;\n}\n\nexport type Status = \"Watching\" | \"Up To Date\" | \"Ended\" | \"Cancelled\" | \"Abandoned\";\n\nexport type ShowKeys = keyof Show;\nexport type ShowStringKeys = KeysMatching<Show, string>;\n\nexport type Measure = \"Hours\" | \"Episodes\";\n\nexport const isShow = (arg: Show | Season): arg is Show => \"name\" in arg;\n","import { CardContent, Typography } from \"@mui/material\";\nimport {\n  CardMediaImage,\n  DetailCard,\n  TimelineActivatedSegment,\n  TimelineCard,\n  TimelineEmptySegment,\n  TypedCardMediaImage,\n} from \"../common/Card\";\nimport { Season, Show, isShow } from \"./types\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\nimport { statusToColour } from \"../vg/types\";\nimport { CURRENT_DATE, dateDiffInDays } from \"../utils/dateUtils\";\n\nconst ShowCardMediaImage = <T extends Show | Season>({ item, ...props }: Parameters<TypedCardMediaImage<T>>[0]) => {\n  const show = isShow(item) ? item : item.show;\n  return (\n    <CardMediaImage\n      alt={show.name}\n      image={show.banner}\n      detailComponent={(colour) => (\n        <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n          <Grid container spacing={1}>\n            <ShowTimelineCard colour={colour} item={show} />\n            <DetailCard colour={colour} label=\"Start Date\" value={show.startDate.toLocaleDateString()} />\n            <DetailCard colour={colour} label=\"End Date\" value={show.endDate?.toLocaleDateString()} />\n            <DetailCard colour={statusToColour(show)} label=\"Status\" value={show.status} />\n            <DetailCard colour={colour} label=\"Last Watched\" value={`S${show.s.length}E${show.s.at(-1)!.e}`} />\n            <DetailCard colour={colour} label=\"Hours\" value={Math.floor(show.minutes / 60)} />\n            <DetailCard colour={colour} label=\"Episodes\" value={show.e} />\n          </Grid>\n        </CardContent>\n      )}\n      {...props}\n    />\n  );\n};\n\nconst startYear = new Date(2008, 0, 1);\nconst days = dateDiffInDays(startYear, CURRENT_DATE)!;\n\nconst ShowTimelineCard = ({ colour, item }: { colour?: string; item: Show }) => {\n  if (!item.startDate || item.startDate < startYear) return null;\n  let startDate = startYear;\n  const segments = item.s.flatMap((season, index) => {\n    const seasonSegments = [];\n\n    if (startDate < season.startDate) {\n      const daysToSeasonStart = dateDiffInDays(startDate, season.startDate)!;\n      const percentToSeasonStart = (daysToSeasonStart / days) * 100;\n      seasonSegments.push(<TimelineEmptySegment key={`${season.s}-before`} percent={percentToSeasonStart} />);\n    }\n\n    const endDate = season.endDate ?? CURRENT_DATE;\n    const seasonLengthPercent = Math.max((dateDiffInDays(season.startDate, endDate)! / days) * 100, 0.5);\n    seasonSegments.push(\n      <TimelineActivatedSegment\n        key={season.s}\n        percent={seasonLengthPercent}\n        backgroundColour={[\n          `${index % 2 === 0 ? \"secondary\" : \"primary\"}.light`,\n          `${index % 2 === 0 ? \"secondary\" : \"primary\"}.main`,\n        ]}\n        tooltip={\n          <>\n            <Typography variant=\"h6\" align=\"center\">\n              S{season.s}\n            </Typography>\n            <Typography>\n              {season.startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n            </Typography>\n            <Typography>{season.e} Episodes</Typography>\n            <Typography>{Math.floor(season.minutes / 60)} Hours</Typography>\n          </>\n        }\n      />,\n    );\n\n    startDate = new Date(endDate);\n    startDate.setDate(startDate.getDate() + 1);\n    return seasonSegments;\n  });\n\n  if (startDate < CURRENT_DATE) {\n    const daysToEnd = dateDiffInDays(startDate, CURRENT_DATE)!;\n    const percentToEnd = (daysToEnd / days) * 100;\n    segments.push(<TimelineEmptySegment key={\"last\"} percent={percentToEnd} />);\n  }\n\n  return <TimelineCard segments={segments} colour={colour} />;\n};\n\nexport default ShowCardMediaImage;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { Season, Show } from \"./types\";\nimport { StatCard, StatList, StatsListProps } from \"../common/Stats\";\nimport ShowCardMediaImage from \"./CardMediaImage\";\nimport { statusToColour } from \"../vg/types\";\n\nconst Stats = ({ data }: { data: Show[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerShow data={data} />\n      <CurrentlyPlaying data={data} />\n      <RecentlyComplete data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: Show[] }) => {\n  const totalShows = data.length;\n  const totalEpisodes = data.sum(\"e\");\n  const totalTime = Math.floor(data.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Shows\", totalShows],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s).filter((s) => s.startDate.getFullYear() === CURRENT_YEAR);\n  const totalSeasons = filtered.length;\n  const totalEpisodes = filtered.sum(\"e\");\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Update />}\n      title={`In ${CURRENT_YEAR}`}\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: Show[] }) => {\n  const grouped = data\n    .flatMap((show) => show.s)\n    .reduce(\n      (tree, s) => {\n        const year = s.startDate.getFullYear().toString();\n        if (!year || !s.minutes) return tree;\n        tree[year] ??= [0, 0, 0];\n        tree[year] = [tree[year][0] + 1, tree[year][1] + s.e, tree[year][2] + s.minutes];\n        return tree;\n      },\n      {} as Record<string, [number, number, number]>,\n    );\n\n  const seasons = Math.floor(Object.values(grouped).sum(0) / Object.keys(grouped).length);\n  const episodes = Math.floor(Object.values(grouped).sum(1) / Object.keys(grouped).length);\n  const hours = Math.floor(Object.values(grouped).sum(2) / Object.keys(grouped).length / 60);\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Seasons\", seasons],\n        [\"Episodes\", episodes],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerShow = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s);\n  const totalSeasons = Math.round(filtered.length / data.length);\n  const totalEpisodes = Math.round(filtered.sum(\"e\") / data.length);\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60 / data.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Show Average\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .flatMap((show) => show.s)\n    .filter((season) => season.endDate)\n    .sort((seasonA, seasonB) => (seasonA.endDate! < seasonB.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return (\n    <ShowStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      chipComponent={({ show }) => [show.status, statusToColour(show)]}\n      labelComponent={statsCardLabelRecentlyComplete}\n    />\n  );\n};\n\nconst statsCardLabelRecentlyComplete = (season: Season) => [\n  [`S ${season.s}`, season.endDate?.toLocaleDateString() ?? \"\"],\n  [`${season.e} Eps`, `${format(Math.round(season.minutes / 60))} Hours`],\n];\n\nconst CurrentlyPlaying = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .filter((show) => show.status === \"Watching\")\n    .map((show) => show.s.at(-1)!)\n    .filter((season) => !season.endDate)\n    .sort((seasonA, seasonB) => (seasonA.startDate < seasonB.startDate ? 1 : -1));\n  return (\n    <ShowStatList\n      icon={<PlayArrow />}\n      title=\"Currently Watching\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      labelComponent={statsCardLabelCurrentlyPlaying}\n    />\n  );\n};\n\nconst statsCardLabelCurrentlyPlaying = (season: Season) => [\n  [`S ${season.s}`, season.startDate?.toLocaleDateString() ?? \"\"],\n];\n\nconst ShowStatList = (props: Omit<StatsListProps<Season>, \"MediaComponent\">) => (\n  <StatList MediaComponent={ShowCardMediaImage} {...props} />\n);\n\nexport default Stats;\n","import { CardHeader, FormGroup, FormControlLabel, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Season, Show } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst ShowTimeline = ({ data }: { data: Show[] }) => {\n  const [groupData, setGroupData] = useState(true);\n\n  const titleData: [string, Show | Season, string?][] = groupData\n    ? data.map((show) => [show.name, show, show.banner])\n    : data.flatMap((show) =>\n        show.s.map(\n          (s) =>\n            [`${show.name} - S${s.s}${s.subtitle ? \" - \" + s.subtitle : \"\"}`, s, show.banner] as [\n              string,\n              Season,\n              string?,\n            ],\n        ),\n      );\n\n  const showData: [string, string, string, Date, Date][] = titleData.map(([title, s, banner]) => [\n    \"*\",\n    title,\n    tooltip(title, s, banner),\n    s.startDate,\n    s.endDate ?? CURRENT_DATE,\n  ]);\n\n  return (\n    <Timeline data={showData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Combine Seasons\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (title: string, row: Show | Season, banner?: string) =>\n  `\n  <div style=\"display: flex;\" class=\"backgroundPaper\">\n    ${banner ? `<img src=\"${banner}\" style=\"height: 150px\" /><hr />` : \"\"}  \n    <div>     \n      <ul style=\"list-style-type: none;padding: 5px\">\n        <li>\n          <span><b>${title}</b></span>\n        </li>\n      </ul>\n      <hr />\n      <ul style=\"list-style-type: none;padding-left: 10px\">\n        <li>\n          <span><b>Hours: </b></span>\n          <span\">${Math.round(row.minutes / 60)}</span>\n        </li>\n        <li>\n          <span><b>Period: </b></span>\n          <span>${row.startDate.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n        </li>\n        <li>\n          <span><b>Episodes: </b></span>\n          <span>${row.e}</span>\n        </li>\n      </ul>\n    </div>     \n  </div>\n  `;\n\nexport default ShowTimeline;\n","import { Stack } from \"@mui/material\";\nimport Finished from \"../common/Finished\";\nimport Barchart from \"./Barchart\";\nimport Stats from \"./Stats\";\nimport Timeline from \"./Timeline\";\nimport { Show } from \"./types\";\nimport ShowCardMediaImage from \"./CardMediaImage\";\nimport { statusToColour } from \"../vg/types\";\n\nconst Graphs = ({ data }: { data: Show[] }) => (\n  <Stack spacing={2}>\n    <Stats data={data} />\n    <Timeline data={data} />\n    <Barchart data={data} measure={\"Hours\"} />\n    <Finished title=\"All Shows\" data={data} width={3} colour={statusToColour} MediaComponent={ShowCardMediaImage} />\n  </Stack>\n);\n\nexport default Graphs;\n"],"names":["options","ShowBarchart","data","measure","group","setGroup","useState","cumulative","setCumulative","stack","setStack","seasonArray","show","grouped","groupDate","jsx","Barchart","CardHeader","FormGroup","SelectBox","jsxs","Stack","FormControlLabel","Switch","_","checked","tree","season","groupVal","year","_a","_b","record","key","value","isShow","arg","ShowCardMediaImage","item","props","CardMediaImage","colour","CardContent","theme","Grid","ShowTimelineCard","DetailCard","statusToColour","startYear","days","dateDiffInDays","CURRENT_DATE","startDate","segments","index","seasonSegments","percentToSeasonStart","TimelineEmptySegment","endDate","seasonLengthPercent","TimelineActivatedSegment","Fragment","Typography","percentToEnd","TimelineCard","Stats","AllTime","ThisYearSoFar","Averages","AveragesPerShow","CurrentlyPlaying","RecentlyComplete","totalShows","totalEpisodes","totalTime","StatCard","Timer","filtered","s","CURRENT_YEAR","totalSeasons","Update","seasons","episodes","hours","ShowChart","AutoGraph","recent","seasonA","seasonB","ShowStatList","Pause","statsCardLabelRecentlyComplete","format","PlayArrow","statsCardLabelCurrentlyPlaying","StatList","ShowTimeline","groupData","setGroupData","showData","title","banner","tooltip","Timeline","row","Graphs","Finished"],"mappings":"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"}