{"version":3,"file":"Graphs-933b65c8.js","sources":["../../node_modules/@mui/base/utils/prepareForSlot.js","../../node_modules/@mui/icons-material/esm/TaskAlt.js","../../node_modules/@mui/icons-material/esm/VideogameAsset.js","../../node_modules/@mui/icons-material/esm/Whatshot.js","../../src/vg/CardMediaImage.tsx","../../src/vg/Stats.tsx","../../src/vg/Sunburst.tsx","../../src/vg/Barchart.tsx","../../src/vg/Timeline.tsx","../../src/vg/Graphs.tsx"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"ownerState\"];\nimport * as React from 'react';\nexport function prepareForSlot(Component) {\n  return /*#__PURE__*/React.forwardRef(function Slot(props, ref) {\n    const other = _objectWithoutPropertiesLoose(props, _excluded);\n    return /*#__PURE__*/React.createElement(Component, _extends({}, other, {\n      ref\n    }));\n  });\n}","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M22 5.18 10.59 16.6l-4.24-4.24 1.41-1.41 2.83 2.83 10-10L22 5.18zm-2.21 5.04c.13.57.21 1.17.21 1.78 0 4.42-3.58 8-8 8s-8-3.58-8-8 3.58-8 8-8c1.58 0 3.04.46 4.28 1.25l1.44-1.44C16.1 2.67 14.13 2 12 2 6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10c0-1.19-.22-2.33-.6-3.39l-1.61 1.61z\"\n}), 'TaskAlt');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm-10 7H8v3H6v-3H3v-2h3V8h2v3h3v2zm4.5 2c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm4-3c-.83 0-1.5-.67-1.5-1.5S18.67 9 19.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"\n}), 'VideogameAsset');","\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"\n}), 'Whatshot');","import { CardContent, Typography } from \"@mui/material\";\nimport {\n  CardMediaImage,\n  DetailCard,\n  TimelineActivatedSegment,\n  TimelineCard,\n  TimelineEmptySegment,\n  TypedCardMediaImage,\n} from \"../common/Card\";\nimport { VideoGame, companyToColor, ratingToColour, statusToColour } from \"./types\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\nimport { CURRENT_DATE, dateDiffInDays } from \"../utils/dateUtils\";\n\nconst VgCardMediaImage: TypedCardMediaImage<VideoGame> = ({ item, ...props }) => (\n  <CardMediaImage\n    alt={item.name}\n    image={item.banner}\n    detailComponent={(colour) => (\n      <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n        <Grid container spacing={1}>\n          <VgTimelineCard colour={colour} item={item} />\n          <DetailCard\n            colour={colour}\n            label=\"Start Date\"\n            value={item.exactDate ? item.startDate.toLocaleDateString() : item.startDate?.getFullYear()}\n          />\n          <DetailCard\n            colour={colour}\n            label=\"End Date\"\n            value={item.exactDate ? item.endDate?.toLocaleDateString() : item.endDate?.getFullYear()}\n          />\n          <DetailCard colour={colour} label=\"Days To Beat\" value={item.exactDate ? item.numDays : undefined} />\n          <DetailCard colour={colour} label=\"Hours\" value={item.hours} />\n\n          <DetailCard colour={statusToColour(item)} label=\"Status\" value={item.status} />\n          <DetailCard colour={companyToColor(item)} label=\"Platform\" value={item.platform} />\n          <DetailCard colour={colour} label=\"Release Date\" value={item.releaseDate.toLocaleDateString()} />\n          <DetailCard colour={colour} label=\"Format\" value={item.format} />\n\n          <DetailCard colour={colour} label=\"Developer\" value={item.developer} />\n          <DetailCard colour={colour} label=\"Publisher\" value={item.publisher} />\n          <DetailCard colour={colour} label=\"Franchise\" value={item.franchise} />\n          <DetailCard colour={ratingToColour(item)} label=\"PEGI\" value={item.rating} />\n\n          <DetailCard colour={colour} label=\"Genre\" value={item.genre} />\n          <DetailCard large colour={colour} label=\"Themes\" value={item.theme.join(\" - \")} />\n        </Grid>\n      </CardContent>\n    )}\n    {...props}\n  />\n);\n\nconst startYear = new Date(2004, 0, 1);\nconst days = dateDiffInDays(startYear, CURRENT_DATE)!;\n\nconst VgTimelineCard = ({ colour, item: game }: { colour?: string; item: VideoGame }) => {\n  if (!game.startDate || game.startDate < startYear) return null;\n  const endDate = game.endDate\n    ? game.exactDate\n      ? game.endDate\n      : new Date(game.startDate.getFullYear(), game.startDate.getMonth() + 1, game.startDate.getDay())\n    : CURRENT_DATE;\n  const startDays = dateDiffInDays(startYear, game.startDate)!;\n  const startPercent = (startDays / days) * 100;\n  const gameLengthPercent = Math.max(((game.numDays ?? dateDiffInDays(game.startDate, endDate)!) / days) * 100, 0.5);\n  const endPercent = 100 - gameLengthPercent - startPercent;\n\n  return (\n    <TimelineCard\n      segments={[\n        <TimelineEmptySegment key={0} percent={startPercent} />,\n        <TimelineActivatedSegment\n          key={1}\n          percent={gameLengthPercent}\n          backgroundColour={[\"secondary.dark\", \"secondary.light\"]}\n          tooltip={\n            <>\n              {game.exactDate ? (\n                <>\n                  <Typography>\n                    Played {game.startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n                  </Typography>\n                  <Typography>{game.numDays} Days</Typography>\n                </>\n              ) : (\n                <Typography>Played in {game.startDate.getFullYear()}</Typography>\n              )}\n              <Typography>{game.hours} Hours</Typography>\n            </>\n          }\n        />,\n        <TimelineEmptySegment key={2} percent={endPercent} />,\n      ]}\n      colour={colour}\n    />\n  );\n};\n\nexport default VgCardMediaImage;\n","import {\n  AutoGraph,\n  Pause,\n  PlayArrow,\n  ShowChart,\n  TaskAlt,\n  Timer,\n  Update,\n  VideogameAsset,\n  Whatshot,\n} from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { prepareForSlot } from \"@mui/base/utils\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { Company, Measure, Status, VideoGame, companyToColor, platformToShort, statusToColour } from \"./types\";\nimport { StatCard, StatList, StatsListProps } from \"../common/Stats\";\nimport VgCardMediaImage from \"./CardMediaImage\";\nimport { Box, Card, CardContent, CardHeader, FormControl, MenuItem, Select, Stack, Typography } from \"@mui/material\";\nimport { ReactNode } from \"react\";\nimport { FilterDispatch } from \"./filterUtils\";\n\nconst Stats = ({\n  data,\n  measure,\n  yearTo,\n  filterDispatch,\n}: {\n  data: VideoGame[];\n  measure: Measure;\n  yearTo: number;\n  filterDispatch: FilterDispatch;\n}) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} yearTo={yearTo} filterDispatch={filterDispatch} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <Totals data={data} measure={measure} />\n      <CurrentlyPlaying data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n    </Grid>\n  );\n};\n\nconst Segment = ({\n  percent,\n  backgroundColour,\n  spacing = 2,\n}: {\n  percent: number;\n  backgroundColour: string;\n  spacing?: number;\n}) => (\n  <Box\n    sx={{\n      width: `${percent}%`,\n      height: (theme) => theme.spacing(spacing),\n      backgroundColor: backgroundColour,\n    }}\n  />\n);\n\nconst TotalStack = <T extends string>({\n  title,\n  data,\n  measure,\n  groupKey,\n  group,\n  groupToColour,\n  icon,\n}: {\n  title: string;\n  data: VideoGame[];\n  measure: Measure;\n  groupKey: keyof VideoGame;\n  group: T[];\n  groupToColour: (ele: T) => string;\n  icon: ReactNode;\n}) => {\n  const total = measure === \"Count\" ? data.length : data.sum(\"hours\");\n  let percentLeft = 100;\n\n  const totals = group\n    .map((e) => {\n      const count =\n        measure === \"Count\"\n          ? data.filter((vg) => vg[groupKey] === e).length\n          : data.filter((vg) => vg[groupKey] === e).sum(\"hours\");\n      const percent = Math.max((count / total) * 100, 0.5);\n      percentLeft -= percent;\n      return {\n        name: e,\n        count,\n        percent,\n        colour: groupToColour(e),\n      };\n    })\n    .filter((struct) => struct.count > 0);\n\n  totals[0].percent += percentLeft;\n\n  return (\n    <Card sx={{ height: \"100%\" }}>\n      <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n      <CardContent\n        sx={{\n          \":last-child\": { paddingBottom: 1 },\n          height: \"100%\",\n        }}\n      >\n        <Stack direction=\"row\" alignItems=\"center\" height={(theme) => theme.spacing(3)} spacing={0.5}>\n          {totals.map((struct) => (\n            <Segment key={struct.name} percent={struct.percent} backgroundColour={struct.colour} />\n          ))}\n        </Stack>\n        <Stack direction=\"row\" spacing={1} alignItems=\"center\">\n          {totals.map((struct) => (\n            <Stack key={struct.name} direction=\"column\" width=\"100%\">\n              <Segment percent={100} backgroundColour={struct.colour} spacing={1} />\n              <Typography variant=\"h6\">{struct.name}</Typography>\n              <Typography variant=\"body1\">{`${struct.count} ${measure === \"Count\" ? \"Games\" : \"Hours\"}`}</Typography>\n            </Stack>\n          ))}\n        </Stack>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst Totals = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const statusList: Status[] = [\"Beat\", \"Playing\", \"Endless\", \"Abandoned\"];\n  const companyList: Company[] = [\"Nintendo\", \"PlayStation\", \"PC\", \"iOS\", \"Xbox\"];\n  return (\n    <Grid xs={12} sm={12} md={8}>\n      <Stack justifyContent=\"space-between\" height=\"100%\" spacing={1}>\n        <TotalStack\n          title={\"Status\"}\n          icon={<TaskAlt />}\n          data={data}\n          measure={measure}\n          groupKey=\"status\"\n          group={statusList}\n          groupToColour={(ele: Status) => statusToColour({ status: ele })}\n        />\n        <TotalStack\n          title={\"Platforms\"}\n          icon={<VideogameAsset />}\n          data={data}\n          measure={measure}\n          groupKey=\"company\"\n          group={companyList}\n          groupToColour={(ele: Company) => companyToColor({ company: ele })}\n        />\n      </Stack>\n    </Grid>\n  );\n};\n\nconst AllTime = ({\n  data,\n  yearTo,\n  filterDispatch,\n}: {\n  data: VideoGame[];\n  yearTo: number;\n  filterDispatch: FilterDispatch;\n}) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n  const earliestYear = data.sortByKey(\"startDate\").at(-1)!.startDate.getFullYear();\n\n  const titleSelect = (\n    <FormControl variant=\"standard\" sx={{ minWidth: 120, margin: 0 }}>\n      <Select\n        SelectDisplayProps={{ style: { padding: 0 } }}\n        value={yearTo}\n        label=\"Age\"\n        displayEmpty\n        onChange={(event) =>\n          filterDispatch({ type: \"updateFilter\", filter: \"yearTo\", value: event.target.value as number })\n        }\n        renderValue={(value) => <Typography variant=\"h6\">{value == CURRENT_YEAR ? \"All Time\" : value}</Typography>}\n        slots={{ root: prepareForSlot(\"span\") }}\n      >\n        {Array.from({ length: CURRENT_YEAR - earliestYear + 1 }, (_, i) => CURRENT_YEAR - i).map((year) => (\n          <MenuItem key={year} value={year}>\n            {year}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n\n  return (\n    <StatCard\n      icon={<Timer />}\n      title={titleSelect}\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce<Record<string, [number, number]>>((tree, game) => {\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n    tree[year] ??= [0, 0];\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {});\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2));\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2));\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === \"Beat\" && game.hours && game.numDays);\n  const hours = Math.round(filtered.sum(\"hours\") / filtered.length);\n  const days = Math.round(filtered.sum(\"numDays\") / filtered.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Game Average\"\n      content={[\n        [\"Hours\", hours],\n        [\"Days To Beat\", days],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  return (\n    <StatCard\n      icon={<Update />}\n      title={`In ${CURRENT_YEAR}`}\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"endDate\")\n    .slice(0, 6);\n  return (\n    <VgStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      labelComponent={StatsCardLabelEndDateHours}\n    />\n  );\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"hours\")\n    .slice(0, 6);\n  return (\n    <VgStatList icon={<Whatshot />} title=\"Most Played\" content={most} labelComponent={StatsCardLabelEndDateHours} />\n  );\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sortByKey(\"startDate\");\n  if (recent.length == 0) return null;\n  return (\n    <VgStatList\n      icon={<PlayArrow />}\n      title=\"Currently Playing\"\n      content={recent}\n      labelComponent={StatsCardLabelStartDate}\n      width={[12, 12, 4]}\n      pictureWidth={[12, 4, 12]}\n    />\n  );\n};\n\nconst StatsCardLabelEndDateHours = (game: VideoGame) => [\n  [game.endDate?.toLocaleDateString() ?? \"\", `${format(game.hours!)} Hours`],\n];\n\nconst StatsCardLabelStartDate = (game: VideoGame) => [[game.startDate?.toLocaleDateString() ?? \"\"]];\n\nconst VgStatList = (\n  props: Omit<StatsListProps<VideoGame>, \"MediaComponent\" | \"aspectRatio\" | \"divider\" | \"chipComponent\" | \"landscape\">,\n) => (\n  <StatList\n    aspectRatio=\"16/9\"\n    divider\n    chipComponent={platformToShort}\n    landscape\n    MediaComponent={VgCardMediaImage}\n    {...props}\n  />\n);\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup, useTheme } from \"@mui/material\";\nimport { Dispatch, SetStateAction, useMemo, useState } from \"react\";\nimport Plot from \"../plotly\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, isVideoGame, Measure, VideoGame, VideoGameTree } from \"./types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n  colours: string[];\n}\n\nconst isStringArray = (x: unknown[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const theme = useTheme();\n  const controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][] = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\"),\n  ];\n  const { ids, labels, parents, values, colours }: SunburstData = useMemo(\n    () =>\n      dataToSunburstData(\n        data,\n        controlStates.map(([s]) => s),\n        measure,\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, measure, ...controlStates],\n  );\n\n  return (\n    <Card>\n      <CardHeader title=\"Sunburst\" action={<SunBurstControls controlStates={controlStates} />} />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\", maxHeight: \"100vw\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n              marker: { line: { color: theme.palette.background.paper }, colors: colours },\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            margin: { l: 0, r: 0, b: 0, t: 0 },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"name\",\n  \"platform\",\n  \"publisher\",\n  \"genre\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  controlStates,\n}: {\n  controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][];\n}) => {\n  return (\n    <FormGroup>\n      {controlStates.map(([val, setVal], index) => (\n        <SelectBox options={options} key={\"sunburst-control-\" + index} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      return !(measure === \"Hours\" && curr.hours === undefined);\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.name] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n  const colours: string[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string): [number, string] => {\n    let total = 0;\n    let colour = \"\";\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n          if (groups[0] === \"company\") {\n            colour = companyToColor(value);\n          }\n        } else {\n          [count, colour] = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        colours.push(colour);\n        total += count;\n      });\n\n    return [total, colour];\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n    colours,\n  };\n};\n\nexport default Sunburst;\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, Measure, VideoGame, VideoGameStringKeys } from \"./types\";\nimport Barchart, { Grouped } from \"../common/Barchart\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  name: false,\n  platform: true,\n  developer: false,\n  publisher: false,\n  rating: true,\n  status: true,\n  genre: true,\n};\n\nconst VgBarchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(false);\n  const [stack, setStack] = useState(true);\n\n  const grouped = groupDate(data, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (\n  data: VideoGame[],\n  group: VideoGameStringKeys | \"none\",\n  measure: Measure,\n  cumulative: boolean,\n): Grouped => {\n  return data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = cumulative ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] ??= { color: group === \"company\" ? companyToColor(game) : \"\", data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Grouped);\n};\n\nexport default VgBarchart;\n","import { CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst VgTimeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n  const gameData: [string, string, string, Date, Date][] = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.name, tooltip(row), row.startDate, row.endDate ?? CURRENT_DATE]);\n\n  return (\n    <Timeline data={gameData} showRowLabels={groupData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n<div style=\"display: flex; border: 1px solid black; background-color: ${companyToColor(row)}\" class=\"backgroundPaper\">\n  <div style=\"flex: 0.6; white-space:nowrap; padding: 10px; \"> \n    <b>${row.name}</b><br> \n    <hr />\n    Hours: ${row.hours}<br> \n    Period: ${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString() ?? \"present\"}<br> \n    Days: ${row.numDays ?? \"-\"}\n  </div>\n  ${\n    row.banner\n      ? `\n      <div style=\"flex: 1; min-width: 200px\">\n        <img src=\"${row.banner}\"\n        style=\"max-width: 100%; max-height: 200px;\"> \n      </div>\n   `\n      : ``\n  }\n</div>\n`;\n\nexport default VgTimeline;\n","import Stats from \"./Stats\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport Sunburst from \"./Sunburst\";\nimport Barchart from \"./Barchart\";\nimport Finished from \"../common/Finished\";\nimport Timeline from \"./Timeline\";\nimport { Stack, Typography } from \"@mui/material\";\nimport CardMediaImage from \"./CardMediaImage\";\nimport { FilterDispatch, FilterState } from \"./filterUtils\";\n\nconst Graphs = ({\n  vgData,\n  filterState,\n  filterDispatch,\n}: {\n  vgData: VideoGame[];\n  filterState: FilterState;\n  filterDispatch: FilterDispatch;\n}) =>\n  vgData.length > 0 ? (\n    <Stack spacing={2}>\n      <Stats data={vgData} yearTo={filterState.yearTo} measure={filterState.measure} filterDispatch={filterDispatch} />\n      <Timeline data={vgData} />\n      <Sunburst data={vgData} measure={filterState.measure} />\n      <Barchart data={vgData} measure={filterState.measure} />\n      <Finished MediaComponent={CardMediaImage} title=\"All Games\" data={vgData} width={4} colour={companyToColor} />\n    </Stack>\n  ) : (\n    <Typography variant=\"h1\" textAlign=\"center\">\n      No Data Found\n    </Typography>\n  );\n\nexport default Graphs;\n"],"names":["_excluded","prepareForSlot","Component","React.forwardRef","props","ref","other","_objectWithoutPropertiesLoose","React.createElement","_extends","TaskAlt","createSvgIcon","_jsx","VideogameAsset","Whatshot","VgCardMediaImage","item","jsx","CardMediaImage","colour","CardContent","theme","Grid","VgTimelineCard","DetailCard","_a","_b","_c","statusToColour","companyToColor","ratingToColour","startYear","days","dateDiffInDays","CURRENT_DATE","game","endDate","startPercent","gameLengthPercent","endPercent","TimelineCard","TimelineEmptySegment","TimelineActivatedSegment","jsxs","Fragment","Typography","Stats","data","measure","yearTo","filterDispatch","AllTime","ThisYearSoFar","Averages","AveragesPerGame","Totals","CurrentlyPlaying","MostPlayed","RecentlyComplete","Segment","percent","backgroundColour","spacing","Box","TotalStack","title","groupKey","group","groupToColour","icon","total","percentLeft","totals","e","count","vg","struct","Card","CardHeader","Stack","statusList","companyList","ele","filtered","time","games","earliestYear","titleSelect","FormControl","Select","event","value","CURRENT_YEAR","_","i","year","MenuItem","StatCard","Timer","grouped","tree","hours","ShowChart","AutoGraph","Update","recent","VgStatList","Pause","StatsCardLabelEndDateHours","most","PlayArrow","StatsCardLabelStartDate","format","StatList","platformToShort","isStringArray","x","Sunburst","useTheme","controlStates","useState","ids","labels","parents","values","colours","useMemo","dataToSunburstData","s","SunBurstControls","Plot","options","FormGroup","val","setVal","index","SelectBox","groups","keyToVal","key","curr","groupVals","obj","recurseGroup","parent","val2","isVideoGame","VgBarchart","setGroup","cumulative","setCumulative","stack","setStack","groupDate","Barchart","FormControlLabel","Switch","checked","groupVal","VgTimeline","groupData","setGroupData","groupFunc","company","gameData","exactDate","startDate","row","tooltip","Timeline","Graphs","vgData","filterState","Finished"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}