{"version":3,"file":"Graphs-0fc3507e.js","sources":["../../node_modules/@mui/icons-material/esm/Whatshot.js","../../src/vg/CardMediaImage.tsx","../../src/vg/Stats.tsx","../../src/vg/Sunburst.tsx","../../src/vg/Barchart.tsx","../../src/vg/Timeline.tsx","../../src/vg/Graphs.tsx"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"\n}), 'Whatshot');","import { CardContent, Typography } from \"@mui/material\";\nimport {\n  CardMediaImage,\n  DetailCard,\n  TimelineActivatedSegment,\n  TimelineCard,\n  TimelineEmptySegment,\n  TypedCardMediaImage,\n} from \"../common/Card\";\nimport { VideoGame, companyToColor, ratingToColour, statusToColour } from \"./types\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\nimport { CURRENT_DATE, dateDiffInDays } from \"../utils/dateUtils\";\n\nconst VgCardMediaImage: TypedCardMediaImage<VideoGame> = ({ item, ...props }) => (\n  <CardMediaImage\n    alt={item.name}\n    image={item.banner}\n    detailComponent={(colour) => (\n      <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n        <Grid container spacing={1}>\n          <VgTimelineCard colour={colour} item={item} />\n          <DetailCard\n            colour={colour}\n            label=\"Start Date\"\n            value={item.exactDate ? item.startDate.toLocaleDateString() : item.startDate?.getFullYear()}\n          />\n          <DetailCard\n            colour={colour}\n            label=\"End Date\"\n            value={item.exactDate ? item.endDate?.toLocaleDateString() : item.endDate?.getFullYear()}\n          />\n          <DetailCard colour={colour} label=\"Days To Beat\" value={item.exactDate ? item.numDays : undefined} />\n          <DetailCard colour={colour} label=\"Hours\" value={item.hours} />\n\n          <DetailCard colour={statusToColour(item)} label=\"Status\" value={item.status} />\n          <DetailCard colour={companyToColor(item)} label=\"Platform\" value={item.platform} />\n          <DetailCard colour={colour} label=\"Release Date\" value={item.releaseDate.toLocaleDateString()} />\n          <DetailCard colour={colour} label=\"Format\" value={item.format} />\n\n          <DetailCard colour={colour} label=\"Developer\" value={item.developer} />\n          <DetailCard colour={colour} label=\"Publisher\" value={item.publisher} />\n          <DetailCard colour={colour} label=\"Franchise\" value={item.franchise} />\n          <DetailCard colour={ratingToColour(item)} label=\"PEGI\" value={item.rating} />\n\n          <DetailCard colour={colour} label=\"Genre\" value={item.genre} />\n          <DetailCard large colour={colour} label=\"Themes\" value={item.theme.join(\" - \")} />\n        </Grid>\n      </CardContent>\n    )}\n    {...props}\n  />\n);\n\nconst startYear = new Date(2004, 0, 1);\nconst days = dateDiffInDays(startYear, CURRENT_DATE)!;\n\nconst VgTimelineCard = ({ colour, item: game }: { colour?: string; item: VideoGame }) => {\n  if (!game.startDate || game.startDate < startYear) return null;\n  const endDate = game.endDate\n    ? game.exactDate\n      ? game.endDate\n      : new Date(game.startDate.getFullYear(), game.startDate.getMonth() + 1, game.startDate.getDay())\n    : CURRENT_DATE;\n  const startDays = dateDiffInDays(startYear, game.startDate)!;\n  const startPercent = (startDays / days) * 100;\n  const gameLengthPercent = Math.max(((game.numDays ?? dateDiffInDays(game.startDate, endDate)!) / days) * 100, 0.5);\n  const endPercent = 100 - gameLengthPercent - startPercent;\n\n  return (\n    <TimelineCard\n      segments={[\n        <TimelineEmptySegment key={0} percent={startPercent} />,\n        <TimelineActivatedSegment\n          key={1}\n          percent={gameLengthPercent}\n          backgroundColour={[\"secondary.dark\", \"secondary.light\"]}\n          tooltip={\n            <>\n              {game.exactDate ? (\n                <>\n                  <Typography>\n                    Played {game.startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n                  </Typography>\n                  <Typography>{game.numDays} Days</Typography>\n                </>\n              ) : (\n                <Typography>Played in {game.startDate.getFullYear()}</Typography>\n              )}\n              <Typography>{game.hours} Hours</Typography>\n            </>\n          }\n        />,\n        <TimelineEmptySegment key={2} percent={endPercent} />,\n      ]}\n      colour={colour}\n    />\n  );\n};\n\nexport default VgCardMediaImage;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame, platformToShort } from \"./types\";\nimport { StatCard, StatList, StatsListProps } from \"../common/Stats\";\nimport VgCardMediaImage from \"./CardMediaImage\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce<Record<string, [number, number]>>((tree, game) => {\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n    tree[year] ??= [0, 0];\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {});\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2));\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2));\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === \"Beat\" && game.hours && game.numDays);\n  const hours = Math.round(filtered.sum(\"hours\") / filtered.length);\n  const days = Math.round(filtered.sum(\"numDays\") / filtered.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Game Average\"\n      content={[\n        [\"Hours\", hours],\n        [\"Days To Beat\", days],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  return (\n    <StatCard\n      icon={<Update />}\n      title={`In ${CURRENT_YEAR}`}\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"endDate\")\n    .slice(0, 6);\n  return (\n    <VgStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      labelComponent={StatsCardLabelEndDateHours}\n    />\n  );\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"hours\")\n    .slice(0, 6);\n  return (\n    <VgStatList icon={<Whatshot />} title=\"Most Played\" content={most} labelComponent={StatsCardLabelEndDateHours} />\n  );\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1));\n  return (\n    <VgStatList\n      icon={<PlayArrow />}\n      title=\"Currently Playing\"\n      content={recent}\n      labelComponent={StatsCardLabelStartDate}\n      width={[12, 12, 12]}\n      pictureWidth={[12, 4, 4]}\n    />\n  );\n};\n\nconst StatsCardLabelEndDateHours = (game: VideoGame) => [\n  [game.endDate?.toLocaleDateString() ?? \"\", `${format(game.hours!)} Hours`],\n];\n\nconst StatsCardLabelStartDate = (game: VideoGame) => [[game.startDate?.toLocaleDateString() ?? \"\"]];\n\nconst VgStatList = (\n  props: Omit<StatsListProps<VideoGame>, \"MediaComponent\" | \"aspectRatio\" | \"divider\" | \"chipComponent\" | \"landscape\">\n) => (\n  <StatList\n    aspectRatio=\"16/9\"\n    divider\n    chipComponent={platformToShort}\n    landscape\n    MediaComponent={VgCardMediaImage}\n    {...props}\n  />\n);\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup, useTheme } from \"@mui/material\";\nimport { Dispatch, SetStateAction, useMemo, useState } from \"react\";\nimport Plot from \"../plotly\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, isVideoGame, Measure, VideoGame, VideoGameTree } from \"./types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n  colours: string[];\n}\n\nconst isStringArray = (x: unknown[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const theme = useTheme();\n  const controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][] = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\"),\n  ];\n  const { ids, labels, parents, values, colours }: SunburstData = useMemo(\n    () =>\n      dataToSunburstData(\n        data,\n        controlStates.map(([s]) => s),\n        measure\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, measure, ...controlStates]\n  );\n\n  return (\n    <Card>\n      <CardHeader title=\"Sunburst\" action={<SunBurstControls controlStates={controlStates} />} />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\", maxHeight: \"100vw\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n              marker: { line: { color: theme.palette.background.paper }, colors: colours },\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            margin: { l: 0, r: 0, b: 0, t: 0 },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"name\",\n  \"platform\",\n  \"publisher\",\n  \"genre\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  controlStates,\n}: {\n  controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][];\n}) => {\n  return (\n    <FormGroup>\n      {controlStates.map(([val, setVal], index) => (\n        <SelectBox options={options} key={\"sunburst-control-\" + index} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      return !(measure === \"Hours\" && curr.hours === undefined);\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.name] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n  const colours: string[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string): [number, string] => {\n    let total = 0;\n    let colour = \"\";\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n          if (groups[0] === \"company\") {\n            colour = companyToColor(value);\n          }\n        } else {\n          [count, colour] = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        colours.push(colour);\n        total += count;\n      });\n\n    return [total, colour];\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n    colours,\n  };\n};\n\nexport default Sunburst;\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, Measure, VideoGame, VideoGameStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  name: false,\n  platform: true,\n  developer: false,\n  publisher: false,\n  rating: true,\n  status: true,\n  genre: true,\n};\n\nconst VgBarchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(false);\n  const [stack, setStack] = useState(true);\n\n  const grouped = groupDate(data, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nexport type Grouped = Record<\n  string,\n  {\n    color: string;\n    data: Record<string, number>;\n  }\n>;\n\nconst groupDate = (\n  data: VideoGame[],\n  group: VideoGameStringKeys | \"none\",\n  measure: Measure,\n  cumulative: boolean\n): Grouped => {\n  return data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = cumulative ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] ??= { color: group === \"company\" ? companyToColor(game) : \"\", data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Grouped);\n};\n\nexport default VgBarchart;\n","import { CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst VgTimeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n  const gameData: [string, string, string, Date, Date][] = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.name, tooltip(row), row.startDate!, row.endDate ?? CURRENT_DATE]);\n\n  return (\n    <Timeline data={gameData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: flex; background-color: ${companyToColor(row)}\" class=\"backgroundPaper\">\n      <div>\n        <ul style=\"list-style-type: none;padding-left: 5px\">\n          <li>\n            <span><b>${row.name}</b></span>\n          </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n          <li>\n            <span><b>Hours: </b></span>\n            <span\">${row.hours}</span>\n          </li>\n          <li>\n            <span><b>Period: </b></span>\n            <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString() ?? \"present\"} </span>\n          </li>\n          <li>\n            <span><b>Days: </b></span>\n            <span>${row.numDays ?? \"-\"}</span>\n          </li>\n        </ul>\n      </div>\n      ${row.banner ? `<img src=\"${row.banner}\" style=\"height: 150px\" /><hr />` : \"\"}\n    </div>\n  `;\n\nexport default VgTimeline;\n","import Stats from \"./Stats\";\nimport { Measure, VideoGame, companyToColor } from \"./types\";\nimport Sunburst from \"./Sunburst\";\nimport Barchart from \"./Barchart\";\nimport Finished from \"../common/Finished\";\nimport Timeline from \"./Timeline\";\nimport { Stack, Typography } from \"@mui/material\";\nimport CardMediaImage from \"./CardMediaImage\";\n\nconst Graphs = ({ vgData, measure }: { vgData: VideoGame[]; measure: Measure }) =>\n  vgData.length > 0 ? (\n    <Stack spacing={2}>\n      <Stats data={vgData} />\n      <Timeline data={vgData} />\n      <Sunburst data={vgData} measure={measure} />\n      <Barchart data={vgData} measure={measure} />\n      <Finished MediaComponent={CardMediaImage} title=\"All Games\" data={vgData} width={4} colour={companyToColor} />\n    </Stack>\n  ) : (\n    <Typography variant=\"h1\" textAlign=\"center\">\n      No Data Found\n    </Typography>\n  );\n\nexport default Graphs;\n"],"names":["Whatshot","createSvgIcon","_jsx","VgCardMediaImage","item","props","jsx","CardMediaImage","colour","CardContent","theme","Grid","VgTimelineCard","DetailCard","_a","_b","_c","statusToColour","companyToColor","ratingToColour","startYear","days","dateDiffInDays","CURRENT_DATE","game","endDate","startPercent","gameLengthPercent","endPercent","TimelineCard","TimelineEmptySegment","TimelineActivatedSegment","jsxs","Fragment","Typography","Stats","data","AllTime","ThisYearSoFar","Averages","AveragesPerGame","MostPlayed","RecentlyComplete","CurrentlyPlaying","filtered","time","games","StatCard","Timer","grouped","tree","year","hours","ShowChart","AutoGraph","CURRENT_YEAR","Update","recent","VgStatList","Pause","StatsCardLabelEndDateHours","most","b","PlayArrow","StatsCardLabelStartDate","format","StatList","platformToShort","isStringArray","x","i","Sunburst","measure","useTheme","controlStates","useState","ids","labels","parents","values","colours","useMemo","dataToSunburstData","s","Card","CardHeader","SunBurstControls","Plot","options","FormGroup","val","setVal","index","SelectBox","groups","keyToVal","key","curr","groupVals","group","obj","recurseGroup","parent","total","val2","value","count","isVideoGame","VgBarchart","setGroup","cumulative","setCumulative","stack","setStack","groupDate","Barchart","Stack","FormControlLabel","Switch","_","checked","groupVal","VgTimeline","groupData","setGroupData","groupFunc","company","gameData","exactDate","startDate","row","tooltip","Timeline","Graphs","vgData","Finished"],"mappings":"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","x_google_ignoreList":[0]}