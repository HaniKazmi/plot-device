{"version":3,"file":"Graphs-C7ZsfCaf.js","sources":["../../src/show/types.ts","../../src/show/Barchart.tsx","../../src/show/Sunburst.tsx","../../src/show/CardMediaImage.tsx","../../src/show/Stats.tsx","../../src/show/Timeline.tsx","../../src/show/Graphs.tsx"],"sourcesContent":["import { YearMonthDay } from \"../common/date\";\nimport { KeysMatching, statusToColour, type Colour } from \"../utils/types\";\n\nexport interface Show {\n  name: string;\n  status: Status;\n  startDate: YearMonthDay;\n  endDate?: YearMonthDay;\n  anime: boolean;\n  s: Season[];\n  e: number;\n  minutes: number;\n  banner?: string;\n}\n\nexport interface Season {\n  s: number;\n  e: number;\n  subtitle?: string;\n  startDate: YearMonthDay;\n  endDate?: YearMonthDay;\n  episodeLength: number;\n  minutes: number;\n  show: Show;\n}\n\nexport type Status = \"Watching\" | \"Up To Date\" | \"Ended\" | \"Cancelled\" | \"Abandoned\";\n\nexport type ShowKeys = keyof Show;\nexport type ShowStringKeys = KeysMatching<Show, string>;\n\nexport type Measure = \"Shows\" | \"Episodes\" | \"Hours\";\n\nexport const isShow = (arg: Show | Season): arg is Show => \"name\" in arg;\n\nexport const groupToColour = (group: keyof Show | \"none\" | \"show\", show: Show) => {\n  switch (group) {\n    case \"status\":\n      return statusToColour(show);\n    default:\n      return \"\" as Colour;\n  }\n};\n","import { useState } from \"react\";\nimport { SelectBox } from \"../common/SelectionComponents\";\nimport { groupToColour, type Measure, type Show, type ShowStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\n\nconst options: Record<ShowStringKeys | \"none\", boolean> = {\n  name: false,\n  status: true,\n  none: false,\n};\n\nconst ShowBarchart = ({ data, measure }: { data: Show[]; measure: Measure }) => {\n  const [group, setGroup] = useState<ShowStringKeys | \"none\">(\"none\");\n  const barchartData = (cumulative: boolean) =>\n    data\n      .flatMap((show) => show.s)\n      .map((season) => ({\n        date: cumulative ? season.startDate.toYearMonth() : season.startDate.toYear(),\n        colour: groupToColour(group, season.show),\n        name: group === \"none\" ? \"\" : season.show[group],\n        value: measure === \"Episodes\" ? season.e : season.minutes,\n      }));\n\n  return (\n    <Barchart\n      title={measure === \"Episodes\" ? \"Episodes Watched\" : \"Hours Watched\"}\n      data={barchartData}\n      dataPostProcess={\n        measure === \"Hours\" ? (data) => data.map((row) => row.map((el) => (el ? Math.floor(el / 60) : el))) : undefined\n      }\n      controls={\n        <SelectBox options={Object.keys(options) as (ShowStringKeys | \"none\")[]} value={group} setValue={setGroup} />\n      }\n    />\n  );\n};\n\nexport default ShowBarchart;\n","import { useState } from \"react\";\nimport type { Colour, KeysMatching } from \"../utils/types\";\nimport { groupToColour, type Measure, type Season, type Show } from \"./types\";\nimport Sunburst, { SunBurstControls } from \"../common/Sunburst\";\n\ntype OptionKeys = KeysMatching<Show, string | Show[\"startDate\"] | Show[\"anime\"]> | \"show\";\n\nconst VgSunburst = ({ data, measure }: { data: Show[]; measure: Measure }) => {\n  const [controlStates, setControlStates] = useState<OptionKeys[]>([\"status\", \"startDate\", \"show\"]);\n  const entries = dataToSunburstData(data.flatMap(show => show.s), controlStates, measure);\n\n  return (\n    <Sunburst data={entries} controls={<SunBurstControls options={options} controlStates={controlStates} setControlStates={setControlStates} />} />\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"name\",\n  \"status\",\n  \"startDate\",\n  \"show\",\n  \"anime\"\n];\n\ninterface ShowTree {\n  [key: string]: ShowTree | Season;\n}\n\nconst isShow = (arg: ShowTree | Season): arg is Season => !!arg.s;\n\nconst dataToSunburstData = (data: Season[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (show: Season, key: OptionKeys) => {\n    if (key == \"startDate\") {\n        return show.startDate.yearString();\n    }\n\n    if (key == \"show\") {\n        return show.show.name\n    }\n\n    if (key == \"anime\") {\n        return show.show.anime.toString()\n    }\n\n    return show.show[key]\n  };\n\n  const grouped = data\n    .filter((show) => measure !== \"Hours\" || show.minutes !== undefined)\n    .reduce((tree, show) => {\n      const groupVals = groups.map((group) => keyToVal(show, group));\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as ShowTree) || {}));\n      obj[`${show.show.name} - S${show.s}`] = show;\n      return tree;\n    }, {} as ShowTree);\n\n  const recurseGroup = (\n    tree: ShowTree,\n    parent: string,\n    initalEntries: {\n      id: string;\n      name: string;\n      parent: string;\n      value: number;\n      color: Colour | undefined;\n    }[],\n  ): {\n    total: number;\n    color: Colour | undefined;\n    entries: typeof initalEntries;\n  } => {\n    return Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .reduce(\n        (acc, [key, value]) => {\n          if (isShow(value)) {\n            const count = measure === \"Hours\" ? Math.floor(value.minutes! / 60) : value.e;\n            const color = groupToColour(groups[0], value.show) || undefined;\n            acc.total += count;\n            acc.color = color;\n            acc.entries.push({\n              name: key,\n              parent,\n              value: count,\n              id: `${parent}-${key}`,\n              color,\n            });\n          } else {\n            const { total, color } = recurseGroup(value, `${parent}-${key}`, acc.entries);\n            acc.total += total;\n            acc.color = color;\n            acc.entries.push({\n              name: key,\n              parent: parent,\n              value: total,\n              id: `${parent}-${key}`,\n              color: color,\n            });\n          }\n\n          return acc;\n        },\n        {\n          total: 0,\n          color: undefined as Colour | undefined,\n          entries: initalEntries,\n        },\n      );\n  };\n\n  const { entries } = recurseGroup(grouped, \"\", []);\n  return entries;\n};\n\nexport default VgSunburst;\n","import { CardContent, Typography } from \"@mui/material\";\nimport {\n  CardMediaImage,\n  DetailCard,\n  TimelineActivatedSegment,\n  TimelineCard,\n  TimelineEmptySegment,\n  TypedCardMediaImage,\n} from \"../common/Card\";\nimport { Season, Show, isShow } from \"./types\";\nimport Grid from \"@mui/material/Grid2\";\nimport { statusToColour } from \"../utils/types\";\nimport { CURRENT_PLAINDATE, YearMonthDay } from \"../common/date\";\n\nconst ShowCardMediaImage = <T extends Show | Season>({ item, ...props }: Parameters<TypedCardMediaImage<T>>[0]) => {\n  const show = isShow(item) ? item : item.show;\n  return (\n    <CardMediaImage\n      alt={show.name}\n      image={show.banner}\n      detailComponent={(colour) => (\n        <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n          <Grid container spacing={1}>\n            <ShowTimelineCard colour={colour} item={show} />\n            <DetailCard colour={colour} label=\"Start Date\" value={show.startDate.toString()} />\n            <DetailCard colour={colour} label=\"End Date\" value={show.endDate?.toString()} />\n            <DetailCard colour={statusToColour(show)} label=\"Status\" value={show.status} />\n            <DetailCard colour={colour} label=\"Last Watched\" value={`S${show.s.length}E${show.s.at(-1)!.e}`} />\n            <DetailCard colour={colour} label=\"Hours\" value={Math.floor(show.minutes / 60)} />\n            <DetailCard colour={colour} label=\"Episodes\" value={show.e} />\n          </Grid>\n        </CardContent>\n      )}\n      {...props}\n    />\n  );\n};\n\nconst startYear = YearMonthDay.get(2008, 1, 1);\nconst days = startYear.daysTo(CURRENT_PLAINDATE)!;\n\nconst ShowTimelineCard = ({ colour, item }: { colour?: string; item: Show }) => {\n  if (!item.startDate || item.startDate < startYear) return null;\n  let startDate = startYear;\n  const segments = item.s.flatMap((season, index) => {\n    const seasonSegments = [];\n\n    if (startDate < season.startDate) {\n      const daysToSeasonStart = startDate.daysTo(season.startDate)!;\n      const percentToSeasonStart = (daysToSeasonStart / days) * 100;\n      seasonSegments.push(<TimelineEmptySegment key={`${season.s}-before`} percent={percentToSeasonStart} />);\n    }\n\n    const endDate = season.endDate ?? CURRENT_PLAINDATE;\n    const seasonLengthPercent = Math.max((season.startDate.daysTo(endDate)! / days) * 100, 0.5);\n    seasonSegments.push(\n      <TimelineActivatedSegment\n        key={season.s}\n        percent={seasonLengthPercent}\n        backgroundColour={[\n          `${index % 2 === 0 ? \"secondary\" : \"primary\"}.light`,\n          `${index % 2 === 0 ? \"secondary\" : \"primary\"}.main`,\n        ]}\n        tooltip={\n          <>\n            <Typography variant=\"h6\" align=\"center\">\n              S{season.s}\n            </Typography>\n            <Typography>\n              {season.startDate.toString()} - {endDate.toString()}\n            </Typography>\n            <Typography>{season.e} Episodes</Typography>\n            <Typography>{Math.floor(season.minutes / 60)} Hours</Typography>\n          </>\n        }\n      />,\n    );\n\n    startDate = endDate.increment();\n    return seasonSegments;\n  });\n\n  if (startDate < CURRENT_PLAINDATE) {\n    const daysToEnd = startDate.daysTo(CURRENT_PLAINDATE)!;\n    const percentToEnd = (daysToEnd / days) * 100;\n    segments.push(<TimelineEmptySegment key={\"last\"} percent={percentToEnd} />);\n  }\n\n  return <TimelineCard segments={segments} colour={colour} />;\n};\n\nexport default ShowCardMediaImage;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, TaskAlt, Timer, Update } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { Season, Show, Status } from \"./types\";\nimport { StatCard, StatList, StatsListProps, TotalStack } from \"../common/Stats\";\nimport ShowCardMediaImage from \"./CardMediaImage\";\nimport { statusToColour } from \"../utils/types\";\nimport { Stack } from \"@mui/material\";\nimport { CURRENT_YEAR, YearNumber } from \"../common/date\";\n\nconst Stats = ({ data }: { data: Show[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerShow data={data} />\n      <Totals data={data} />\n      <CurrentlyPlaying data={data} />\n      <RecentlyComplete data={data} />\n    </Grid>\n  );\n};\n\nconst Totals = ({ data }: { data: Show[] }) => {\n  const statusList: Status[] = [\"Watching\", \"Up To Date\", \"Ended\", \"Cancelled\", \"Abandoned\"];\n  return (\n    <Grid size={12}>\n      <Stack justifyContent=\"space-between\" height=\"100%\" spacing={1}>\n        <TotalStack\n          title={\"Status\"}\n          icon={<TaskAlt />}\n          data={data}\n          groupKey=\"status\"\n          group={statusList}\n          groupToColour={(ele: Status) => statusToColour({ status: ele })}\n          measureLabel=\"Shows\"\n        />\n      </Stack>\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: Show[] }) => {\n  const totalShows = data.length;\n  const totalEpisodes = data.sum(\"e\");\n  const totalTime = Math.floor(data.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Shows\", totalShows],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s).filter((s) => s.startDate.year === CURRENT_YEAR);\n  const totalSeasons = filtered.length;\n  const totalEpisodes = filtered.sum(\"e\");\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Update />}\n      title={`In ${CURRENT_YEAR}`}\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: Show[] }) => {\n  const grouped = data\n    .flatMap((show) => show.s)\n    .reduce(\n      (tree, s) => {\n        if (!s.minutes) return tree;\n        const year = s.startDate.year;\n        tree[year] ??= { seasons: 0, episodes: 0, minutes: 0 };\n        tree[year].seasons += 1;\n        tree[year].episodes += s.e;\n        tree[year].minutes += s.minutes;\n        return tree;\n      },\n      {} as Record<YearNumber, { seasons: number; episodes: number; minutes: number }>,\n    );\n\n  const seasons = Math.floor(Object.values(grouped).sum(\"seasons\") / Object.keys(grouped).length);\n  const episodes = Math.floor(Object.values(grouped).sum(\"episodes\") / Object.keys(grouped).length);\n  const hours = Math.floor(Object.values(grouped).sum(\"minutes\") / Object.keys(grouped).length / 60);\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Seasons\", seasons],\n        [\"Episodes\", episodes],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerShow = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s);\n  const totalSeasons = Math.round(filtered.length / data.length);\n  const totalEpisodes = Math.round(filtered.sum(\"e\") / data.length);\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60 / data.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Show Average\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .flatMap((show) => show.s)\n    .filter((season) => season.endDate)\n    .sort((seasonA, seasonB) => (seasonA.endDate! < seasonB.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return (\n    <ShowStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      chipComponent={({ show }) => [show.status, statusToColour(show)]}\n      labelComponent={statsCardLabelRecentlyComplete}\n    />\n  );\n};\n\nconst statsCardLabelRecentlyComplete = (season: Season) => [\n  [`S ${season.s}`, season.endDate?.toString() ?? \"\"],\n  [`${season.e} Eps`, `${format(Math.round(season.minutes / 60))} Hours`],\n];\n\nconst CurrentlyPlaying = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .filter((show) => show.status === \"Watching\")\n    .map((show) => show.s.at(-1)!)\n    .filter((season) => !season.endDate)\n    .sort((seasonA, seasonB) => (seasonA.startDate < seasonB.startDate ? 1 : -1));\n  return (\n    <ShowStatList\n      icon={<PlayArrow />}\n      title=\"Currently Watching\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      labelComponent={statsCardLabelCurrentlyPlaying}\n    />\n  );\n};\n\nconst statsCardLabelCurrentlyPlaying = (season: Season) => [[`S ${season.s}`, season.startDate?.toString() ?? \"\"]];\n\nconst ShowStatList = (props: Omit<StatsListProps<Season>, \"MediaComponent\" | \"nameComponent\">) => (\n  <StatList MediaComponent={ShowCardMediaImage} nameComponent={(entry) => entry.show.name} {...props} />\n);\n\nexport default Stats;\n","import { CardHeader, FormGroup, FormControlLabel, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Season, Show } from \"./types\";\nimport Timeline, { TimelineData } from \"../common/Timeline\";\nimport { Colour, statusToColour } from \"../utils/types\";\nimport { CURRENT_PLAINDATE } from \"../common/date\";\n\nconst ShowTimeline = ({ data }: { data: Show[] }) => {\n  const [groupData, setGroupData] = useState(true);\n\n  const titleData: [string, Show | Season, Colour, string?][] = groupData\n    ? data.map((show) => [show.name, show, statusToColour(show), show.banner])\n    : data.flatMap((show) =>\n        show.s.map(\n          (s) =>\n            [`${show.name} - S${s.s}${s.subtitle ? \" - \" + s.subtitle : \"\"}`, s, statusToColour(show), show.banner] as [\n              string,\n              Season,\n              Colour,\n              string?,\n            ],\n        ),\n      );\n\n  const showData: TimelineData[] = titleData.map(([title, s, colour, banner]) => ({\n    row: \"*\",\n    name: title,\n    tooltip: tooltip(title, s, banner),\n    colour: colour,\n    start: s.startDate.toDate(),\n    end: s.endDate?.toDate() ?? CURRENT_PLAINDATE.toDate(),\n  }));\n\n  return (\n    <Timeline data={showData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Combine Seasons\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (title: string, row: Show | Season, banner?: string) =>\n  `\n  <div style=\"display: flex;\" class=\"backgroundPaper\">\n    ${banner ? `<img src=\"${banner}\" style=\"height: 150px\" /><hr />` : \"\"}  \n    <div>     \n      <ul style=\"list-style-type: none;padding: 5px\">\n        <li>\n          <span><b>${title}</b></span>\n        </li>\n      </ul>\n      <hr />\n      <ul style=\"list-style-type: none;padding-left: 10px\">\n        <li>\n          <span><b>Hours: </b></span>\n          <span\">${Math.round(row.minutes / 60)}</span>\n        </li>\n        <li>\n          <span><b>Period: </b></span>\n          <span>${row.startDate.toString()} - ${row.endDate?.toString() || \"present\"} </span>\n        </li>\n        <li>\n          <span><b>Episodes: </b></span>\n          <span>${row.e}</span>\n        </li>\n      </ul>\n    </div>     \n  </div>\n  `;\n\nexport default ShowTimeline;\n","import { Fab, Stack } from \"@mui/material\";\nimport Finished from \"../common/Finished\";\nimport Barchart from \"./Barchart\";\nimport Sunburst from \"./Sunburst\";\nimport Stats from \"./Stats\";\nimport Timeline from \"./Timeline\";\nimport { Show } from \"./types\";\nimport ShowCardMediaImage from \"./CardMediaImage\";\nimport { statusToColour } from \"../utils/types\";\nimport type { FilterDispatch, FilterState } from \"./filterUtils\";\nimport { Functions, Timer } from \"@mui/icons-material\";\n\nconst Graphs = ({ data, filterState, filterDispatch }: { data: Show[], filterState: FilterState, filterDispatch: FilterDispatch }) => (\n  <>\n    <Stack spacing={2}>\n      <Stats data={data} />\n      <Timeline data={data} />\n      <Barchart data={data} measure={filterState.measure} />\n      <Sunburst data={data} measure={filterState.measure} />\n      <Finished title=\"All Shows\" data={data} width={3} colour={statusToColour} MediaComponent={ShowCardMediaImage} />\n    </Stack>\n    <Stack\n      direction=\"column\"\n      spacing={2}\n      sx={{ position: \"fixed\", right: (theme) => theme.spacing(2), bottom: (theme) => theme.spacing(2) }}\n    >\n      <Fab color=\"secondary\" onClick={() => filterDispatch({ type: \"toggleMeasure\" })}>\n        {filterState.measure === \"Episodes\" ? <Functions /> : <Timer />}\n      </Fab>\n    </Stack>\n  </>\n);\n\nexport default Graphs;\n"],"names":["isShow","arg","groupToColour","group","show","statusToColour","options","name","status","none","ShowBarchart","t0","$","_c","data","measure","setGroup","useState","t1","flatMap","_temp","map","season","date","cumulative","startDate","toYearMonth","toYear","colour","value","e","minutes","barchartData","t2","t3","_temp4","undefined","t4","Symbol","for","Object","keys","t5","SelectBox","t6","jsx","Barchart","s","_temp2","el","Math","floor","_temp3","row","data_0","VgSunburst","controlStates","setControlStates","dataToSunburstData","entries","SunBurstControls","Sunburst","groups","keyToVal","key","yearString","anime","toString","grouped","filter","reduce","tree","groupVals","obj","forEach","val","recurseGroup","parent","initalEntries","sort","val2","localeCompare","acc","count","color","total","push","id","ShowCardMediaImage","item","props","CardContent","background","theme","palette","getContrastText","jsxs","Grid","ShowTimelineCard","DetailCard","endDate","length","at","banner","CardMediaImage","startYear","YearMonthDay","get","days","daysTo","CURRENT_PLAINDATE","segments","index","seasonSegments","percentToSeasonStart","TimelineEmptySegment","seasonLengthPercent","max","TimelineActivatedSegment","Fragment","Typography","increment","percentToEnd","TimelineCard","Stats","AllTime","ThisYearSoFar","Averages","AveragesPerShow","Totals","CurrentlyPlaying","RecentlyComplete","statusList","TaskAlt","Stack","TotalStack","totalShows","sum","totalEpisodes","totalTime","Timer","StatCard","filtered","year","CURRENT_YEAR","totalSeasons","Update","seasons","episodes","values","hours","ShowChart","round","AutoGraph","_temp5","_temp6","_temp7","slice","recent","Pause","ShowStatList","_temp8","statsCardLabelRecentlyComplete","format","_temp9","_temp10","_temp11","_temp12","PlayArrow","statsCardLabelCurrentlyPlaying","StatList","entry","ele","seasonA","seasonB","show_0","ShowTimeline","groupData","setGroupData","titleData","showData","_","checked","CardHeader","FormGroup","FormControlLabel","Switch","Timeline","tooltip","title","subtitle","s_0","start","toDate","end","Graphs","filterState","filterDispatch","Finished","position","right","spacing","bottom","Fab","type","Functions"],"mappings":"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"}