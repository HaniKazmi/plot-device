{"version":3,"sources":["serviceWorker.ts","vg/CheckBox.tsx","vg/Sunburst.tsx","vg/Types.ts","vg/Timeline.tsx","vg/Google.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","CheckBox","label","value","setValue","name","type","checked","onChange","SunBurstControls","data","setSunburstData","useState","group1","setGroup1","group2","setGroup2","group3","setGroup3","valueProp","setValueProp","filterPokemon","setFilterPokemon","filterUnconfirmed","setFilterUnconfirmed","sunburstData","useMemo","dataToSunburstData","useEffect","options","SelectBox","event","target","map","option","defaultChecked","currentTarget","groups","countProp","grouped","filter","curr","undefined","hours","franchise","platform","startDate","getFullYear","reduce","tree","game","groupVals","group","key","val","toString","keyToVal","includes","obj","forEach","ids","labels","parents","values","recurseGroup","parent","total","Object","entries","sort","val2","localeCompare","count","parseInt","push","Sunburst","style","width","height","branchvalues","maxdepth","config","displayModeBar","responsive","layout","margin","l","r","b","t","tooltip","row","toLocaleDateString","endDate","date_diff_in_days","dt1","dt2","Math","floor","Date","UTC","getMonth","getDate","Timeline","groupData","setGroupData","filterEndless","setFilterEndless","groupFunc","company","filterEndlessFunc","status","gameData","exactDate","overflow","overflowY","chartType","id","role","concat","DISCOVERY_DOCS","GoogleAuth","children","isSignedIn","setIsSignedIn","loadGapi","marginLeft","onClick","handleAuthClick","script","document","createElement","src","onload","console","log","gapi","load","client","init","clientId","process","apiKey","discoveryDocs","scope","then","authInstance","auth2","getAuthInstance","listen","get","body","appendChild","signOut","signIn","GamesGraphs","setData","getVgData","vgData","length","setFullYear","split","genre","theme","format","publisher","rating","arrayToJson","header","json","index","sheets","spreadsheets","spreadsheetId","range","response","result","VideoSheet","ReactDOM","render","StrictMode","Google","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b79b6150.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CheckBox = ({ label, value, setValue }:\n                           { label: string, value: boolean, setValue: (func: boolean) => void }) => (\n  <label>\n    {label}:\n    <input\n      name={label}\n      type=\"checkbox\"\n      checked={value}\n      onChange={() => setValue(!value)}\n    />\n  </label>\n);","import { useEffect, useMemo, useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { CheckBox } from \"./CheckBox\";\nimport { isVideoGame, VideoGame, VideoGameKeys, VideoGameTree } from \"./Types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n}\n\ntype SunBurstValue = \"Hours\" | \"Count\";\n\nconst Sunburst = ({ data }: { data: VideoGame[] }) => {\n  const [{ ids, labels, parents, values }, setSunburstData] = useState<SunburstData>({\n    ids: [],\n    labels: [],\n    parents: [],\n    values: []\n  });\n\n  return (\n    <div>\n      <SunBurstControls data={data} setSunburstData={setSunburstData} />\n      <Plot\n        style={{ width: \"100vw\", height: \"95vh\" }}\n        data={[\n          {\n            labels, parents, values, ids,\n            type: \"sunburst\",\n            branchvalues: \"total\",\n            //@ts-ignore\n            maxdepth: 3,\n            sort: false\n          }\n        ]}\n        config={{ displayModeBar: false, responsive: true }}\n        layout={{ margin: { l: 0, r: 0, b: 0, t: 0 } }}\n      />\n    </div>\n  );\n};\n\nconst SunBurstControls = ({ data, setSunburstData }:\n                            { data: VideoGame[], setSunburstData: (d: SunburstData) => void }) => {\n  const [group1, setGroup1] = useState<VideoGameKeys>(\"company\");\n  const [group2, setGroup2] = useState<VideoGameKeys>(\"platform\");\n  const [group3, setGroup3] = useState<VideoGameKeys>(\"franchise\");\n\n  const [valueProp, setValueProp] = useState<SunBurstValue>(\"Count\");\n  const [filterPokemon, setFilterPokemon] = useState(false);\n  const [filterUnconfirmed, setFilterUnconfirmed] = useState(false);\n\n  const sunburstData = useMemo(() => dataToSunburstData(data, [group1, group2, group3], valueProp, filterUnconfirmed, filterPokemon),\n    [data, group1, group2, group3, valueProp, filterUnconfirmed, filterPokemon]);\n\n  useEffect(() => setSunburstData(sunburstData), [sunburstData, setSunburstData]);\n\n  const options: VideoGameKeys[] = [\n    \"company\",\n    \"format\",\n    \"franchise\",\n    \"game\",\n    \"platform\",\n    \"publisher\",\n    \"rating\",\n    \"status\",\n    \"startDate\"\n  ];\n\n  const SelectBox = ({ value, setValue }: { value: VideoGameKeys, setValue: (func: VideoGameKeys) => void }) => (\n    <select value={value} onChange={(event) => setValue(event.target.value as VideoGameKeys)}>\n      {options.map((option) => (\n        <option key={option} value={option}>\n          {option}\n        </option>\n      ))}\n    </select>\n  );\n\n  return (\n    <div>\n      <SelectBox value={group1} setValue={setGroup1} />\n      <SelectBox value={group2} setValue={setGroup2} />\n      <SelectBox value={group3} setValue={setGroup3} />\n      <br />\n      <CheckBox label=\"Filter Pokemon\" value={filterPokemon} setValue={setFilterPokemon} />\n      <CheckBox label=\"Filter Unconfirmed\" value={filterUnconfirmed} setValue={setFilterUnconfirmed} />\n\n      <div>\n        <input\n          type=\"radio\"\n          value=\"Count\"\n          name=\"count\"\n          defaultChecked={true}\n          onChange={(event) => setValueProp(event.currentTarget.value as any)}\n        />\n        Count\n        <input\n          type=\"radio\"\n          value=\"Hours\"\n          name=\"count\"\n          onChange={(event) => setValueProp(event.currentTarget.value as any)}\n        />\n        Hours\n      </div>\n    </div>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: (VideoGameKeys)[],\n                            countProp: SunBurstValue, filterUnconfirmed: boolean, filterPokemon: boolean) => {\n  const keyToVal = (game: VideoGame, key: VideoGameKeys) => {\n    const val = game[key];\n    if (key === \"startDate\" && val) {\n      return (val as Date).getFullYear().toString();\n    }\n    return val as string;\n  };\n\n  const grouped = data\n    .filter(curr => {\n      if (countProp === \"Hours\" && curr.hours === undefined) return false;\n      if (filterPokemon && curr.franchise === \"Pokémon\") return false;\n\n      if (filterUnconfirmed) {\n        if (curr.platform === \"PC\") {\n          if (!curr.startDate?.getFullYear() || curr.startDate?.getFullYear() < 2015) return false;\n        } else if (\n          curr.platform !== \"Nintendo Switch\" &&\n          curr.platform !== \"Nintendo 3DS\" &&\n          curr.platform !== \"PlayStation 4\" &&\n          curr.platform !== \"PlayStation 5\"\n        ) return false;\n      }\n\n      return true;\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map(group => keyToVal(game, group));\n      if ((groupVals as any[]).includes(undefined)) return tree;\n      let obj = tree;\n      groupVals.forEach(val => obj = obj[val] = obj[val] as VideoGameTree || {});\n      obj[game.game] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string) => {\n    let total = 0;\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = countProp === \"Hours\" ? parseInt(value.hours!) : 1;\n        } else {\n          count = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        total += count;\n      });\n\n    return total;\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels, parents, values, ids\n  };\n};\n\nexport default Sunburst;\n","export interface VideoGame {\n  game: string;\n  platform: Platform;\n  company: Company;\n  publisher: string;\n  franchise: string;\n  genre: string[];\n  theme: string[];\n  rating: string;\n  format: Format;\n  status: Status;\n  exactDate: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  hours?: string;\n}\n\nexport type VideoGameKeys = keyof VideoGame;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | 'Xbox'\nexport type Platform = `${Company}${string}`\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.game;\n","import { useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { CheckBox } from \"./CheckBox\";\nimport { VideoGame } from \"./Types\";\n\nconst Timeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n  const [filterEndless, setFilterEndless] = useState(false);\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n  const filterEndlessFunc = filterEndless ? ({ status }: VideoGame) => status !== \"Endless\" : () => true;\n\n  const timelineData: any[] = [\n    [\n      { type: \"string\", id: \"Company\" },\n      { type: \"string\", id: \"Game\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" }\n    ]\n  ];\n\n  const gameData = data\n    .filter(({ exactDate }) => exactDate)\n    .filter(filterEndlessFunc)\n    .filter(({ startDate }) => startDate?.getFullYear()! > 2014)\n    .map((row) => [groupFunc(row), row.game, tooltip(row), row.startDate, row.endDate]);\n\n  return (\n    <div>\n      <CheckBox label=\"Group Data\" value={groupData} setValue={setGroupData} />\n      <CheckBox label=\"Filter Endless\" value={filterEndless} setValue={setFilterEndless} />\n      <br />\n      <div style={{ overflow: \"auto\", overflowY: \"clip\" }}>\n        <Chart style={{ width: \"400vw\", height: \"65vh\" }} chartType=\"Timeline\" data={timelineData.concat(gameData)} />\n      </div>\n    </div>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: inline-block\">\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${row.game}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${row.hours}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Num Days: </b></span>\n                <span>${date_diff_in_days(row.startDate!, row.endDate!)}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nconst date_diff_in_days = (dt1: Date, dt2: Date) =>\n  Math.floor(\n    (Date.UTC(dt2.getFullYear(), dt2.getMonth(), dt2.getDate()) -\n      Date.UTC(dt1.getFullYear(), dt1.getMonth(), dt1.getDate())) /\n    (1000 * 60 * 60 * 24) + 1\n  );\n\nexport default Timeline;\n","import { useState, useEffect, FunctionComponent, Fragment } from \"react\";\nimport PieChart from \"./Sunburst\";\nimport Timeline from \"./Timeline\";\nimport { VideoGame, Status, Format, Platform, Company } from \"./Types\";\n\nconst CLIENT_ID = process.env.REACT_APP_GOOGLE_CLIENT_ID;\nconst API_KEY = process.env.REACT_APP_GOOGLE_API_KEY;\nconst DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\nconst SCOPE = \"https://www.googleapis.com/auth/spreadsheets.readonly\";\n\nconst GoogleAuth: FunctionComponent = ({ children }) => {\n  const [isSignedIn, setIsSignedIn] = useState<boolean>();\n\n  useEffect(() => loadGapi(setIsSignedIn), []);\n\n  const renderAuthButton = () => {\n    if (isSignedIn === undefined) {\n      return <div>I don't know if we are signed in</div>;\n    } else if (isSignedIn) {\n      return (\n        <span>\n          I am signed in\n          <button id=\"sign-in-or-out-button\" style={{ marginLeft: 25 }} onClick={handleAuthClick}>\n            Sign Out\n          </button>\n        </span>\n      );\n    } else {\n      return (\n        <span>\n          I am not signed in\n          <button id=\"sign-in-or-out-button\" style={{ marginLeft: 25 }} onClick={handleAuthClick}>\n            Sign In\n          </button>\n        </span>\n      );\n    }\n  };\n\n  return (\n    <div>\n      {renderAuthButton()}\n      {isSignedIn && children}\n    </div>\n  );\n};\n\nconst loadGapi = (setIsSignedIn: (b: boolean) => void) => {\n  const script = document.createElement(\"script\");\n  script.src = \"https://apis.google.com/js/client.js\";\n\n  script.onload = () => {\n    console.log(\"loading\");\n    gapi.load(\"client:auth2\", () => {\n      gapi.client\n        .init({\n          clientId: CLIENT_ID,\n          apiKey: API_KEY,\n          discoveryDocs: DISCOVERY_DOCS,\n          scope: SCOPE\n        })\n        .then(() => {\n          const authInstance = gapi.auth2.getAuthInstance();\n          authInstance.isSignedIn.listen(setIsSignedIn);\n          setIsSignedIn(authInstance.isSignedIn.get());\n        });\n    });\n  };\n\n  document.body.appendChild(script);\n};\n\nconst handleAuthClick = () => {\n  const authInstance = gapi.auth2.getAuthInstance();\n  if (authInstance.isSignedIn.get()) {\n    authInstance.signOut();\n  } else {\n    authInstance.signIn();\n  }\n};\n\nconst VideoSheet = () => (\n  <GoogleAuth>\n    <GamesGraphs />\n  </GoogleAuth>\n);\n\nconst GamesGraphs = () => {\n  const [data, setData] = useState<Record<string, string>[]>();\n  useEffect(() => getVgData(setData), []);\n\n  if (!data) {\n    console.log(\"no data\");\n    return <div />;\n  }\n\n  const vgData: VideoGame[] = data.map(row => {\n    const endDate = row[\"End Date\"] ? new Date(row[\"End Date\"]) : undefined;\n    endDate && row[\"End Date\"].length < 5 && endDate.setFullYear(endDate.getFullYear() + 1);\n    return {\n      game: row[\"Game\"],\n      platform: row[\"Platform\"] as Platform,\n      company: row[\"Platform\"].split(\" \")[0]! as Company,\n      franchise: row[\"Franchise\"],\n      genre: row[\"Genre\"].split(\"\\n\"),\n      theme: row[\"Theme\"].split(\"\\n\"),\n      format: row[\"Format\"] as Format,\n      publisher: row[\"Publisher\"],\n      rating: row[\"Rating\"],\n      status: row[\"Status\"] as Status,\n      exactDate: !!(row[\"Start Date\"] && row[\"Start Date\"].length > 5),\n      startDate: row[\"Start Date\"] ? new Date(row[\"Start Date\"]) : undefined,\n      endDate: endDate || new Date(),\n      hours: row[\"Hours\"]\n    };\n  });\n  return (\n    <Fragment>\n      <Timeline data={vgData} />\n      <PieChart data={vgData} />\n    </Fragment>\n  );\n};\n\nconst arrayToJson = (data: string[][]) => {\n  const [header, ...rows] = data;\n  return rows.map(row => {\n    const json: Record<string, string> = {};\n    row.forEach((val, index) => json[header[index]] = val);\n    return json;\n  });\n};\n\nconst getVgData = (setData: (b: Record<string, string>[]) => void) => {\n  console.log(\"fetching data\");\n  gapi.client.sheets.spreadsheets.values\n    .get({\n      spreadsheetId: \"1JCAN_lB2QaVxj1rD4f88mN4tHjmhxF3CZlGtZGwYCLk\",\n      range: \"Games List!A:Z\"\n    })\n    .then(response => response.result.values!)\n    .then(arrayToJson)\n    .then(setData);\n};\n\nexport default VideoSheet;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// eslint-disable-next-line\nimport App from './finance/App';\nimport * as serviceWorker from './serviceWorker';\nimport Google from './vg/Google';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Google />\n    {/*<App />*/}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}