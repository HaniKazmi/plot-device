{"version":3,"file":"static/js/618.d9f61e4d.chunk.js","mappings":"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","sources":["dateUtils.ts","mathUtils.ts","vg/Stats.tsx","plotly.tsx","vg/SelectionComponents.tsx","vg/Barchart.tsx","vg/Timeline.tsx","vg/Filter.tsx","vg/Sunburst.tsx","vg/types.ts","vg/vg.tsx"],"sourcesContent":["export const CURRENT_DATE = new Date();\nexport const CURRENT_MONTH = CURRENT_DATE.getMonth();\nexport const CURRENT_YEAR = CURRENT_DATE.getFullYear();\n\nexport const dateDiffInDays = (dt1?: Date, dt2?: Date) => {\n    if (!dt1 || !dt2) return;\n    return Math.floor(\n        (dt2.getTime() - dt1.getTime()) /\n        (1000 * 60 * 60 * 24) + 1\n    );\n};","export const format = new Intl.NumberFormat().format;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, SkipNext, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Stack,\n  CardMedia,\n} from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Fragment } from \"react\";\nimport { CURRENT_YEAR } from \"../dateUtils\";\nimport { format } from \"../mathUtils\";\nimport { VideoGame } from \"./types\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum('hours');\n  const games = filtered.length;\n  return <StatCard icon={<Timer />} title=\"All Time\" content={[[\"Games\", games], [\"Hours\", time]]} />;\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce((tree, game) => {\n    let year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    if (!tree[year]) {\n      tree[year] = [0, 0]\n    }\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {} as Record<string, [number, number]>);\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2))\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2))\n\n  return <StatCard icon={<ShowChart />} title=\"Averages Per Year\" content={[[\"Games\", games], [\"Hours\", hours]]} />;\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === 'Beat' && game.hours && game.numDays)\n  const hours = Math.round(filtered.sum('hours') / filtered.length)\n  const days = Math.round(filtered.sum('numDays') / filtered.length)\n\n  return <StatCard icon={<AutoGraph />} title=\"Averages Per Game\" content={[[\"Hours\", hours], [\"Days To Beat\", days]]} />;\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum('hours');\n  const games = filtered.length;\n\n  return <StatCard icon={<Update />} title=\"This Year So Far\" content={[[\"Games\", games], [\"Hours\", time]]} />;\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.endDate! < b.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Pause />} title=\"Recently Finished\" content={recent} />;\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.hours! < b.hours! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Whatshot />} title=\"Most Played\" content={most} />;\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1))[0];\n  const next = data.filter((a) => a.status === \"Next\").sort((a, b) => (a.releaseDate > b.releaseDate ? 1 : -1))[0];\n  return (\n    <Grid xs={12} md={4}>\n      <Stack direction=\"column\" spacing={1} /* sx={{ height: \"100%\" }} */ >\n        {recent && <Card sx={{ flex: \"0 1 auto\" }}>\n          <CardHeader\n            titleTypographyProps={{ variant: \"h6\" }}\n            title=\"Currently Playing\"\n            subheader={`Started ${recent.startDate?.toLocaleDateString()}`}\n            avatar={<PlayArrow />}\n          />\n          <CardMedia component=\"img\" src={recent.banner} />\n        </Card>\n        }\n        {next &&\n          <Card sx={{ flex: \"1 1 auto\" }}>\n            <CardHeader\n              titleTypographyProps={{ variant: \"h6\" }}\n              title=\"Next Up\"\n              subheader={`Releases ${next.releaseDate.toLocaleDateString()}`}\n              avatar={<SkipNext />}\n            />\n            <CardMedia component=\"img\" src={next.banner} />\n          </Card>\n        }\n      </Stack>\n    </Grid>\n  );\n};\n\nconst StatList = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: VideoGame[];\n}) => {\n  return (\n    <Grid xs={6} md={4}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <List>\n            {content.map((game) => (\n              <Fragment key={game.game}>\n                <Divider variant=\"middle\" component=\"li\" />\n                <ListItem>\n                  <ListItemText\n                    secondaryTypographyProps={{ component: \"span\" }}\n                    primary={game.game}\n                    secondary={\n                      <Stack direction={{ xs: \"column\", md: \"row\" }} justifyContent=\"space-between\">\n                        <Typography>{game.endDate?.toLocaleDateString()}</Typography>\n                        <Typography>{`${format(game.hours!)} Hours`}</Typography>\n                      </Stack>\n                    }\n                  />\n                </ListItem>\n              </Fragment>\n            ))}\n            <Divider variant=\"middle\" component=\"li\" />\n          </List>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string | [string, number][]\n}) => {\n  const formattedContent = typeof content === 'string' ?\n    <Typography align=\"right\" variant=\"h4\">\n      {content}\n    </Typography>\n    : <Stack\n      divider={<Divider orientation=\"vertical\" flexItem />}\n      justifyContent=\"space-evenly\" direction={\"row\"}>{content.map(([key, val]) => (\n        <Stack key={val} direction={\"column\"}>\n          <Typography align=\"center\" variant=\"h5\">\n            {format(val)}\n          </Typography>\n          <Typography align=\"center\" sx={{ fontSize: 14 }} color=\"text.secondary\">\n            {key}\n          </Typography>\n        </Stack>\n      )\n      )}</Stack>;\n  return (\n    <Grid xs={6} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon}\n          sx={{ paddingBottom: \"5px\" }} />\n        <CardContent sx={{ paddingTop: \"5px\" }}>\n          {formattedContent}\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default Stats;\n","import Plotly from 'plotly.js/lib/core'\nimport bar from 'plotly.js/lib/bar';\nimport sunburst from 'plotly.js/lib/sunburst';\nimport createPlotlyComponent from 'react-plotly.js/factory'\n\nconst loadPlotly = () => {\n  Plotly.register([ bar, sunburst ])\n  return createPlotlyComponent(Plotly);\n}\n\nexport default loadPlotly(); ","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n","import { Card, CardContent, CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../dateUtils\";\nimport Plot from \"../plotly\"\nimport { SelectBox } from \"./SelectionComponents\";\nimport { Measure, VideoGame, VideoGameStringKeys } from \"./types\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  game: false,\n  platform: true,\n  publisher: false,\n  rating: true,\n  status: true,\n};\n\nconst Barchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(true);\n  let [stack, setStack] = useState(true);\n\n  if (cumulative) stack = true;\n\n  const grouped = groupDate(data, group, measure, cumulative);\n\n  return (\n    <Card>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]} value={group} setValue={setGroup} />\n            <FormControlLabel\n              label=\"Cumulative\"\n              control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n            />\n            <FormControlLabel\n              label=\"Stack\"\n              control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} />}\n            />\n          </FormGroup>}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(grouped).map(([group, val]) => ({\n            type:  cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: options[group],\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst groupDate = (data: VideoGame[], group: VideoGameStringKeys | \"none\", measure: Measure, cumulative: boolean) => {\n  const grouped = data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    let year = cumulative ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] = tree[groupVal] || {};\n    tree[groupVal][year] = (tree[groupVal][year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Record<string, Record<string, number>>);\n\n  if (cumulative) {\n    Object.values(grouped).forEach(group => {\n      let lastAmount = 0\n      const minYearMonth = Object.keys(group).sort()[0]\n      const [minYear, minMonth] = minYearMonth.split(\"-\").map(s => parseInt(s))\n      for (let i = minYear; i <= CURRENT_YEAR; i++) {\n        for (let j = (i === minYear ? minMonth : 1); j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1: 12); j++) {\n          const yearMonth = i + '-' + (j < 10 ? \"0\" : \"\") + j;\n          lastAmount = group[yearMonth] = lastAmount + (group[yearMonth] || 0)\n        }\n      }\n    })\n  }\n\n  return grouped;\n};\n\nexport default Barchart;\n","import { Card, CardContent, CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { VideoGame } from \"./types\";\n\nconst Timeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"Group\" },\n      { type: \"string\", id: \"Game\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const gameData = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.game, tooltip(row), row.startDate, row.endDate]);\n\n  let chartHeight: string;\n\n  if (groupData) chartHeight = \"55vh\";\n  else chartHeight = \"30vh\";\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n          <Chart\n            key={chartHeight}\n            width=\"400vw\"\n            height={chartHeight}\n            chartType=\"Timeline\"\n            data={timelineHeader.concat(gameData)}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: inline-block\">\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${row.game}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${row.hours}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Days: </b></span>\n                <span>${row.numDays || \"-\"}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nexport default Timeline;\n","import { FilterAlt, AllInclusive, QuestionMark, CatchingPokemon, Timer, Functions } from \"@mui/icons-material\";\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction, Stack, Fab } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { Measure, Predicate, VideoGame } from \"./types\";\n\nconst Filter = ({\n  setFilterFunc,\n  measure,\n  setMeasure,\n}: {\n  setFilterFunc: (func: () => Predicate<VideoGame>) => void;\n  measure: Measure;\n  setMeasure: (measure: Measure) => void;\n}) => {\n  const [filterEndless, setFilterEndless] = useState(false);\n  const [filterPokemon, setFilterPokemon] = useState(false);\n  const [filterUnconfirmed, setFilterUnconfirmed] = useState(false);\n\n  useEffect(() => {\n    const filters = [\n      filterEndless ? ({ status }: VideoGame) => status !== \"Endless\" : () => true,\n      filterPokemon ? ({ franchise }: VideoGame) => franchise !== \"Pokémon\" : () => true,\n      filterUnconfirmed\n        ? ({ platform, startDate }: VideoGame) => {\n          if (platform === \"PC\") {\n            if (!startDate?.getFullYear() || startDate?.getFullYear() < 2015) return false;\n          } else if (\n            platform !== \"Nintendo Switch\" &&\n            platform !== \"Nintendo 3DS\" &&\n            platform !== \"PlayStation 4\" &&\n            platform !== \"PlayStation 5\"\n          ) return false;\n\n          return true;\n        }\n        : () => true,\n    ];\n    setFilterFunc(() => (vgData: VideoGame) => filters.reduce((p, c) => p && c(vgData), true));\n  }, [filterEndless, filterPokemon, filterUnconfirmed, setFilterFunc]);\n\n  const fabProps = (enabled: boolean) =>\n    enabled ? { sx: { backgroundColor: \"primary.light\", \"&:hover\": { backgroundColor: \"primary.dark\" } } } : {};\n\n  return (\n    <Stack\n      direction=\"column\"\n      spacing={2}\n      sx={{ position: \"fixed\", right: (theme) => theme.spacing(2), bottom: (theme) => theme.spacing(2) }}\n    >\n      <SpeedDial icon={<SpeedDialIcon icon={<FilterAlt />} />} ariaLabel=\"add\">\n        <SpeedDialAction\n          FabProps={fabProps(filterEndless)}\n          tooltipOpen\n          tooltipTitle=\"Endless\"\n          icon={<AllInclusive />}\n          onClick={() => setFilterEndless(!filterEndless)}\n        />\n        <SpeedDialAction\n          FabProps={fabProps(filterUnconfirmed)}\n          tooltipOpen\n          tooltipTitle=\"Unconfirmed\"\n          icon={<QuestionMark />}\n          onClick={() => setFilterUnconfirmed(!filterUnconfirmed)}\n        />\n        <SpeedDialAction\n          FabProps={fabProps(filterPokemon)}\n          tooltipOpen\n          tooltipTitle=\"Pokemon\"\n          icon={<CatchingPokemon />}\n          onClick={() => setFilterPokemon(!filterPokemon)}\n        />\n      </SpeedDial>\n      <Fab color=\"secondary\" onClick={() => setMeasure(measure === \"Count\" ? \"Hours\" : \"Count\")}>\n        {measure === \"Count\" ? <Functions /> : <Timer />}\n      </Fab>\n    </Stack>\n  );\n};\n\nexport default Filter;\n","import { Card, CardContent, CardHeader, FormGroup } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Plot from \"../plotly\"\nimport { SelectBox } from \"./SelectionComponents\";\nimport { isVideoGame, KeysMatching, Measure, VideoGame, VideoGameTree } from \"./types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n}\n\nconst isStringArray = (x: any[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [{ ids, labels, parents, values }, setSunburstData] = useState<SunburstData>({\n    ids: [],\n    labels: [],\n    parents: [],\n    values: [],\n  });\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Sunburst\"\n        action={<SunBurstControls data={data} setSunburstData={setSunburstData} measure={measure} />}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{ margin: { l: 0, r: 0, b: 0, t: 0 } }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"game\",\n  \"platform\",\n  \"publisher\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  data,\n  setSunburstData,\n  measure,\n}: {\n  data: VideoGame[];\n  setSunburstData: (d: SunburstData) => void;\n  measure: Measure;\n}) => {\n  const groups = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\")\n  ];\n  const groupVals = groups.map(([val]) => val);\n\n  useEffect(() => {\n    const sunburstData = dataToSunburstData(data, groupVals, measure);\n    setSunburstData(sunburstData);\n    // eslint-disable-next-line\n  }, [setSunburstData, data, measure, ...groupVals]);\n\n  return (\n    <FormGroup>\n      {groups.map(([val, setVal]) => (\n        <SelectBox options={options} key={val} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      if (measure === \"Hours\" && curr.hours === undefined) return false;\n      return true;\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.game] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string) => {\n    let total = 0;\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n        } else {\n          count = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        total += count;\n      });\n\n    return total;\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n  };\n};\n\nexport default Sunburst;\n","export type KeysMatching<T, V> = keyof { [P in keyof T as T[P] extends V ? P : never]: P };\nexport type Predicate<T> = (input: T) => boolean;\n\ninterface VideoGameBase {\n  game: string;\n  platform: Platform;\n  company: Company;\n  publisher: string;\n  franchise: string;\n  genre: string[];\n  theme: string[];\n  rating: string;\n  releaseDate: Date\n  format: Format;\n  status: Status;\n  hours?: number;\n  numDays?: number;\n  banner?: string\n}\n\ninterface VideoGameWithDate extends VideoGameBase {\n  exactDate: true;\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface VideoGameWithoutDate extends VideoGameBase {\n  exactDate: false;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport type VideoGame = VideoGameWithDate | VideoGameWithoutDate\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\" | \"Next\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.game;\n\nexport type Measure = \"Hours\" | \"Count\";\n","import { Stack } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nimport Barchart from \"./Barchart\";\nimport Timeline from \"./Timeline\";\nimport Filter from \"./Filter\";\nimport Stats from \"./Stats\";\nimport Sunburst from \"./Sunburst\";\nimport { Company, Format, Measure, Platform, Predicate, Status, VideoGame } from \"./types\";\nimport { dateDiffInDays } from \"../dateUtils\";\n\nconst GamesGraphs = ({ hide } : { hide: boolean}) => {\n  const [data, setData] = useState<Record<string, string>[]>();\n  const [filterFunc, setFilterFunc] = useState<Predicate<VideoGame>>(() => () => true);\n  const [measure, setMeasure] = useState<Measure>(\"Count\");\n\n  useEffect(() => getVgData(setData), []);\n\n  if (!data || hide) {\n    console.log(\"no data\");\n    return null;\n  }\n\n  const vgData: VideoGame[] = data\n    .map((row) => {\n      const startDate = row[\"Start Date\"] ? new Date(row[\"Start Date\"]) : undefined;\n      let endDate = row[\"End Date\"] ? new Date(row[\"End Date\"]) : undefined;\n      if (endDate && row[\"End Date\"].length < 5) endDate.setFullYear(endDate.getFullYear() + 1);\n      endDate = startDate && (endDate || new Date())\n      return {\n        game: row[\"Game\"],\n        platform: row[\"Platform\"] as Platform,\n        company: row[\"Platform\"].split(\" \")[0]! as Company,\n        franchise: row[\"Franchise\"],\n        genre: row[\"Genre\"].split(\"\\n\"),\n        theme: row[\"Theme\"].split(\"\\n\"),\n        format: row[\"Format\"] as Format,\n        publisher: row[\"Publisher\"],\n        rating: row[\"Rating\"],\n        status: row[\"Status\"] as Status,\n        exactDate: !!row[\"Start Date\"] && row[\"Start Date\"].length > 5,\n        startDate: startDate,\n        endDate: endDate,\n        releaseDate: new Date(row[\"Release\"]),\n        hours: row[\"Hours\"] ? parseInt(row[\"Hours\"]) : undefined,\n        numDays: dateDiffInDays(startDate, endDate),\n        banner: row[\"Banner\"]\n      } as VideoGame;\n    })\n    .filter(filterFunc);\n\n    return (\n      <Stack spacing={2}>\n        <Stats data={vgData} />\n        <Timeline data={vgData} />\n        <Sunburst data={vgData} measure={measure} />\n        <Barchart data={vgData} measure={measure} />\n        <Filter setFilterFunc={setFilterFunc} measure={measure} setMeasure={setMeasure} />\n      </Stack>\n  );\n};\n\nconst arrayToJson = (data: string[][]) => {\n  const [header, ...rows] = data;\n  return rows.map((row) =>\n    row.reduce((json, val, index) => {\n      json[header[index]] = val\n      return json\n    }, {} as Record<string, string>)\n  );\n};\n\nconst getVgData = (setData: (b: Record<string, string>[]) => void) => {\n  gapi.client.sheets.spreadsheets.values\n    .get({\n      spreadsheetId: \"1JCAN_lB2QaVxj1rD4f88mN4tHjmhxF3CZlGtZGwYCLk\",\n      range: \"Games List!A:Z\",\n    })\n    .then((response) => response.result.values!)\n    .then(arrayToJson)\n    .then(setData);\n};\n\nexport default GamesGraphs;\n"],"names":["CURRENT_DATE","Date","CURRENT_MONTH","getMonth","CURRENT_YEAR","getFullYear","dateDiffInDays","dt1","dt2","Math","floor","getTime","format","Intl","NumberFormat","AllTime","filtered","data","filter","game","hours","time","sum","games","length","StatCard","icon","Timer","title","content","Averages","grouped","reduce","tree","year","startDate","toString","parseFloat","Object","values","keys","toFixed","ShowChart","AveragesPerGame","status","numDays","round","days","AutoGraph","ThisYearSoFar","Update","RecentlyComplete","recent","a","endDate","sort","b","slice","StatList","Pause","MostPlayed","most","Whatshot","CurrentlyPlaying","next","releaseDate","xs","md","Stack","direction","spacing","Card","sx","flex","CardHeader","titleTypographyProps","variant","subheader","toLocaleDateString","avatar","PlayArrow","CardMedia","component","src","banner","SkipNext","height","CardContent","List","map","Fragment","Divider","ListItem","ListItemText","secondaryTypographyProps","primary","secondary","justifyContent","Typography","formattedContent","align","divider","orientation","flexItem","key","val","fontSize","color","paddingBottom","paddingTop","container","alignItems","Plotly","bar","sunburst","createPlotlyComponent","SelectBox","options","value","setValue","Select","onChange","event","target","option","MenuItem","none","company","franchise","platform","publisher","rating","groupDate","group","measure","cumulative","groupVal","toISOString","substring","forEach","lastAmount","split","s","parseInt","minYear","minMonth","i","j","yearMonth","useState","setGroup","setCumulative","stack","setStack","action","FormGroup","FormControlLabel","label","control","Switch","checked","_","style","width","entries","type","name","x","y","stackgroup","undefined","config","displayModeBar","responsive","layout","showlegend","legend","barmode","margin","l","r","t","xaxis","tickmode","tooltip","row","chartHeight","groupData","setGroupData","groupFunc","gameData","exactDate","overflowX","overflowY","chartType","id","role","concat","setFilterFunc","setMeasure","filterEndless","setFilterEndless","filterPokemon","setFilterPokemon","filterUnconfirmed","setFilterUnconfirmed","useEffect","filters","vgData","p","c","fabProps","enabled","backgroundColor","position","right","theme","bottom","SpeedDial","SpeedDialIcon","FilterAlt","ariaLabel","SpeedDialAction","FabProps","tooltipOpen","tooltipTitle","AllInclusive","onClick","QuestionMark","CatchingPokemon","Fab","Functions","SunBurstControls","setSunburstData","groups","groupVals","sunburstData","dataToSunburstData","setVal","curr","keyToVal","every","obj","ids","labels","parents","recurseGroup","parent","total","val2","localeCompare","count","push","branchvalues","maxdepth","arrayToJson","header","json","index","getVgData","setData","gapi","client","sheets","spreadsheets","get","spreadsheetId","range","then","response","result","hide","filterFunc","console","log","setFullYear","genre","Stats"],"sourceRoot":""}