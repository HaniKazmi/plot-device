{"version":3,"file":"static/js/471.32127301.chunk.js","mappings":"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","sources":["common/Barchart.tsx","common/Card.tsx","common/Finished.tsx","common/Stats.tsx","plotly.ts","utils/mathUtils.ts","../node_modules/@mui/icons-material/esm/Whatshot.js","vg/Stats.tsx","vg/Sunburst.tsx","vg/types.ts","vg/Barchart.tsx","vg/Timeline.tsx","vg/Graphs.tsx","vg/SelectionComponents.tsx"],"sourcesContent":["import { Card, CardContent, useTheme } from \"@mui/material\";\nimport Plot from \"../plotly\";\nimport { ReactNode } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../utils/dateUtils\";\n\nconst Barchart = ({\n  grouped,\n  cumulative,\n  stack,\n  children,\n}: {\n  grouped: Record<string, Record<string, number>>;\n  cumulative: boolean;\n  stack: boolean;\n  children?: ReactNode;\n}) => {\n  const theme = useTheme();\n  let data: Record<string, Record<string, number>>;\n  if (cumulative) {\n    data = convertToCumulative(grouped);\n    stack = true;\n  } else {\n    data = grouped;\n  }\n\n  return (\n    <Card>\n      {children}\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(data).map(([group, val]) => ({\n            type: cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: Object.keys(grouped).length > 1 && Object.keys(grouped).length < 8,\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            plot_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            font: {\n              color: theme.palette.text.primary,\n            },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst convertToCumulative = (grouped: Record<string, Record<string, number>>) => {\n  return Object.entries(grouped).reduce((prev, [key, group]) => {\n    prev[key] = {};\n    let lastAmount = 0;\n    const minYearMonth = Object.keys(group).sort()[0];\n    const [minYear, minMonth] = minYearMonth.split(\"-\").map((s) => parseInt(s));\n    for (let i = minYear; i <= CURRENT_YEAR; i++) {\n      for (let j = i === minYear ? minMonth : 1; j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1 : 12); j++) {\n        const yearMonth = i + \"-\" + (j < 10 ? \"0\" : \"\") + j;\n        lastAmount = prev[key][yearMonth] = lastAmount + (group[yearMonth] || 0);\n      }\n    }\n    return prev;\n  }, {} as Record<string, Record<string, number>>);\n};\n\nexport default Barchart;\n","import { CardMedia, Dialog, SxProps, Theme } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport const CardMediaImage = ({\n  image,\n  alt,\n  ...props\n}: {\n  image?: string;\n  alt: string;\n  height?: string;\n  width?: string;\n  sx?: SxProps<Theme>;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const content = <CardMedia component=\"img\" src={image} alt={alt} onClick={() => setDialogOpen(true)} {...props} />;\n  return (\n    <>\n      {content}\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth={false}\n        PaperProps={{ sx: { backgroundColor: \"unset\", boxShadow: \"unset\", backgroundImage: \"unset\" } }}\n      >\n        <img\n          style={{ maxHeight: \"calc(100vh - 64px)\", objectFit: \"contain\", maxWidth: \"100%\", width: \"100vw\" }}\n          src={image}\n          alt={alt}\n          onClick={() => setDialogOpen(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n","import { Card, CardHeader, CardContent, FormGroup, FormControlLabel, Switch, Dialog } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { useState } from \"react\";\nimport { CardMediaImage } from \"./Card\";\n\nconst Finished = ({\n  title,\n  data,\n  width,\n}: {\n  title: string;\n  data: { banner?: string; startDate?: Date; name: string }[];\n  width: number;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n  const recent = data.filter((show) => show.banner).sortByKey(\"startDate\");\n  const content = (\n    <>\n      <CardHeader\n        title={title}\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Maximise\"\n              control={<Switch checked={dialogOpen} onChange={(_, checked) => setDialogOpen(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          {recent.map((item) => (\n            <Grid alignSelf=\"stretch\" key={item.name} xs={dialogOpen ? 4 : width}>\n              <Card sx={{ height: \"100%\" }}>\n                <CardMediaImage image={item.banner} height=\"100%\" alt={item.name} />\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </>\n  );\n\n  return (\n    <Card>\n      {content}\n      <Dialog open={dialogOpen} fullScreen>\n        {content}\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default Finished;\n","import { Card, CardContent, CardHeader, Divider, Stack, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"../vg/types\";\nimport { Show } from \"../show/types\";\nimport { CardMediaImage } from \"./Card\";\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string | [string, number][];\n}) => {\n  const formattedContent =\n    typeof content === \"string\" ? (\n      <Typography align=\"right\" variant=\"h4\">\n        {content}\n      </Typography>\n    ) : (\n      <Stack divider={<Divider orientation=\"vertical\" flexItem />} justifyContent=\"space-evenly\" direction={\"row\"}>\n        {content.map(([key, val]) => (\n          <Stack key={val} direction={\"column\"}>\n            <Typography align=\"center\" variant=\"h5\">\n              {format(val)}\n            </Typography>\n            <Typography align=\"center\" sx={{ fontSize: 14 }} color=\"text.secondary\">\n              {key}\n            </Typography>\n          </Stack>\n        ))}\n      </Stack>\n    );\n  return (\n    <Grid xs={12} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader\n          titleTypographyProps={{ variant: \"h6\" }}\n          title={title}\n          avatar={icon}\n          sx={{ paddingBottom: \"5px\" }}\n        />\n        <CardContent sx={{ paddingTop: \"5px\" }}>{formattedContent}</CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport const StatList = <T extends VideoGame | Show, U>({\n  icon,\n  title,\n  content,\n  labelComponent,\n  width = 6,\n  pictureWdith = 6,\n  aspectRatio,\n  divider,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: [T, U][] | T[];\n  labelComponent: (u: U) => string[][];\n  width?: number;\n  pictureWdith?: number;\n  aspectRatio?: string;\n  divider?: boolean;\n}) => {\n  const dividerComponent = <Divider orientation=\"vertical\" flexItem />;\n  return (\n    <Grid xs={width}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Grid container spacing={1} alignItems=\"center\">\n            {content.map((entry) => {\n              let game: T;\n              let input: U;\n              if (Array.isArray(entry)) {\n                game = entry[0];\n                input = entry[1];\n              } else {\n                game = entry;\n                input = entry as unknown as U;\n              }\n              return (\n                <Grid alignSelf=\"stretch\" key={game.name} xs={pictureWdith}>\n                  <Card variant=\"outlined\" sx={{ height: \"100%\" }}>\n                    <CardMediaImage image={game.banner} width=\"100%\" sx={{ aspectRatio }} alt={game.name} />\n                    <CardContent sx={{ padding: \"10px\", \":last-child\": { paddingBottom: \"10px\" } }}>\n                      {labelComponent(input).map((stacks, index, labbels) => (\n                        <Stack\n                          key={`${title}-stacks-${game.name}-${index}`}\n                          justifyContent=\"space-between\"\n                          alignItems=\"baseline\"\n                          direction=\"row\"\n                          divider={labbels.length === 1 ? dividerComponent : null}\n                        >\n                          {stacks.map((val) => (\n                            <Typography key={val} variant=\"subtitle2\" color=\"text.secondary\">\n                              {val}\n                            </Typography>\n                          ))}\n                        </Stack>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n","import Plotly from \"plotly.js/lib/core\";\nimport bar from \"plotly.js/lib/bar\";\nimport sunburst from \"plotly.js/lib/sunburst\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst loadPlotly = () => {\n  Plotly.register([bar, sunburst]);\n  return createPlotlyComponent(Plotly);\n};\n\nexport default loadPlotly();\n","export const format = new Intl.NumberFormat().format;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"\n}), 'Whatshot');","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"./types\";\nimport { StatCard, StatList } from \"../common/Stats\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce((tree, game) => {\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    if (!tree[year]) {\n      tree[year] = [0, 0];\n    }\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {} as Record<string, [number, number]>);\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2));\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2));\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Averages Per Year\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === \"Beat\" && game.hours && game.numDays);\n  const hours = Math.round(filtered.sum(\"hours\") / filtered.length);\n  const days = Math.round(filtered.sum(\"numDays\") / filtered.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Averages Per Game\"\n      content={[\n        [\"Hours\", hours],\n        [\"Days To Beat\", days],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  return (\n    <StatCard\n      icon={<Update />}\n      title=\"This Year So Far\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"endDate\")\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<Pause />}\n      aspectRatio={\"16/9\"}\n      divider\n      title=\"Recently Finished\"\n      content={recent}\n      labelComponent={StatsCardLabelMostPlayed}\n    />\n  );\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"hours\")\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<Whatshot />}\n      aspectRatio={\"16/9\"}\n      divider\n      title=\"Most Played\"\n      content={most}\n      labelComponent={StatsCardLabelMostPlayed}\n    />\n  );\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.status === \"Playing\")\n    .sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1))\n    .slice(0, 3);\n  return (\n    <StatList\n      icon={<PlayArrow />}\n      aspectRatio={\"16/9\"}\n      divider\n      title=\"Currently Playing\"\n      content={recent}\n      width={12}\n      pictureWdith={4}\n      labelComponent={StatsCardLabelCurrentlyPlaying}\n    />\n  );\n};\n\nconst StatsCardLabelMostPlayed = (game: VideoGame) => [\n  [game.endDate?.toLocaleDateString() || \"\", `${format(game.hours!)} Hours`],\n];\n\nconst StatsCardLabelCurrentlyPlaying = (game: VideoGame) => [\n  [game.startDate?.toLocaleDateString() || \"\", game.platform],\n];\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup, useTheme } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Plot from \"../plotly\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { isVideoGame, Measure, VideoGame, VideoGameTree } from \"./types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n}\n\nconst isStringArray = (x: any[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const theme = useTheme();\n\n  const [{ ids, labels, parents, values }, setSunburstData] = useState<SunburstData>({\n    ids: [],\n    labels: [],\n    parents: [],\n    values: [],\n  });\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Sunburst\"\n        action={<SunBurstControls data={data} setSunburstData={setSunburstData} measure={measure} />}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\", maxHeight: \"100vw\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n              marker: { line: { color: theme.palette.background.paper } },\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            margin: { l: 0, r: 0, b: 0, t: 0 },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"name\",\n  \"platform\",\n  \"publisher\",\n  \"genre\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  data,\n  setSunburstData,\n  measure,\n}: {\n  data: VideoGame[];\n  setSunburstData: (d: SunburstData) => void;\n  measure: Measure;\n}) => {\n  const groups = [useState<OptionKeys>(\"company\"), useState<OptionKeys>(\"platform\"), useState<OptionKeys>(\"franchise\")];\n  const groupVals = groups.map(([val]) => val);\n\n  useEffect(() => {\n    const sunburstData = dataToSunburstData(data, groupVals, measure);\n    setSunburstData(sunburstData);\n    // eslint-disable-next-line\n  }, [setSunburstData, data, measure, ...groupVals]);\n\n  return (\n    <FormGroup>\n      {groups.map(([val, setVal]) => (\n        <SelectBox options={options} key={val} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      if (measure === \"Hours\" && curr.hours === undefined) return false;\n      return true;\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.name] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string) => {\n    let total = 0;\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n        } else {\n          count = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        total += count;\n      });\n\n    return total;\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n  };\n};\n\nexport default Sunburst;\n","import { KeysMatching } from \"../utils/types\";\n\ninterface VideoGameBase {\n  name: string;\n  platform: Platform;\n  company: Company;\n  publisher: string;\n  franchise: string;\n  genre: string;\n  theme: string[];\n  rating: string;\n  releaseDate: Date;\n  format: Format;\n  status: Status;\n  hours?: number;\n  numDays?: number;\n  banner?: string;\n}\n\ninterface VideoGameWithDate extends VideoGameBase {\n  exactDate: true;\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface VideoGameWithoutDate extends VideoGameBase {\n  exactDate: false;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport type VideoGame = VideoGameWithDate | VideoGameWithoutDate;\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\" | \"Next\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.name;\n\nexport type Measure = \"Hours\" | \"Count\";\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { Measure, VideoGame, VideoGameStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  name: false,\n  platform: true,\n  publisher: false,\n  rating: true,\n  status: true,\n  genre: true,\n};\n\nconst VgBarchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(true);\n  let [stack, setStack] = useState(true);\n\n  const grouped = groupDate(data, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (data: VideoGame[], group: VideoGameStringKeys | \"none\", measure: Measure, cumulative: boolean) => {\n  const grouped = data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = cumulative ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] = tree[groupVal] || {};\n    tree[groupVal][year] = (tree[groupVal][year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Record<string, Record<string, number>>);\n\n  return grouped;\n};\n\nexport default VgBarchart;\n","import { Card, CardContent, CardHeader, FormControlLabel, FormGroup, Switch, useTheme } from \"@mui/material\";\nimport { useCallback, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { VideoGame } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\n\nconst Timeline = ({ data }: { data: VideoGame[] }) => {\n  const theme = useTheme();\n  const [groupData, setGroupData] = useState(false);\n  const [height, setHeight] = useState<string | number>(\"50vh\");\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"Group\" },\n      { type: \"string\", id: \"Game\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const gameData = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.name, tooltip(row), row.startDate, row.endDate || CURRENT_DATE]);\n\n  const callback = useCallback(() => {\n    const labels = document.getElementsByTagName(\"text\");\n    for (let label of labels) {\n      if (label.getAttribute(\"text-anchor\") === \"middle\") {\n        label.setAttribute(\"fill\", theme.palette.text.secondary);\n      }\n    }\n\n    const rects = document.getElementsByTagName(\"rect\");\n    for (let rect of rects) {\n      if (rect.getAttribute(\"stroke\") === \"#9a9a9a\") {\n        const newHeight = rect.height.baseVal.value + 50;\n        setHeight(newHeight < document.documentElement.clientHeight * 0.95 ? newHeight : height);\n      }\n    }\n  }, [theme.palette.text.secondary, height]);\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n          <Chart\n            key={height}\n            width=\"400vw\"\n            height={height}\n            chartType=\"Timeline\"\n            data={timelineHeader.concat(gameData)}\n            onLoad={() => {\n              setTimeout(callback, 100);\n            }}\n            chartEvents={[{ eventName: \"ready\", callback: callback }]}\n            options={{\n              backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.grey.A700 : undefined,\n              timeline: { rowLabelStyle: { color: theme.palette.text.primary } },\n            }}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: inline-block\">\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${row.name}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${row.hours}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Days: </b></span>\n                <span>${row.numDays || \"-\"}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nexport default Timeline;\n","import Stats from \"./Stats\";\nimport { Measure, VideoGame } from \"./types\";\nimport Sunburst from \"./Sunburst\";\nimport Barchart from \"./Barchart\";\nimport Finished from \"../common/Finished\";\nimport Timeline from \"./Timeline\";\n\nconst Graphs = ({ vgData, measure }: { vgData: VideoGame[]; measure: Measure }) => (\n  <>\n    <Stats data={vgData} />\n    <Timeline data={vgData} />\n    <Sunburst data={vgData} measure={measure} />\n    <Barchart data={vgData} measure={measure} />\n    <Finished title=\"All Games\" data={vgData} width={4} />\n  </>\n);\n\nexport default Graphs;\n","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n"],"names":["convertToCumulative","grouped","Object","entries","reduce","prev","_ref4","_ref5","_slicedToArray","key","group","lastAmount","_minYearMonth$split$m","keys","sort","split","map","s","parseInt","_minYearMonth$split$m2","minYear","minMonth","i","CURRENT_YEAR","j","CURRENT_MONTH","yearMonth","_ref","data","cumulative","stack","children","theme","useTheme","_jsxs","Card","_jsx","CardContent","Plot","style","width","height","_ref2","_ref3","val","type","name","x","y","values","stackgroup","undefined","config","displayModeBar","responsive","layout","showlegend","length","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","paper_bgcolor","palette","mode","plot_bgcolor","font","color","text","primary","CardMediaImage","image","alt","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","dialogOpen","setDialogOpen","content","CardMedia","_objectSpread","component","src","onClick","_Fragment","Dialog","open","onClose","maxWidth","PaperProps","sx","backgroundColor","boxShadow","backgroundImage","maxHeight","objectFit","title","recent","filter","show","banner","sortByKey","CardHeader","action","FormGroup","row","FormControlLabel","label","control","Switch","checked","onChange","_","Grid","container","spacing","alignItems","item","alignSelf","xs","fullScreen","StatCard","icon","formattedContent","Typography","align","variant","Stack","divider","Divider","flexItem","justifyContent","direction","format","fontSize","md","titleTypographyProps","avatar","paddingBottom","paddingTop","StatList","labelComponent","_ref4$width","_ref4$pictureWdith","pictureWdith","aspectRatio","dividerComponent","entry","game","input","Array","isArray","padding","stacks","index","labbels","concat","Plotly","bar","sunburst","createPlotlyComponent","Intl","NumberFormat","createSvgIcon","d","AllTime","filtered","hours","time","sum","games","Timer","Averages","tree","_game$startDate","year","startDate","getFullYear","toString","parseFloat","toFixed","ShowChart","AveragesPerGame","status","numDays","Math","round","days","AutoGraph","ThisYearSoFar","_game$startDate2","Update","RecentlyComplete","_ref6","a","endDate","slice","Pause","StatsCardLabelMostPlayed","MostPlayed","_ref7","most","Whatshot","CurrentlyPlaying","_ref8","PlayArrow","StatsCardLabelCurrentlyPlaying","_game$endDate","toLocaleDateString","_game$startDate3","platform","options","SunBurstControls","setSunburstData","measure","groups","groupVals","useEffect","sunburstData","dataToSunburstData","_toConsumableArray","setVal","SelectBox","value","setValue","curr","Date","keyToVal","every","obj","forEach","ids","labels","parents","recurseGroup","parent","total","val2","localeCompare","_ref11","count","_ref12","push","_useState2$","branchvalues","maxdepth","marker","line","background","paper","none","company","franchise","publisher","rating","genre","groupDate","groupVal","toISOString","substring","setGroup","_useState3","_useState4","setCumulative","_useState5","_useState6","setStack","Barchart","disabled","tooltip","_row$startDate","_row$endDate","groupData","setGroupData","setHeight","groupFunc","gameData","exactDate","CURRENT_DATE","callback","useCallback","_step","document","getElementsByTagName","_iterator","_createForOfIteratorHelper","n","done","getAttribute","setAttribute","secondary","err","e","f","_step2","rects","_iterator2","rect","newHeight","baseVal","documentElement","clientHeight","overflowX","overflowY","Chart","chartType","id","role","onLoad","setTimeout","chartEvents","eventName","grey","A700","timeline","rowLabelStyle","vgData","Stats","Timeline","Sunburst","Finished","Select","event","target","option","MenuItem"],"sourceRoot":""}