{"version":3,"file":"static/js/471.47c778a6.chunk.js","mappings":"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","sources":["dateUtils.ts","show/Stats.tsx","show/Timeline.tsx","show/Show.tsx","mathUtils.ts","vg/Stats.tsx"],"sourcesContent":["export const CURRENT_DATE = new Date();\nexport const CURRENT_MONTH = CURRENT_DATE.getMonth();\nexport const CURRENT_YEAR = CURRENT_DATE.getFullYear();\n\nexport const dateDiffInDays = (dt1?: Date, dt2?: Date) => {\n    if (!dt1 || !dt2) return;\n    return Math.floor(\n        (dt2.getTime() - dt1.getTime()) /\n        (1000 * 60 * 60 * 24) + 1\n    );\n};","import { AutoGraph, ShowChart, Timer, Update } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../dateUtils\";\nimport { StatCard } from \"../vg/Stats\";\nimport { Show } from \"./types\";\n\nconst Stats = ({ data }: { data: Show[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerShow data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: Show[] }) => {\n  const totalShows = data.length;\n  const totalEpisodes = data.sum('e');\n  const totalTime = Math.floor(data.sum('minutes') / 60)\n  return <StatCard icon={<Timer />} title=\"All Time\" content={[[\"Shows\", totalShows], [\"Episodes\", totalEpisodes], [\"Hours\", totalTime]]} />;\n};\n\nconst ThisYearSoFar = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap(show => show.s).filter(s => s.startDate.getFullYear() === CURRENT_YEAR)\n  const totalSeasons = filtered.length;\n  const totalEpisodes = filtered.sum('e');\n  const totalTime = Math.floor(filtered.sum('minutes') / 60)\n  return <StatCard icon={<Update />} title=\"This Year So Far\" content={[[\"Seasons\", totalSeasons], [\"Episodes\", totalEpisodes], [\"Hours\", totalTime]]} />;\n};\n\nconst Averages = ({ data }: { data: Show[] }) => {\n  const grouped = data.flatMap(show => show.s).reduce((tree, s) => {\n    let year = s.startDate.getFullYear().toString();\n    if (!year || !s.minutes) return tree;\n\n    if (!tree[year]) {\n      tree[year] = [0, 0, 0]\n    }\n    tree[year] = [tree[year][0] + 1, tree[year][1] + s.e, tree[year][2] + s.minutes];\n    return tree;\n  }, {} as Record<string, [number, number, number]>);\n\n  const seasons = Math.floor((Object.values(grouped).sum(0) / Object.keys(grouped).length))\n  const episodes = Math.floor((Object.values(grouped).sum(1) / Object.keys(grouped).length))\n  const hours = Math.floor((Object.values(grouped).sum(2) / Object.keys(grouped).length / 60))\n\n  return <StatCard icon={<ShowChart />} title=\"Averages Per Year\" content={[[\"Seasons\", seasons], [\"Episodes\", episodes], [\"Hours\", hours]]} />;\n};\n\nconst AveragesPerShow = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap(show => show.s)\n  const totalSeasons = Math.round(filtered.length / data.length)\n  const totalEpisodes = Math.round(filtered.sum('e') / data.length)\n  const totalTime = Math.floor(filtered.sum('minutes') / 60 / data.length)\n\n  return <StatCard icon={<AutoGraph />} title=\"Averages Per Show\" content={[[\"Seasons\", totalSeasons], [\"Episodes\", totalEpisodes], [\"Hours\", totalTime]]} />;\n};\n\nexport default Stats;","import { Card, CardHeader, FormGroup, FormControlLabel, Switch, CardContent } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Season, Show } from \"./types\";\n\nconst Timeline = ({ data }: { data: Show[] }) => {\n  const [groupData, setGroupData] = useState(true);\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"*\" },\n      { type: \"string\", id: \"Show\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const seasons = data.flatMap(show => show.s.map(s => [`${show.show} - S${s.s}`, s] as [string, Season]))\n\n  const showData = groupData\n    ? data.map((show) => [\"*\", show.show, tooltip(show.show, show), show.startDate, show.endDate])\n    : seasons.map(([title, season]) => [\"*\", title, tooltip(title, season), season.startDate, season.endDate]);\n\n  let chartHeight: string;\n\n  if (groupData) chartHeight = \"95vh\";\n  else chartHeight = \"70vh\";\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Combine Seasons\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n          <Chart\n            key={chartHeight}\n            width=\"400vw\"\n            height={chartHeight}\n            chartType=\"Timeline\"\n            data={timelineHeader.concat(showData)}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst tooltip = (title: string, row: Show | Season) =>\n  `\n    <div style=\"display: inline-block\">\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${title}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${Math.round(row.minutes / 60)}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Episodes: </b></span>\n                <span>${row.e}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nexport default Timeline;","import { Stack } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport Stats from \"./Stats\";\nimport Timeline from \"./Timeline\";\nimport { Season, Show, Status } from \"./types\";\n\nconst ShowsGraph = ({ hide }: { hide: boolean }) => {\n  const [data, setData] = useState<Record<string, string>[]>();\n  useEffect(() => { !data && !hide && getShowData(setData) }, [data, hide]);\n\n  if (!data || hide) {\n    console.log(\"no data\");\n    return null;\n  }\n\n  const showData: Show[] = []\n  data.reduce((show, row, index) => {\n    if (row[\"Show\"] !== \"\") {\n      if (index !== 0) {\n        show.startDate = show.s?.[0].startDate\n        show.endDate = show.s?.at(-1)?.endDate\n        show.e = show.s?.sum('e')\n        show.minutes = show.s?.sum('minutes')\n\n        showData.push(show as Show)\n      }\n      show = {\n        show: row[\"Show\"],\n        status: row[\"Status\"] as Status,\n        anime: row[\"Anime\"] === 'TRUE',\n        s: []\n      }\n    } else {\n      const season: Partial<Season> = {\n        s: parseInt(row[\"Season\"]),\n        e: parseInt(row[\"Episode\"]),\n        startDate: new Date(row[\"Start\"]),\n        endDate: row[\"End\"] ? new Date(row[\"End\"]) : new Date(),\n        episodeLength: row[\"Episodes\"] ? parseInt(row[\"Episodes\"]) : undefined\n      }\n\n      season.minutes = season.episodeLength ? season.episodeLength * season.e! : undefined\n      if (season.startDate && season.startDate.getFullYear() > 2005) {\n        show.s!.push(season as Season)\n        }\n    }\n\n    return show\n  }, {} as Partial<Show>)\n\n  console.log(showData)\n  return (\n    <Stack spacing={2}>\n      <Stats data={showData} />\n      <Timeline data={showData} />\n    </Stack>\n  );\n};\n\nconst getShowData = (setData: (b: Record<string, string>[]) => void) => {\n  console.log(\"show fetch\")\n  gapi.client.sheets.spreadsheets.values\n    .get({\n      spreadsheetId: \"1M3om2DPLfRO5dKcUfYOIcSNoLThzMLp1iZLQX6qR3pY\",\n      range: \"Sheet1!A:I\",\n    })\n    .then((response) => response.result.values!)\n    .then(arrayToJson)\n    .then(setData);\n};\n\nconst arrayToJson = (data: string[][]) => {\n  const [header, ...rows] = data;\n  return rows.map((row) => {\n    const json: Record<string, string> = {};\n    row.forEach((val, index) => (json[header[index]] = val));\n    return json;\n  });\n};\n\nexport default ShowsGraph;\n","export const format = new Intl.NumberFormat().format;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, SkipNext, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Stack,\n  CardMedia,\n} from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Fragment } from \"react\";\nimport { CURRENT_YEAR } from \"../dateUtils\";\nimport { format } from \"../mathUtils\";\nimport { VideoGame } from \"./types\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum('hours');\n  const games = filtered.length;\n  return <StatCard icon={<Timer />} title=\"All Time\" content={[[\"Games\", games], [\"Hours\", time]]} />;\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce((tree, game) => {\n    let year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    if (!tree[year]) {\n      tree[year] = [0, 0]\n    }\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {} as Record<string, [number, number]>);\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2))\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2))\n\n  return <StatCard icon={<ShowChart />} title=\"Averages Per Year\" content={[[\"Games\", games], [\"Hours\", hours]]} />;\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === 'Beat' && game.hours && game.numDays)\n  const hours = Math.round(filtered.sum('hours') / filtered.length)\n  const days = Math.round(filtered.sum('numDays') / filtered.length)\n\n  return <StatCard icon={<AutoGraph />} title=\"Averages Per Game\" content={[[\"Hours\", hours], [\"Days To Beat\", days]]} />;\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum('hours');\n  const games = filtered.length;\n\n  return <StatCard icon={<Update />} title=\"This Year So Far\" content={[[\"Games\", games], [\"Hours\", time]]} />;\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.endDate! < b.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Pause />} title=\"Recently Finished\" content={recent} />;\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.hours! < b.hours! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Whatshot />} title=\"Most Played\" content={most} />;\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1))[0];\n  const next = data.filter((a) => a.status === \"Next\").sort((a, b) => (a.releaseDate > b.releaseDate ? 1 : -1))[0];\n  return (\n    <Grid xs={12} md={4}>\n      <Stack direction=\"column\" spacing={1} /* sx={{ height: \"100%\" }} */ >\n        {recent && <Card sx={{ flex: \"0 1 auto\" }}>\n          <CardHeader\n            titleTypographyProps={{ variant: \"h6\" }}\n            title=\"Currently Playing\"\n            subheader={`Started ${recent.startDate?.toLocaleDateString()}`}\n            avatar={<PlayArrow />}\n          />\n          <CardMedia component=\"img\" src={recent.banner} />\n        </Card>\n        }\n        {next &&\n          <Card sx={{ flex: \"1 1 auto\" }}>\n            <CardHeader\n              titleTypographyProps={{ variant: \"h6\" }}\n              title=\"Next Up\"\n              subheader={`Releases ${next.releaseDate.toLocaleDateString()}`}\n              avatar={<SkipNext />}\n            />\n            <CardMedia component=\"img\" src={next.banner} />\n          </Card>\n        }\n      </Stack>\n    </Grid>\n  );\n};\n\nconst StatList = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: VideoGame[];\n}) => {\n  return (\n    <Grid xs={6} md={4}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <List>\n            {content.map((game) => (\n              <Fragment key={game.game}>\n                <Divider variant=\"middle\" component=\"li\" />\n                <ListItem>\n                  <ListItemText\n                    secondaryTypographyProps={{ component: \"span\" }}\n                    primary={game.game}\n                    secondary={\n                      <Stack direction={{ xs: \"column\", md: \"row\" }} justifyContent=\"space-between\">\n                        <Typography>{game.endDate?.toLocaleDateString()}</Typography>\n                        <Typography>{`${format(game.hours!)} Hours`}</Typography>\n                      </Stack>\n                    }\n                  />\n                </ListItem>\n              </Fragment>\n            ))}\n            <Divider variant=\"middle\" component=\"li\" />\n          </List>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string | [string, number][]\n}) => {\n  const formattedContent = typeof content === 'string' ?\n    <Typography align=\"right\" variant=\"h4\">\n      {content}\n    </Typography>\n    : <Stack\n      divider={<Divider orientation=\"vertical\" flexItem />}\n      justifyContent=\"space-evenly\" direction={\"row\"}>{content.map(([key, val]) => (\n        <Stack key={val} direction={\"column\"}>\n          <Typography align=\"center\" variant=\"h5\">\n            {format(val)}\n          </Typography>\n          <Typography align=\"center\" sx={{ fontSize: 14 }} color=\"text.secondary\">\n            {key}\n          </Typography>\n        </Stack>\n      )\n      )}</Stack>;\n  return (\n    <Grid xs={6} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon}\n          sx={{ paddingBottom: \"5px\" }} />\n        <CardContent sx={{ paddingTop: \"5px\" }}>\n          {formattedContent}\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default Stats;\n"],"names":["CURRENT_DATE","Date","CURRENT_MONTH","getMonth","CURRENT_YEAR","getFullYear","dateDiffInDays","dt1","dt2","Math","floor","getTime","AllTime","data","totalShows","length","totalEpisodes","sum","totalTime","icon","Timer","title","content","ThisYearSoFar","filtered","flatMap","show","s","filter","startDate","totalSeasons","Update","Averages","grouped","reduce","tree","year","toString","minutes","e","seasons","Object","values","keys","episodes","hours","ShowChart","AveragesPerShow","round","AutoGraph","container","spacing","alignItems","tooltip","row","toLocaleDateString","endDate","chartHeight","useState","groupData","setGroupData","map","showData","season","Card","CardHeader","action","FormGroup","FormControlLabel","label","control","Switch","checked","onChange","_","CardContent","style","overflowX","overflowY","width","height","chartType","type","id","role","concat","getShowData","setData","console","log","gapi","client","sheets","spreadsheets","get","spreadsheetId","range","then","response","result","arrayToJson","header","json","forEach","val","index","hide","useEffect","at","push","status","anime","parseInt","episodeLength","undefined","Stack","format","Intl","NumberFormat","game","time","games","StatCard","parseFloat","toFixed","AveragesPerGame","numDays","days","RecentlyComplete","recent","a","sort","b","slice","StatList","Pause","MostPlayed","most","Whatshot","CurrentlyPlaying","next","releaseDate","xs","md","direction","sx","flex","titleTypographyProps","variant","subheader","avatar","PlayArrow","CardMedia","component","src","banner","SkipNext","List","Fragment","Divider","ListItem","ListItemText","secondaryTypographyProps","primary","secondary","justifyContent","Typography","formattedContent","align","divider","orientation","flexItem","key","fontSize","color","paddingBottom","paddingTop"],"sourceRoot":""}