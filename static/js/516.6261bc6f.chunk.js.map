{"version":3,"file":"static/js/516.6261bc6f.chunk.js","mappings":"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","sources":["plotly.tsx","vg/SelectionComponents.tsx","vg/Barchart.tsx","vg/Timeline.tsx","vg/Filter.tsx","vg/Stats.tsx","vg/Sunburst.tsx","vg/types.ts","vg.tsx"],"sourcesContent":["import Plotly from 'plotly.js/lib/core'\nimport bar from 'plotly.js/lib/bar';\nimport sunburst from 'plotly.js/lib/sunburst';\nimport createPlotlyComponent from 'react-plotly.js/factory'\n\nconst loadPlotly = () => {\n  Plotly.register([ bar, sunburst ])\n  return createPlotlyComponent(Plotly);\n}\n\nexport default loadPlotly(); ","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n","import { Card, CardContent, CardHeader } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Plot from \"../plotly\"\nimport { SelectBox } from \"./SelectionComponents\";\nimport { Measure, VideoGame, VideoGameStringKeys } from \"./types\";\n\nconst options: (VideoGameStringKeys | \"none\")[] = [\n  \"none\",\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"game\",\n  \"platform\",\n  \"publisher\",\n  \"rating\",\n  \"status\",\n];\n\nconst Barchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n\n  const grouped = data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] = tree[groupVal] || {};\n    tree[groupVal][year] = (tree[groupVal][year] || 0) + (measure === \"Count\" ? 1 : parseInt(game.hours));\n    return tree;\n  }, {} as Record<string, Record<string, number>>);\n\n  return (\n    <Card>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={<SelectBox options={options} value={group} setValue={setGroup} />}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(grouped).map(([group, val]) => ({\n            type: \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: \"stack\",\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"linear\" },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Barchart;\n","import { Card, CardContent, CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { VideoGame } from \"./types\";\n\nconst Timeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"Company\" },\n      { type: \"string\", id: \"Game\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const gameData = data\n    .filter(({ exactDate }) => exactDate)\n    .filter(({ startDate }) => startDate?.getFullYear()! > 2014)\n    .map((row) => [groupFunc(row), row.game, tooltip(row), row.startDate, row.endDate]);\n\n  let chartHeight: string;\n\n  if (groupData) chartHeight = \"55vh\";\n  else chartHeight = \"30vh\";\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n          <Chart\n            key={chartHeight}\n            width=\"400vw\"\n            height={chartHeight}\n            chartType=\"Timeline\"\n            data={timelineHeader.concat(gameData)}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: inline-block\">\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${row.game}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${row.hours}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Days: </b></span>\n                <span>${row.numDays || \"-\"}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nexport default Timeline;\n","import { FilterAlt, AllInclusive, QuestionMark, CatchingPokemon, Timer, Functions } from \"@mui/icons-material\";\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction, Stack, Fab } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { Measure, Predicate, VideoGame } from \"./types\";\n\nconst Filter = ({\n  setFilterFunc,\n  measure,\n  setMeasure,\n}: {\n  setFilterFunc: (func: () => Predicate<VideoGame>) => void;\n  measure: Measure;\n  setMeasure: (measure: Measure) => void;\n}) => {\n  const [filterEndless, setFilterEndless] = useState(false);\n  const [filterPokemon, setFilterPokemon] = useState(false);\n  const [filterUnconfirmed, setFilterUnconfirmed] = useState(false);\n\n  useEffect(() => {\n    const filters = [\n      filterEndless ? ({ status }: VideoGame) => status !== \"Endless\" : () => true,\n      filterPokemon ? ({ franchise }: VideoGame) => franchise !== \"Pokémon\" : () => true,\n      filterUnconfirmed\n        ? ({ platform, startDate }: VideoGame) => {\n          if (platform === \"PC\") {\n            if (!startDate?.getFullYear() || startDate?.getFullYear() < 2015) return false;\n          } else if (\n            platform !== \"Nintendo Switch\" &&\n            platform !== \"Nintendo 3DS\" &&\n            platform !== \"PlayStation 4\" &&\n            platform !== \"PlayStation 5\"\n          ) return false;\n\n          return true;\n        }\n        : () => true,\n    ];\n    setFilterFunc(() => (vgData: VideoGame) => filters.reduce((p, c) => p && c(vgData), true));\n  }, [filterEndless, filterPokemon, filterUnconfirmed, setFilterFunc]);\n\n  const fabProps = (enabled: boolean) =>\n    enabled ? { sx: { backgroundColor: \"primary.light\", \"&:hover\": { backgroundColor: \"primary.dark\" } } } : {};\n\n  return (\n    <Stack\n      direction=\"column\"\n      spacing={2}\n      sx={{ position: \"fixed\", right: (theme) => theme.spacing(2), bottom: (theme) => theme.spacing(2) }}\n    >\n      <SpeedDial icon={<SpeedDialIcon icon={<FilterAlt />} />} ariaLabel=\"add\">\n        <SpeedDialAction\n          FabProps={fabProps(filterEndless)}\n          tooltipOpen\n          tooltipTitle=\"Endless\"\n          icon={<AllInclusive />}\n          onClick={() => setFilterEndless(!filterEndless)}\n        />\n        <SpeedDialAction\n          FabProps={fabProps(filterUnconfirmed)}\n          tooltipOpen\n          tooltipTitle=\"Unconfirmed\"\n          icon={<QuestionMark />}\n          onClick={() => setFilterUnconfirmed(!filterUnconfirmed)}\n        />\n        <SpeedDialAction\n          FabProps={fabProps(filterPokemon)}\n          tooltipOpen\n          tooltipTitle=\"Pokemon\"\n          icon={<CatchingPokemon />}\n          onClick={() => setFilterPokemon(!filterPokemon)}\n        />\n      </SpeedDial>\n      <Fab color=\"secondary\" onClick={() => setMeasure(measure === \"Count\" ? \"Hours\" : \"Count\")}>\n        {measure === \"Count\" ? <Functions /> : <Timer />}\n      </Fab>\n    </Stack>\n  );\n};\n\nexport default Filter;\n","import { Functions, Pause, PlayArrow, ShowChart, SkipNext, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Stack,\n  CardMedia,\n} from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Fragment } from \"react\";\nimport { VideoGame } from \"./types\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <TotalGames data={data} />\n      <TotalTime data={data} />\n      <ThisYearSoFar data={data} />\n      <AverageTimePerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst format = new Intl.NumberFormat().format;\n\nconst TotalTime = ({ data }: { data: VideoGame[] }) => {\n  const total = format(data.filter((game) => game.hours).reduce((pre, cur) => pre + parseInt(cur.hours!), 0));\n  return <StatCard icon={<Timer />} title=\"Time Gamed\" content={`${total} Hours`} />;\n};\n\nconst TotalGames = ({ data }: { data: VideoGame[] }) => {\n  const total = format(data.length);\n  return <StatCard icon={<Functions />} title=\"Number of Games\" content={total} />;\n};\n\nconst AverageTimePerGame = ({ data }: { data: VideoGame[] }) => {\n  const total = format(\n    Math.round(data.filter((game) => game.hours).reduce((pre, cur) => pre + parseInt(cur.hours!), 0) / data.length)\n  );\n  return <StatCard icon={<ShowChart />} title=\"Avg Time per Game\" content={`${total} Hours`} />;\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const total = format(\n    data\n      .filter((game) => game.startDate?.getFullYear() === new Date().getFullYear() && game.hours)\n      .reduce((pre, cur) => pre + parseInt(cur.hours!), 0)\n  );\n  return <StatCard icon={<Update />} title=\"This Year So Far\" content={`${total} Hours`} />;\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.endDate! < b.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Pause />} title=\"Recently Finished\" content={recent} />;\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (parseInt(a.hours!) < parseInt(b.hours!) ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Whatshot />} title=\"Most Played\" content={most} />;\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1))[0];\n  return (\n    <Grid xs={12} md={4}>\n      <Stack direction=\"column\" spacing={1} sx={{ height: \"100%\" }}>\n        <Card sx={{ flex: \"0 1 auto\" }}>\n          <CardHeader\n            titleTypographyProps={{ variant: \"h6\" }}\n            title=\"Currently Playing\"\n            subheader={`Started ${recent.startDate?.toLocaleDateString()}`}\n            avatar={<PlayArrow />}\n          />\n          <CardMedia component=\"img\" src=\"https://images.launchbox-app.com/593bbec1-bacd-4d34-b67e-debbdc892286.jpg\" />\n        </Card>\n        <Card sx={{ flex: \"1 1 auto\" }}>\n          <CardHeader\n            titleTypographyProps={{ variant: \"h6\" }}\n            title=\"Next Up\"\n            subheader={`Releases ${new Date(\"11/10/2022\").toLocaleDateString()}`}\n            avatar={<SkipNext />}\n          />\n          <CardMedia component=\"img\" src=\"https://images.launchbox-app.com/76ef597d-d0a3-4baa-ac5e-0f00da125e65.jpg\" />\n        </Card>\n      </Stack>\n    </Grid>\n  );\n};\n\nconst StatList = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: VideoGame[];\n}) => {\n  return (\n    <Grid xs={6} md={4}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <List>\n            {content.map((game) => (\n              <Fragment key={game.game}>\n                <Divider variant=\"middle\" component=\"li\" />\n                <ListItem>\n                  <ListItemText\n                    secondaryTypographyProps={{ component: \"span\" }}\n                    primary={game.game}\n                    secondary={\n                      <Stack direction={{ xs: \"column\", md: \"row\" }} justifyContent=\"space-between\">\n                        <Typography>{game.endDate?.toLocaleDateString()}</Typography>\n                        <Typography>{`${format(parseInt(game.hours!))} Hours`}</Typography>\n                      </Stack>\n                    }\n                  />\n                </ListItem>\n              </Fragment>\n            ))}\n            <Divider variant=\"middle\" component=\"li\" />\n          </List>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string;\n}) => {\n  return (\n    <Grid xs={6} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Typography align=\"right\" variant=\"h4\">\n            {content}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Plot from \"../plotly\"\nimport { SelectBox } from \"./SelectionComponents\";\nimport { isVideoGame, KeysMatching, Measure, VideoGame, VideoGameTree } from \"./types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n}\n\nconst isStringArray = (x: any[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [{ ids, labels, parents, values }, setSunburstData] = useState<SunburstData>({\n    ids: [],\n    labels: [],\n    parents: [],\n    values: [],\n  });\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Sunburst\"\n        action={<SunBurstControls data={data} setSunburstData={setSunburstData} measure={measure} />}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{ margin: { l: 0, r: 0, b: 0, t: 0 } }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"game\",\n  \"platform\",\n  \"publisher\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  data,\n  setSunburstData,\n  measure,\n}: {\n  data: VideoGame[];\n  setSunburstData: (d: SunburstData) => void;\n  measure: Measure;\n}) => {\n  const groups = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\")\n  ];\n  const groupVals = groups.map(([val]) => val);\n\n  useEffect(() => {\n    const sunburstData = dataToSunburstData(data, groupVals, measure);\n    setSunburstData(sunburstData);\n    // eslint-disable-next-line\n  }, [setSunburstData, data, measure, ...groupVals]);\n\n  return (\n    <FormGroup>\n      {groups.map(([val, setVal]) => (\n        <SelectBox options={options} key={val} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      if (measure === \"Hours\" && curr.hours === undefined) return false;\n      return true;\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.game] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string) => {\n    let total = 0;\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? parseInt(value.hours!) : 1;\n        } else {\n          count = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        total += count;\n      });\n\n    return total;\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n  };\n};\n\nexport default Sunburst;\n","export type KeysMatching<T, V> = keyof { [P in keyof T as T[P] extends V ? P : never]: P };\nexport type Predicate<T> = (input: T) => boolean;\n\nexport interface VideoGame {\n  game: string;\n  platform: Platform;\n  company: Company;\n  publisher: string;\n  franchise: string;\n  genre: string[];\n  theme: string[];\n  rating: string;\n  format: Format;\n  status: Status;\n  exactDate: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  hours?: string;\n  numDays?: number;\n}\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.game;\n\nexport type Measure = \"Hours\" | \"Count\";\n","import { ThemeProvider } from \"@emotion/react\";\nimport { createTheme, Stack } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nimport Barchart from \"./vg/Barchart\";\nimport Timeline from \"./vg/Timeline\";\nimport Filter from \"./vg/Filter\";\nimport Stats from \"./vg/Stats\";\nimport Sunburst from \"./vg/Sunburst\";\nimport { Company, Format, Measure, Platform, Predicate, Status, VideoGame } from \"./vg/types\";\n\nconst GamesGraphs = () => {\n  const [data, setData] = useState<Record<string, string>[]>();\n  const [filterFunc, setFilterFunc] = useState<Predicate<VideoGame>>(() => () => true);\n  const [measure, setMeasure] = useState<Measure>(\"Count\");\n\n  useEffect(() => getVgData(setData), []);\n\n  if (!data) {\n    console.log(\"no data\");\n    return null;\n  }\n\n  const vgData: VideoGame[] = data\n    .map((row) => {\n      const startDate = row[\"Start Date\"] ? new Date(row[\"Start Date\"]) : undefined;\n      let endDate = row[\"End Date\"] ? new Date(row[\"End Date\"]) : undefined;\n      if (endDate && row[\"End Date\"].length < 5) endDate.setFullYear(endDate.getFullYear() + 1);\n      endDate = startDate && (endDate || new Date())\n      return {\n        game: row[\"Game\"],\n        platform: row[\"Platform\"] as Platform,\n        company: row[\"Platform\"].split(\" \")[0]! as Company,\n        franchise: row[\"Franchise\"],\n        genre: row[\"Genre\"].split(\"\\n\"),\n        theme: row[\"Theme\"].split(\"\\n\"),\n        format: row[\"Format\"] as Format,\n        publisher: row[\"Publisher\"],\n        rating: row[\"Rating\"],\n        status: row[\"Status\"] as Status,\n        exactDate: !!row[\"Start Date\"] && row[\"Start Date\"].length > 5,\n        startDate: startDate,\n        endDate: endDate,\n        hours: row[\"Hours\"],\n        numDays: dateDiffInDays(startDate, endDate),\n      };\n    })\n    .filter(filterFunc);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Stack spacing={2}>\n        <Stats data={vgData} />\n        <Timeline data={vgData} />\n        <Sunburst data={vgData} measure={measure} />\n        <Barchart data={vgData} measure={measure} />\n        <Filter setFilterFunc={setFilterFunc} measure={measure} setMeasure={setMeasure} />\n      </Stack>\n    </ThemeProvider>\n  );\n};\n\nconst theme = createTheme({\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: ({ theme }) => ({\n          \"&:hover\": {\n            boxShadow: theme.shadows[4],\n          },\n        }),\n      },\n    },\n  },\n});\n\nconst arrayToJson = (data: string[][]) => {\n  const [header, ...rows] = data;\n  return rows.map((row) =>\n    row.reduce((json, val, index) => {\n      json[header[index]] = val\n      return json\n    }, {} as Record<string, string>)\n  );\n};\n\nconst getVgData = (setData: (b: Record<string, string>[]) => void) => {\n  gapi.client.sheets.spreadsheets.values\n    .get({\n      spreadsheetId: \"1JCAN_lB2QaVxj1rD4f88mN4tHjmhxF3CZlGtZGwYCLk\",\n      range: \"Games List!A:Z\",\n    })\n    .then((response) => response.result.values!)\n    .then(arrayToJson)\n    .then(setData);\n};\n\nconst dateDiffInDays = (dt1?: Date, dt2?: Date) => {\n  if (!dt1 || !dt2) return;\n  return Math.floor(\n    (dt2.getTime() - dt1.getTime()) /\n    (1000 * 60 * 60 * 24) + 1\n  );\n};\n\nexport default GamesGraphs;\n"],"names":["Plotly","bar","sunburst","createPlotlyComponent","SelectBox","options","value","setValue","Select","variant","onChange","event","target","map","option","MenuItem","data","measure","useState","group","setGroup","grouped","reduce","tree","game","groupVal","year","startDate","getFullYear","toString","hours","parseInt","Card","CardHeader","title","action","CardContent","style","width","height","Object","entries","val","type","name","x","keys","y","values","config","displayModeBar","responsive","layout","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","tooltip","row","toLocaleDateString","endDate","numDays","chartHeight","groupData","setGroupData","groupFunc","company","gameData","filter","exactDate","FormGroup","FormControlLabel","label","control","Switch","checked","_","overflowX","overflowY","chartType","id","role","concat","setFilterFunc","setMeasure","filterEndless","setFilterEndless","filterPokemon","setFilterPokemon","filterUnconfirmed","setFilterUnconfirmed","useEffect","filters","status","franchise","platform","vgData","p","c","fabProps","enabled","sx","backgroundColor","Stack","direction","spacing","position","right","theme","bottom","SpeedDial","icon","SpeedDialIcon","FilterAlt","ariaLabel","SpeedDialAction","FabProps","tooltipOpen","tooltipTitle","AllInclusive","onClick","QuestionMark","CatchingPokemon","Fab","color","Functions","Timer","format","Intl","NumberFormat","TotalTime","total","pre","cur","StatCard","content","TotalGames","length","AverageTimePerGame","Math","round","ShowChart","ThisYearSoFar","Date","Update","RecentlyComplete","recent","a","sort","slice","StatList","Pause","MostPlayed","most","Whatshot","CurrentlyPlaying","xs","md","flex","titleTypographyProps","subheader","avatar","PlayArrow","CardMedia","component","src","SkipNext","List","Fragment","Divider","ListItem","ListItemText","secondaryTypographyProps","primary","secondary","justifyContent","Typography","align","container","alignItems","SunBurstControls","setSunburstData","groups","groupVals","sunburstData","dataToSunburstData","setVal","curr","undefined","key","keyToVal","every","i","obj","forEach","ids","labels","parents","recurseGroup","parent","val2","localeCompare","count","push","branchvalues","maxdepth","createTheme","components","MuiCard","styleOverrides","root","boxShadow","shadows","arrayToJson","header","json","index","getVgData","setData","gapi","client","sheets","spreadsheets","get","spreadsheetId","range","then","response","result","dateDiffInDays","dt1","dt2","floor","getTime","filterFunc","console","log","setFullYear","split","genre","publisher","rating"],"sourceRoot":""}