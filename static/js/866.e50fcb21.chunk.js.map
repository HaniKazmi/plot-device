{"version":3,"file":"static/js/866.e50fcb21.chunk.js","mappings":"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","sources":["../node_modules/@mui/material/esm/Card/cardClasses.js","../node_modules/@mui/material/esm/Card/Card.js","../node_modules/@mui/material/esm/CardContent/cardContentClasses.js","../node_modules/@mui/material/esm/CardContent/CardContent.js","../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../node_modules/@babel/runtime/helpers/esm/createClass.js","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","../node_modules/react-google-charts/src/hooks/useLoadGoogleCharts.ts","../node_modules/react-google-charts/src/hooks/useLoadScript.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/react-google-charts/src/default-props.ts","../node_modules/react-google-charts/src/generate-unique-id.ts","../node_modules/react-google-charts/src/constants.ts","../node_modules/react-google-charts/src/load-data-table-from-spreadsheet.ts","../node_modules/react-google-charts/src/Context.tsx","../node_modules/react-google-charts/src/components/GoogleChartDataTable.tsx","../node_modules/react-google-charts/src/components/GoogleChartEvents.tsx","../node_modules/react-google-charts/src/components/GoogleChart.tsx","../node_modules/react-google-charts/src/ReactGoogleCharts.tsx","../node_modules/react-google-charts/src/types.ts","../node_modules/react-google-charts/src/index.tsx"],"sourcesContent":["import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardUtilityClass(slot) {\n  return generateUtilityClass('MuiCard', slot);\n}\nconst cardClasses = generateUtilityClasses('MuiCard', ['root']);\nexport default cardClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"raised\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes } from '@mui/utils';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport Paper from '../Paper';\nimport { getCardUtilityClass } from './cardClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardUtilityClass, classes);\n};\n\nconst CardRoot = styled(Paper, {\n  name: 'MuiCard',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    overflow: 'hidden'\n  };\n});\nconst Card = /*#__PURE__*/React.forwardRef(function Card(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCard'\n  });\n\n  const {\n    className,\n    raised = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    raised\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardRoot, _extends({\n    className: clsx(classes.root, className),\n    elevation: raised ? 8 : undefined,\n    ref: ref,\n    ownerState: ownerState\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? Card.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the card will use raised styling.\n   * @default false\n   */\n  raised: chainPropTypes(PropTypes.bool, props => {\n    if (props.raised && props.variant === 'outlined') {\n      return new Error('MUI: Combining `raised={true}` with `variant=\"outlined\"` has no effect.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default Card;","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getCardContentUtilityClass(slot) {\n  return generateUtilityClass('MuiCardContent', slot);\n}\nconst cardContentClasses = generateUtilityClasses('MuiCardContent', ['root']);\nexport default cardContentClasses;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"className\", \"component\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getCardContentUtilityClass } from './cardContentClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes\n  } = ownerState;\n  const slots = {\n    root: ['root']\n  };\n  return composeClasses(slots, getCardContentUtilityClass, classes);\n};\n\nconst CardContentRoot = styled('div', {\n  name: 'MuiCardContent',\n  slot: 'Root',\n  overridesResolver: (props, styles) => styles.root\n})(() => {\n  return {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  };\n});\nconst CardContent = /*#__PURE__*/React.forwardRef(function CardContent(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiCardContent'\n  });\n\n  const {\n    className,\n    component = 'div'\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    component\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(CardContentRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default CardContent;","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"],"names":["getCardUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","CardRoot","styled","Paper","name","overridesResolver","props","styles","root","overflow","React","inProps","ref","useThemeProps","className","raised","other","_objectWithoutPropertiesLoose","ownerState","_extends","classes","composeClasses","useUtilityClasses","_jsx","clsx","elevation","undefined","getCardContentUtilityClass","CardContentRoot","padding","paddingBottom","component","as","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","_toArray","arr","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","F","s","n","done","value","e","_e","f","err","normalCompletion","didErr","call","step","next","_e2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","_inherits","subClass","superClass","create","constructor","setPrototypeOf","_getPrototypeOf","getPrototypeOf","bind","__proto__","_possibleConstructorReturn","self","assertThisInitialized","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","result","Super","NewTarget","this","useLoadGoogleCharts","param","src","onLoad","onError","chartVersion","chartPackages","chartLanguage","mapsApiKey","useState","googleCharts","setGoogleCharts","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","LoadGoogleCharts","excluded","objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","Provider","Consumer","ContextProvider","children","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","state","hiddenColumns","listenToLegendToggle","googleChartWrapper","events","addListener","selection","getChart","getSelection","dataTable","row","columnIndex","column","columnID","getColumnID","includes","setState","colID","applyFormatters","formatters","formatter","type","ArrowFormat","format","BarFormat","vizFormatter","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","computeDiff","DataTable","columnCount","getNumberOfColumns","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","chart","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","colors","from","map","dontcare","onResize","componentDidMount","componentWillUnmount","removeAllListeners","componentDidUpdate","GoogleChartDataTable","shouldComponentUpdate","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","toolbar_ref","getGraphID","instanceGraphID","graph_id","getControlID","index","addControls","controls","control","controlIDMaybe","controlID","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","chartControl","controlEvents","removeListener","controlWrapper","renderChart","width","height","style","divStyle","div","renderControl","_this1","getContainerId","renderToolBar","toolbarItems","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","chartEditor","ChartEditor","setControlType","nextProps","nextState","renderToolbar","controlPosition","Chart","_isMounted","loadingStatus","isFullyLoaded","onSuccess","setInterval","clearInterval","loader","errorElement","defaultProps","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"sourceRoot":""}