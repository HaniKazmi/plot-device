{"version":3,"file":"static/js/579.1d5e55b3.chunk.js","mappings":"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","sources":["common/Barchart.tsx","common/Card.tsx","common/Finished.tsx","common/Stats.tsx","common/Timeline.tsx","plotly.ts","show/Barchart.tsx","show/Stats.tsx","show/Timeline.tsx","show/Graphs.tsx","utils/mathUtils.ts","vg/SelectionComponents.tsx"],"sourcesContent":["import { Card, CardContent, useTheme } from \"@mui/material\";\nimport Plot from \"../plotly\";\nimport { ReactNode } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { Grouped } from \"../vg/Barchart\";\n\nconst Barchart = ({\n  grouped,\n  colours,\n  cumulative,\n  stack,\n  children,\n}: {\n  grouped: Grouped;\n  colours?: Record<string, string>\n  cumulative: boolean;\n  stack: boolean;\n  children?: ReactNode;\n}) => {\n  const theme = useTheme();\n  let data: Grouped;\n  if (cumulative) {\n    data = convertToCumulative(grouped);\n    stack = true;\n  } else {\n    data = grouped;\n  }\n\n  return (\n    <Card>\n      {children}\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(data).map(([group, { color, data: val }]) => ({\n            type: cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n            marker: {\n              color: Object.entries(data).length === 1 ? theme.palette.primary.main : color\n            }\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: Object.keys(grouped).length > 1 && Object.keys(grouped).length < 8,\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            plot_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            font: {\n              color: theme.palette.text.primary,\n            },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst convertToCumulative = (grouped: Grouped) => {\n  return Object.entries(grouped).reduce((prev, [key, { color, data: group }]) => {\n    prev[key] = { color: color, data: {} };\n    let lastAmount = 0;\n    const minYearMonth = Object.keys(group).sort()[0];\n    const [minYear, minMonth] = minYearMonth.split(\"-\").map((s) => parseInt(s));\n    for (let i = minYear; i <= CURRENT_YEAR; i++) {\n      for (let j = i === minYear ? minMonth : 1; j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1 : 12); j++) {\n        const yearMonth = i + \"-\" + (j < 10 ? \"0\" : \"\") + j;\n        lastAmount = prev[key].data[yearMonth] = lastAmount + (group[yearMonth] || 0);\n      }\n    }\n    return prev;\n  }, {} as Grouped);\n};\n\nexport default Barchart;\n","import { CardMedia, Chip, Dialog, SxProps, Theme } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport const CardMediaImage = ({\n  image,\n  alt,\n  chip,\n  ...props\n}: {\n  image?: string;\n  alt: string;\n  chip?: [string?, string?];\n  height?: string;\n  width?: string;\n  sx?: SxProps<Theme>;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  return (\n    <>\n      <div style={{ position: \"relative\", height: props.height, width: props.width }}>\n        <CardMedia component=\"img\" src={image} alt={alt} onClick={() => setDialogOpen(true)} {...props} />\n        {chip &&\n          <Chip sx={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            margin: 1,\n            opacity: 0.8,\n            bgcolor: chip[1],\n            color: (theme) => chip[1] && theme.palette.getContrastText(chip[1])\n          }} label={chip[0]} variant=\"filled\" size=\"small\" />\n        }\n      </div>\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth={false}\n        PaperProps={{ sx: { backgroundColor: \"unset\", boxShadow: \"unset\", backgroundImage: \"unset\" } }}\n      >\n        <img\n          style={{ maxHeight: \"calc(100vh - 64px)\", objectFit: \"contain\", maxWidth: \"100%\", width: \"100vw\" }}\n          src={image}\n          alt={alt}\n          onClick={() => setDialogOpen(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n","import { Card, CardHeader, CardContent, FormGroup, FormControlLabel, Switch, Dialog } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { useEffect, useState } from \"react\";\nimport { CardMediaImage } from \"./Card\";\n\nconst Finished = <U extends { banner?: string; startDate?: Date; name: string }>({\n  title,\n  data,\n  width,\n  colour\n}: {\n  title: string;\n  data: U[];\n  width: number;\n  colour?: (item: U) => string\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [mounted, setMounted] = useState(false);\n  useEffect(() =>  setMounted(true), [] )\n  if (!mounted) return null;\n  const recent = data.filter((show) => show.banner).sortByKey(\"startDate\");\n  const content = (\n    <>\n      <CardHeader\n        title={title}\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Maximise\"\n              control={<Switch checked={dialogOpen} onChange={(_, checked) => setDialogOpen(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          {recent.map((item) => (\n            <Grid alignSelf=\"stretch\" key={item.name} xs={dialogOpen ? 12 : width}>\n              <Card sx={{ height: \"100%\", borderColor: colour && colour(item) + 90, borderStyle: colour && \"solid\", borderWidth: colour && 3 }}>\n                <CardMediaImage image={item.banner} height=\"100%\" alt={item.name} />\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </>\n  );\n\n  return (\n    <Card>\n      {content}\n      <Dialog open={dialogOpen} fullScreen>\n        {content}\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default Finished;\n","import { Card, CardContent, CardHeader, Divider, Stack, Theme, Typography, useMediaQuery } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"../vg/types\";\nimport { Show } from \"../show/types\";\nimport { CardMediaImage } from \"./Card\";\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string | [string, number][];\n}) => {\n  const formattedContent =\n    typeof content === \"string\" ? (\n      <Typography align=\"right\" variant=\"h4\">\n        {content}\n      </Typography>\n    ) : (\n      <Stack divider={<Divider orientation=\"vertical\" flexItem />} justifyContent=\"space-evenly\" direction={\"row\"}>\n        {content.map(([key, val]) => (\n          <Stack key={key} direction={\"column\"} flex=\"1 1 0\">\n            <Typography align=\"center\" variant=\"h5\">\n              {format(val)}\n            </Typography>\n            <Typography align=\"center\" sx={{ fontSize: 14 }} color=\"text.secondary\">\n              {key}\n            </Typography>\n          </Stack>\n        ))}\n      </Stack>\n    );\n  return (\n    <Grid xs={12} sm={6} md={3} >\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader\n          titleTypographyProps={{ variant: \"h6\" }}\n          title={title}\n          avatar={icon}\n          sx={{ paddingBottom: \"5px\" }}\n        />\n        <CardContent sx={{ paddingTop: \"5px\" }}>{formattedContent}</CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport const StatList = <T extends VideoGame | Show, U>({\n  icon,\n  title,\n  content,\n  labelComponent,\n  chipComponent,\n  width = [12, 12, 6],\n  pictureWidth = [12, 4, 6],\n  aspectRatio,\n  divider,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: [T, U][] | T[];\n  labelComponent: (u: U) => string[][];\n  chipComponent?: (u: U) => [string, string];\n  width?: [number, number, number];\n  pictureWidth?: [number, number, number];\n  aspectRatio?: string;\n  divider?: boolean;\n}) => {\n  const dividerComponent = <Divider orientation=\"vertical\" flexItem />;\n  const matches = useMediaQuery<Theme>((theme) => theme.breakpoints.down('md'));\n  if (matches) {\n    // content = content.slice(0, 3)\n  }\n  return (\n    <Grid xs={width[0]} sm={width[1]} md={width[2]}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Grid container  sx={{ overflow: \"auto\", flexWrap: {xs: \"nowrap\", md: width[2] === 12 ? \"nowrap\" : \"wrap\"}}}  spacing={1} alignItems=\"center\">\n            {content.map((entry) => {\n              let game: T;\n              let input: U;\n              if (Array.isArray(entry)) {\n                game = entry[0];\n                input = entry[1];\n              } else {\n                game = entry;\n                input = entry as unknown as U;\n              }\n\n              const chip = chipComponent?.(input);\n              return (\n                <Grid flexShrink={0} alignSelf=\"stretch\" key={game.name} xs={pictureWidth[0]} sm={pictureWidth[1]} md={pictureWidth[2]} >\n                  <Card variant=\"outlined\" sx={{ height: \"100%\", bgcolor: chip && chip[1] + 80}}>\n                    <CardMediaImage image={game.banner} width=\"100%\" sx={{ aspectRatio, flexShrink: 0 }} alt={game.name} chip={chip} />\n                    <CardContent sx={{ padding: \"10px\", \":last-child\": { paddingBottom: \"10px\" } }}>\n                      {labelComponent(input).map((stacks, index, labbels) => (\n                        <Stack\n                          key={`${title}-stacks-${game.name}-${index}`}\n                          justifyContent=\"space-between\"\n                          alignItems=\"baseline\"\n                          direction=\"row\"\n                          divider={labbels.length === 1 || divider ? dividerComponent : null}\n                        >\n                          {stacks.map((val) => (\n                            <Typography key={val} variant=\"subtitle2\" color=\"text.secondary\">\n                              {val}\n                            </Typography>\n                          ))}\n                        </Stack>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n","import { Box, Card, CardContent, useTheme } from \"@mui/material\";\nimport { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\n\nconst DEFAULT_HEIGHT = 90;\n\nconst Timeline = ({\n    data,\n    children }: {\n        data: [string, string, string, Date, Date][],\n        children?: ReactNode;\n    }) => {\n    const [height, setHeight] = useState<string | number>(DEFAULT_HEIGHT + \"vh\");\n    const theme = useTheme();\n\n    const timelineHeader: any[] = [\n        [\n            { type: \"string\", id: \"*\" },\n            { type: \"string\", id: \"Name\" },\n            { type: \"string\", role: \"tooltip\" },\n            { type: \"date\", id: \"Start\" },\n            { type: \"date\", id: \"End\" },\n        ],\n    ];\n\n    const callback = useCallback(() => {\n        const labels = document.getElementsByTagName(\"text\");\n        for (let label of labels) {\n            if (label.getAttribute(\"text-anchor\") === \"middle\") {\n                label.setAttribute(\"fill\", theme.palette.text.secondary);\n            }\n        }\n\n        const rects = document.getElementsByTagName(\"rect\");\n        for (let rect of rects) {\n            if (rect.getAttribute(\"stroke\") === \"#9a9a9a\") {\n                const newHeight = rect.height.baseVal.value + 50;\n                setHeight(\n                    newHeight < document.documentElement.clientHeight * (DEFAULT_HEIGHT / 100) ? newHeight : DEFAULT_HEIGHT + \"vh\"\n                );\n            }\n        }\n    }, [theme.palette.text.secondary]);\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", callback);\n        return () => \n          window.removeEventListener(\"resize\", callback);\n      }, [callback]);\n\n    return (\n        <Box\n            sx={{\n                '.backgroundPaper': {\n                    backgroundColor: \"background.paper\"\n                }\n            }}\n        >\n            <Card>\n                {children}\n                <CardContent>\n                    <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n                        <Chart\n                            key={height}\n                            width=\"400vw\"\n                            height={height}\n                            chartType=\"Timeline\"\n                            data={timelineHeader.concat(data)}\n                            onLoad={() => {\n                                setTimeout(callback, 50);\n                            }}\n                            chartEvents={[{ eventName: \"ready\", callback }]}\n                            options={{\n                                backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.grey.A700 : undefined,\n                                timeline: { rowLabelStyle: { color: theme.palette.text.primary } },\n                            }}\n                        />\n                    </div>\n                </CardContent>\n            </Card>\n        </Box>\n    );\n};\n\nexport default Timeline;","import Plotly from \"plotly.js/lib/core\";\nimport bar from \"plotly.js/lib/bar\";\nimport sunburst from \"plotly.js/lib/sunburst\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst loadPlotly = () => {\n  Plotly.register([bar, sunburst]);\n  return createPlotlyComponent(Plotly);\n};\n\nexport default loadPlotly();\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"../vg//SelectionComponents\";\nimport { Measure, Season, Show, ShowStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\nimport { Grouped } from \"../vg/Barchart\";\n\nconst options: Record<ShowStringKeys | \"none\", boolean> = {\n  name: false,\n  status: true,\n  none: false,\n};\n\nconst ShowBarchart = ({ data, measure }: { data: Show[]; measure: Measure }) => {\n  const [group, setGroup] = useState<ShowStringKeys | \"none\">(\"none\");\n  const [cumulative, setCumulative] = useState(false);\n  let [stack, setStack] = useState(true);\n\n  let seasonArray = data.flatMap((show) => show.s.map((s) => [show, s] as [Show, Season]));\n  const grouped = groupDate(seasonArray, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Episodes\" ? \"Episodes Watched\" : \"Hours Watched\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (ShowStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (data: [Show, Season][], group: ShowStringKeys | \"none\", measure: Measure, cumulative: boolean): Grouped => {\n  const grouped = data.reduce((tree, [show, season]) => {\n    const groupVal = group === \"none\" ? \"\" : show[group];\n    const year = cumulative\n      ? season.startDate?.toISOString().substring(0, 7)\n      : season.startDate?.getFullYear().toString();\n    if (!year || !season.minutes) return tree;\n\n    tree[groupVal] ??= { color: '', data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Episodes\" ? season.e : season.minutes);\n    return tree;\n  }, {} as Grouped);\n\n  if (measure === \"Hours\") {\n    Object.values(grouped).forEach(({data: record}) =>\n      Object.entries(record).forEach(([key, value]) => (record[key] = Math.floor(value / 60)))\n    );\n  }\n\n  return grouped;\n};\n\nexport default ShowBarchart;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { Season, Show } from \"./types\";\nimport { StatCard, StatList } from \"../common/Stats\";\n\nconst Stats = ({ data }: { data: Show[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerShow data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: Show[] }) => {\n  const totalShows = data.length;\n  const totalEpisodes = data.sum(\"e\");\n  const totalTime = Math.floor(data.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Shows\", totalShows],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s).filter((s) => s.startDate.getFullYear() === CURRENT_YEAR);\n  const totalSeasons = filtered.length;\n  const totalEpisodes = filtered.sum(\"e\");\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Update />}\n      title=\"This Year So Far\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: Show[] }) => {\n  const grouped = data\n    .flatMap((show) => show.s)\n    .reduce((tree, s) => {\n      const year = s.startDate.getFullYear().toString();\n      if (!year || !s.minutes) return tree;\n      tree[year] ??= [0, 0, 0];\n      tree[year] = [tree[year][0] + 1, tree[year][1] + s.e, tree[year][2] + s.minutes];\n      return tree;\n    }, {} as Record<string, [number, number, number]>);\n\n  const seasons = Math.floor(Object.values(grouped).sum(0) / Object.keys(grouped).length);\n  const episodes = Math.floor(Object.values(grouped).sum(1) / Object.keys(grouped).length);\n  const hours = Math.floor(Object.values(grouped).sum(2) / Object.keys(grouped).length / 60);\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Averages Per Year\"\n      content={[\n        [\"Seasons\", seasons],\n        [\"Episodes\", episodes],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerShow = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s);\n  const totalSeasons = Math.round(filtered.length / data.length);\n  const totalEpisodes = Math.round(filtered.sum(\"e\") / data.length);\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60 / data.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Averages Per Show\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .flatMap((show) => show.s.map((s) => [show, s] as [Show, Season]))\n    .filter(([, season]) => season.endDate)\n    .sort(([, seasonA], [, seasonB]) => (seasonA.endDate! < seasonB.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      labelComponent={statsCardLabelStatsCardLabelRecentlyComplete}\n    />\n  );\n};\n\nconst statsCardLabelStatsCardLabelRecentlyComplete = (season: Season) => [\n  [`S ${season.s}`, season.endDate?.toLocaleDateString(undefined, { month: 'short', year: 'numeric', day: 'numeric'}) || \"\"],\n  [`${season.e} Eps`, `${format(Math.round(season.minutes! / 60))} Hours`],\n];\n\nconst CurrentlyPlaying = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .filter((show) => show.status === \"Watching\")\n    .map((show) => [show, show.s.at(-1)] as [Show, Season])\n    .filter(([_, season]) => !season.endDate)\n    .sort(([, seasonA], [, seasonB]) => (seasonA.startDate! < seasonB.startDate! ? 1 : -1))\n  return (\n    <StatList\n      icon={<PlayArrow />}\n      title=\"Currently Watching\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      labelComponent={statsCardLabelStatsCardLabelCurrentlyPlaying}\n    />\n  );\n};\n\nconst statsCardLabelStatsCardLabelCurrentlyPlaying = (season: Season) => [\n  [`S ${season.s}`, season.startDate?.toLocaleDateString() || \"\"],\n];\n\nexport default Stats;\n","import { CardHeader, FormGroup, FormControlLabel, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Season, Show } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst ShowTimeline = ({ data }: { data: Show[] }) => {\n  const [groupData, setGroupData] = useState(true);\n\n  const titleData: [string, Show | Season, string?][] = groupData\n    ? data.map(show => [show.name, show, show.banner])\n    : data.flatMap((show) => show.s.map((s) => [`${show.name} - S${s.s}`, s, show.banner] as [string, Season, string?]));\n\n  const showData: [string, string, string, Date, Date][] = titleData.map(([title, s, banner]) => [\n    \"*\",\n    title,\n    tooltip(title, s, banner),\n    s.startDate,\n    s.endDate || CURRENT_DATE,\n  ]);\n\n  return (\n    <Timeline data={showData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Combine Seasons\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (title: string, row: Show | Season, banner?: string) =>\n  `\n  <div style=\"display: flex;\" class=\"backgroundPaper\">\n    ${banner ? `<img src=\"${banner}\" style=\"height: 150px\" /><hr />` : ''}  \n    <div>     \n      <ul style=\"list-style-type: none;padding: 5px\">\n        <li>\n          <span><b>${title}</b></span>\n        </li>\n      </ul>\n      <hr />\n      <ul style=\"list-style-type: none;padding-left: 10px\">\n        <li>\n          <span><b>Hours: </b></span>\n          <span\">${Math.round(row.minutes / 60)}</span>\n        </li>\n        <li>\n          <span><b>Period: </b></span>\n          <span>${row.startDate.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n        </li>\n        <li>\n          <span><b>Episodes: </b></span>\n          <span>${row.e}</span>\n        </li>\n      </ul>\n    </div>     \n  </div>\n  `;\n\nexport default ShowTimeline;\n","import { Stack } from \"@mui/material\";\nimport Finished from \"../common/Finished\";\nimport Barchart from \"./Barchart\";\nimport Stats from \"./Stats\";\nimport Timeline from \"./Timeline\";\nimport { Show } from \"./types\";\n\nconst Graphs = ({ data }: { data: Show[] }) => (\n  <Stack spacing={2}>\n    <Stats data={data} />\n    <Timeline data={data} />\n    <Barchart data={data} measure={\"Hours\"} />\n    <Finished title=\"All Shows\" data={data} width={3} />\n  </Stack>\n);\n\nexport default Graphs;\n","export const format = new Intl.NumberFormat().format;\n","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n"],"names":["convertToCumulative","grouped","Object","entries","reduce","prev","_ref4","_ref5","_slicedToArray","key","_ref5$","color","group","data","lastAmount","_minYearMonth$split$m","keys","sort","split","map","s","parseInt","_minYearMonth$split$m2","minYear","minMonth","i","CURRENT_YEAR","j","CURRENT_MONTH","yearMonth","_ref","cumulative","colours","stack","children","theme","useTheme","_jsxs","Card","_jsx","CardContent","Plot","style","width","height","_ref2","_ref3","_ref3$","val","type","name","x","y","values","stackgroup","undefined","marker","length","palette","primary","main","config","displayModeBar","responsive","layout","showlegend","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","paper_bgcolor","mode","plot_bgcolor","font","text","CardMediaImage","image","alt","chip","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","dialogOpen","setDialogOpen","_Fragment","position","CardMedia","_objectSpread","component","src","onClick","Chip","sx","top","right","opacity","bgcolor","getContrastText","label","variant","size","Dialog","open","onClose","maxWidth","PaperProps","backgroundColor","boxShadow","backgroundImage","maxHeight","objectFit","title","colour","_useState3","_useState4","mounted","setMounted","useEffect","recent","filter","show","banner","sortByKey","content","CardHeader","action","FormGroup","row","FormControlLabel","control","Switch","checked","onChange","_","Grid","container","spacing","alignItems","item","alignSelf","xs","borderColor","borderStyle","borderWidth","fullScreen","StatCard","icon","formattedContent","Typography","align","Stack","divider","Divider","flexItem","justifyContent","direction","flex","format","fontSize","sm","md","titleTypographyProps","avatar","paddingBottom","paddingTop","StatList","labelComponent","chipComponent","_ref4$width","_ref4$pictureWidth","pictureWidth","aspectRatio","dividerComponent","useMediaQuery","breakpoints","down","overflow","flexWrap","entry","game","input","Array","isArray","flexShrink","padding","stacks","index","labbels","concat","DEFAULT_HEIGHT","setHeight","callback","useCallback","_step","labels","document","getElementsByTagName","_iterator","_createForOfIteratorHelper","n","done","value","getAttribute","setAttribute","secondary","err","e","f","_step2","rects","_iterator2","rect","newHeight","baseVal","documentElement","clientHeight","window","addEventListener","removeEventListener","Box","overflowX","overflowY","Chart","chartType","id","role","onLoad","setTimeout","chartEvents","eventName","options","grey","A700","timeline","rowLabelStyle","Plotly","bar","sunburst","createPlotlyComponent","status","none","groupDate","measure","tree","_season$startDate","_season$startDate2","_tree$groupVal","season","groupVal","year","startDate","toISOString","substring","getFullYear","toString","minutes","forEach","record","_ref6","Math","floor","setGroup","setCumulative","_useState5","_useState6","setStack","seasonArray","flatMap","Barchart","SelectBox","setValue","disabled","AllTime","totalShows","totalEpisodes","sum","totalTime","Timer","ThisYearSoFar","filtered","totalSeasons","Update","Averages","_tree$year","seasons","episodes","hours","ShowChart","AveragesPerShow","round","AutoGraph","RecentlyComplete","_ref7","endDate","_ref9","_ref10","seasonA","seasonB","slice","Pause","statsCardLabelStatsCardLabelRecentlyComplete","_season$endDate","toLocaleDateString","month","day","CurrentlyPlaying","_ref13","at","_ref14","_ref15","_ref16","_ref17","PlayArrow","statsCardLabelStatsCardLabelCurrentlyPlaying","tooltip","_row$endDate","groupData","setGroupData","showData","CURRENT_DATE","Timeline","Stats","Finished","Intl","NumberFormat","Select","event","target","option","MenuItem"],"sourceRoot":""}