{"version":3,"file":"static/js/442.8069cac9.chunk.js","mappings":"wMAuDMA,EAAc,SAACC,GACnBC,KAAKC,OAAOC,OAAOC,aAAaC,OAC7BC,IAAI,CACHC,cAAe,+CACfC,MAAO,eAERC,MAAK,SAACC,GAAD,OAAcA,EAASC,OAAON,MAA9B,IACLI,KAAKG,GACLH,KAAKT,EACT,EAEKY,EAAc,SAACC,GACnB,cAA0BA,GAAnBC,EAAP,KACA,OADA,WACYC,KAAI,SAACC,GACf,IAAMC,EAA+B,CAAC,EAEtC,OADAD,EAAIE,SAAQ,SAACC,EAAKC,GAAN,OAAiBH,EAAKH,EAAOM,IAAUD,CAAvC,IACLF,CACR,GACF,EAED,UAtEmB,WACjB,OAAwBI,EAAAA,EAAAA,YAAxB,eAAOR,EAAP,KAAab,EAAb,KAGA,IAFAsB,EAAAA,EAAAA,YAAU,kBAAMvB,EAAYC,EAAlB,GAA4B,KAEjCa,EAEH,OADAU,QAAQC,IAAI,WACL,KAGT,IAqBMC,EArBWZ,EACda,QAAO,SAACV,GAAD,MAAyB,KAAhBA,EAAG,IAAZ,IACPD,KAAI,SAACC,GACJ,MAAO,CACLW,KAAMX,EAAG,KACTY,OAAQZ,EAAG,OACXa,UAAWb,EAAG,MAAY,IAAIc,KAAKd,EAAG,YAAae,EACnDC,QAAShB,EAAG,IAAU,IAAIc,KAAKd,EAAG,KAAW,IAAIc,KACjDG,OAAQjB,EAAG,OAEd,IAaAD,KAAI,SAACC,GAAD,MAAS,CAAC,IAAKA,EAAIW,KAAMX,EAAIa,UAAWb,EAAIgB,QAA5C,IAEP,OACE,UAAC,IAAD,CAAME,QAAQ,WAAd,WACE,SAAC,IAAD,wBACA,SAAC,IAAD,WACE,gBAAKC,MAAO,CAAEC,SAAU,OAAQC,UAAW,QAA3C,UACE,SAAC,KAAD,CACEF,MAAO,CAAEG,MAAO,QAASC,OAAQ,SACjCC,UAAU,WACV3B,KArBkB,CAC1B,CACE,CAAE4B,KAAM,SAAUC,GAAI,KACtB,CAAED,KAAM,SAAUC,GAAI,QACtB,CAAED,KAAM,OAAQC,GAAI,SACpB,CAAED,KAAM,OAAQC,GAAI,SAgBKC,OAAOlB,WAMrC,C","sources":["vg/Show.tsx"],"sourcesContent":["import { Card, CardContent } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Platform } from \"./types\";\n\nconst ShowsGraph = () => {\n  const [data, setData] = useState<Record<string, string>[]>();\n  useEffect(() => getShowData(setData), []);\n\n  if (!data) {\n    console.log(\"no data\");\n    return null;\n  }\n\n  const showData = data\n    .filter((row) => row[\"Show\"] !== \"\")\n    .map((row) => {\n      return {\n        show: row[\"Show\"],\n        status: row[\"Status\"] as Platform,\n        startDate: row[\"Start\"] ? new Date(row[\"Start\"]) : undefined,\n        endDate: row[\"End\"] ? new Date(row[\"End\"]) : new Date(),\n        length: row[\"Length\"],\n      };\n    });\n\n  const timelineData: any[] = [\n    [\n      { type: \"string\", id: \"*\" },\n      { type: \"string\", id: \"Show\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const gameData = showData\n    // .filter(({ startDate }) => startDate?.getFullYear()! > 2014)\n    .map((row) => [\"*\", row.show, row.startDate, row.endDate]);\n\n  return (\n    <Card variant=\"outlined\">\n      <CardContent>TV Shows</CardContent>\n      <CardContent>\n        <div style={{ overflow: \"auto\", overflowY: \"clip\" }}>\n          <Chart\n            style={{ width: \"400vw\", height: \"100vh\" }}\n            chartType=\"Timeline\"\n            data={timelineData.concat(gameData)}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst getShowData = (setData: (b: Record<string, string>[]) => void) => {\n  gapi.client.sheets.spreadsheets.values\n    .get({\n      spreadsheetId: \"1M3om2DPLfRO5dKcUfYOIcSNoLThzMLp1iZLQX6qR3pY\",\n      range: \"Sheet1!A:H\",\n    })\n    .then((response) => response.result.values!)\n    .then(arrayToJson)\n    .then(setData);\n};\n\nconst arrayToJson = (data: string[][]) => {\n  const [header, ...rows] = data;\n  return rows.map((row) => {\n    const json: Record<string, string> = {};\n    row.forEach((val, index) => (json[header[index]] = val));\n    return json;\n  });\n};\n\nexport default ShowsGraph;\n"],"names":["getShowData","setData","gapi","client","sheets","spreadsheets","values","get","spreadsheetId","range","then","response","result","arrayToJson","data","header","map","row","json","forEach","val","index","useState","useEffect","console","log","gameData","filter","show","status","startDate","Date","undefined","endDate","length","variant","style","overflow","overflowY","width","height","chartType","type","id","concat"],"sourceRoot":""}