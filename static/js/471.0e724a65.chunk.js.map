{"version":3,"file":"static/js/471.0e724a65.chunk.js","mappings":"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","sources":["common/Barchart.tsx","common/Card.tsx","common/Finished.tsx","common/Stats.tsx","common/Timeline.tsx","plotly.ts","utils/mathUtils.ts","../node_modules/@mui/icons-material/esm/Whatshot.js","vg/types.ts","vg/Stats.tsx","vg/Sunburst.tsx","vg/Barchart.tsx","vg/Timeline.tsx","vg/Graphs.tsx","vg/SelectionComponents.tsx"],"sourcesContent":["import { Card, CardContent, useTheme } from \"@mui/material\";\nimport Plot from \"../plotly\";\nimport { ReactNode } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { Grouped } from \"../vg/Barchart\";\n\nconst Barchart = ({\n  grouped,\n  colours,\n  cumulative,\n  stack,\n  children,\n}: {\n  grouped: Grouped;\n  colours?: Record<string, string>\n  cumulative: boolean;\n  stack: boolean;\n  children?: ReactNode;\n}) => {\n  const theme = useTheme();\n  let data: Grouped;\n  if (cumulative) {\n    data = convertToCumulative(grouped);\n    stack = true;\n  } else {\n    data = grouped;\n  }\n\n  return (\n    <Card>\n      {children}\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(data).map(([group, { color, data: val }]) => ({\n            type: cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n            marker: {\n              color: Object.entries(data).length === 1 ? theme.palette.primary.main : color\n            }\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: Object.keys(grouped).length > 1 && Object.keys(grouped).length < 8,\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            plot_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            font: {\n              color: theme.palette.text.primary,\n            },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst convertToCumulative = (grouped: Grouped) => {\n  return Object.entries(grouped).reduce((prev, [key, { color, data: group }]) => {\n    prev[key] = { color: color, data: {} };\n    let lastAmount = 0;\n    const minYearMonth = Object.keys(group).sort()[0];\n    const [minYear, minMonth] = minYearMonth.split(\"-\").map((s) => parseInt(s));\n    for (let i = minYear; i <= CURRENT_YEAR; i++) {\n      for (let j = i === minYear ? minMonth : 1; j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1 : 12); j++) {\n        const yearMonth = i + \"-\" + (j < 10 ? \"0\" : \"\") + j;\n        lastAmount = prev[key].data[yearMonth] = lastAmount + (group[yearMonth] || 0);\n      }\n    }\n    return prev;\n  }, {} as Grouped);\n};\n\nexport default Barchart;\n","import { CardMedia, Chip, Dialog, SxProps, Theme } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport const CardMediaImage = ({\n  image,\n  alt,\n  chip,\n  ...props\n}: {\n  image?: string;\n  alt: string;\n  chip?: [string?, string?];\n  height?: string;\n  width?: string;\n  sx?: SxProps<Theme>;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  return (\n    <>\n      <div style={{ position: \"relative\", height: props.height, width: props.width }}>\n        <CardMedia component=\"img\" src={image} alt={alt} onClick={() => setDialogOpen(true)} {...props} />\n        {chip &&\n          <Chip sx={{\n            position: 'absolute',\n            top: 0,\n            right: 0,\n            margin: 1,\n            opacity: 0.8,\n            bgcolor: chip[1],\n            color: (theme) => chip[1] && theme.palette.getContrastText(chip[1])\n          }} label={chip[0]} variant=\"filled\" size=\"small\" />\n        }\n      </div>\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth={false}\n        PaperProps={{ sx: { backgroundColor: \"unset\", boxShadow: \"unset\", backgroundImage: \"unset\" } }}\n      >\n        <img\n          style={{ maxHeight: \"calc(100vh - 64px)\", objectFit: \"contain\", maxWidth: \"100%\", width: \"100vw\" }}\n          src={image}\n          alt={alt}\n          onClick={() => setDialogOpen(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n","import { Card, CardHeader, CardContent, FormGroup, FormControlLabel, Switch, Dialog } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { useEffect, useState } from \"react\";\nimport { CardMediaImage } from \"./Card\";\n\nconst Finished = <U extends { banner?: string; startDate?: Date; name: string }>({\n  title,\n  data,\n  width,\n  colour\n}: {\n  title: string;\n  data: U[];\n  width: number;\n  colour?: (item: U) => string\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [mounted, setMounted] = useState(false);\n  useEffect(() =>  setMounted(true), [] )\n  if (!mounted) return null;\n  const recent = data.filter((show) => show.banner).sortByKey(\"startDate\");\n  const content = (\n    <>\n      <CardHeader\n        title={title}\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Maximise\"\n              control={<Switch checked={dialogOpen} onChange={(_, checked) => setDialogOpen(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          {recent.map((item) => (\n            <Grid alignSelf=\"stretch\" key={item.name} xs={dialogOpen ? 12 : width}>\n              <Card sx={{ height: \"100%\", borderColor: colour && colour(item) + 90, borderStyle: colour && \"solid\", borderWidth: colour && 3 }}>\n                <CardMediaImage image={item.banner} height=\"100%\" alt={item.name} />\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </>\n  );\n\n  return (\n    <Card>\n      {content}\n      <Dialog open={dialogOpen} fullScreen>\n        {content}\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default Finished;\n","import { Card, CardContent, CardHeader, Divider, Stack, Theme, Typography, useMediaQuery } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"../vg/types\";\nimport { Show } from \"../show/types\";\nimport { CardMediaImage } from \"./Card\";\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string | [string, number][];\n}) => {\n  const formattedContent =\n    typeof content === \"string\" ? (\n      <Typography align=\"right\" variant=\"h4\">\n        {content}\n      </Typography>\n    ) : (\n      <Stack divider={<Divider orientation=\"vertical\" flexItem />} justifyContent=\"space-evenly\" direction={\"row\"}>\n        {content.map(([key, val]) => (\n          <Stack key={key} direction={\"column\"} flex=\"1 1 0\">\n            <Typography align=\"center\" variant=\"h5\">\n              {format(val)}\n            </Typography>\n            <Typography align=\"center\" sx={{ fontSize: 14 }} color=\"text.secondary\">\n              {key}\n            </Typography>\n          </Stack>\n        ))}\n      </Stack>\n    );\n  return (\n    <Grid xs={12} sm={6} md={3} >\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader\n          titleTypographyProps={{ variant: \"h6\" }}\n          title={title}\n          avatar={icon}\n          sx={{ paddingBottom: \"5px\" }}\n        />\n        <CardContent sx={{ paddingTop: \"5px\" }}>{formattedContent}</CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport const StatList = <T extends VideoGame | Show, U>({\n  icon,\n  title,\n  content,\n  labelComponent,\n  chipComponent,\n  width = [12, 12, 6],\n  pictureWidth = [12, 4, 6],\n  aspectRatio,\n  divider,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: [T, U][] | T[];\n  labelComponent: (u: U) => string[][];\n  chipComponent?: (u: U) => [string, string];\n  width?: [number, number, number];\n  pictureWidth?: [number, number, number];\n  aspectRatio?: string;\n  divider?: boolean;\n}) => {\n  const dividerComponent = <Divider orientation=\"vertical\" flexItem />;\n  const matches = useMediaQuery<Theme>((theme) => theme.breakpoints.down('md'));\n  if (matches) {\n    // content = content.slice(0, 3)\n  }\n  return (\n    <Grid xs={width[0]} sm={width[1]} md={width[2]}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Grid container  sx={{ overflow: \"auto\", flexWrap: {xs: \"nowrap\", md: width[2] === 12 ? \"nowrap\" : \"wrap\"}}}  spacing={1} alignItems=\"center\">\n            {content.map((entry) => {\n              let game: T;\n              let input: U;\n              if (Array.isArray(entry)) {\n                game = entry[0];\n                input = entry[1];\n              } else {\n                game = entry;\n                input = entry as unknown as U;\n              }\n\n              const chip = chipComponent?.(input);\n              return (\n                <Grid flexShrink={0} alignSelf=\"stretch\" key={game.name} xs={pictureWidth[0]} sm={pictureWidth[1]} md={pictureWidth[2]} >\n                  <Card variant=\"outlined\" sx={{ height: \"100%\", bgcolor: chip && chip[1] + 80}}>\n                    <CardMediaImage image={game.banner} width=\"100%\" sx={{ aspectRatio, flexShrink: 0 }} alt={game.name} chip={chip} />\n                    <CardContent sx={{ padding: \"10px\", \":last-child\": { paddingBottom: \"10px\" } }}>\n                      {labelComponent(input).map((stacks, index, labbels) => (\n                        <Stack\n                          key={`${title}-stacks-${game.name}-${index}`}\n                          justifyContent=\"space-between\"\n                          alignItems=\"baseline\"\n                          direction=\"row\"\n                          divider={labbels.length === 1 || divider ? dividerComponent : null}\n                        >\n                          {stacks.map((val) => (\n                            <Typography key={val} variant=\"subtitle2\" color=\"text.secondary\">\n                              {val}\n                            </Typography>\n                          ))}\n                        </Stack>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n","import { Box, Card, CardContent, useTheme } from \"@mui/material\";\nimport { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\n\nconst DEFAULT_HEIGHT = 90;\n\nconst Timeline = ({\n    data,\n    children }: {\n        data: [string, string, string, Date, Date][],\n        children?: ReactNode;\n    }) => {\n    const [height, setHeight] = useState<string | number>(DEFAULT_HEIGHT + \"vh\");\n    const theme = useTheme();\n\n    const timelineHeader: any[] = [\n        [\n            { type: \"string\", id: \"*\" },\n            { type: \"string\", id: \"Name\" },\n            { type: \"string\", role: \"tooltip\" },\n            { type: \"date\", id: \"Start\" },\n            { type: \"date\", id: \"End\" },\n        ],\n    ];\n\n    const callback = useCallback(() => {\n        const labels = document.getElementsByTagName(\"text\");\n        for (let label of labels) {\n            if (label.getAttribute(\"text-anchor\") === \"middle\") {\n                label.setAttribute(\"fill\", theme.palette.text.secondary);\n            }\n        }\n\n        const rects = document.getElementsByTagName(\"rect\");\n        for (let rect of rects) {\n            if (rect.getAttribute(\"stroke\") === \"#9a9a9a\") {\n                const newHeight = rect.height.baseVal.value + 50;\n                setHeight(\n                    newHeight < document.documentElement.clientHeight * (DEFAULT_HEIGHT / 100) ? newHeight : DEFAULT_HEIGHT + \"vh\"\n                );\n            }\n        }\n    }, [theme.palette.text.secondary]);\n\n    useEffect(() => {\n        window.addEventListener(\"resize\", callback);\n        return () => \n          window.removeEventListener(\"resize\", callback);\n      }, [callback]);\n\n    return (\n        <Box\n            sx={{\n                '.backgroundPaper': {\n                    backgroundColor: \"background.paper\"\n                }\n            }}\n        >\n            <Card>\n                {children}\n                <CardContent>\n                    <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n                        <Chart\n                            key={height}\n                            width=\"400vw\"\n                            height={height}\n                            chartType=\"Timeline\"\n                            data={timelineHeader.concat(data)}\n                            onLoad={() => {\n                                setTimeout(callback, 50);\n                            }}\n                            chartEvents={[{ eventName: \"ready\", callback }]}\n                            options={{\n                                backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.grey.A700 : undefined,\n                                timeline: { rowLabelStyle: { color: theme.palette.text.primary } },\n                            }}\n                        />\n                    </div>\n                </CardContent>\n            </Card>\n        </Box>\n    );\n};\n\nexport default Timeline;","import Plotly from \"plotly.js/lib/core\";\nimport bar from \"plotly.js/lib/bar\";\nimport sunburst from \"plotly.js/lib/sunburst\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst loadPlotly = () => {\n  Plotly.register([bar, sunburst]);\n  return createPlotlyComponent(Plotly);\n};\n\nexport default loadPlotly();\n","export const format = new Intl.NumberFormat().format;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"\n}), 'Whatshot');","import { KeysMatching } from \"../utils/types\";\n\ninterface VideoGameBase {\n  name: string;\n  platform: Platform;\n  company: Company;\n  publisher: string;\n  franchise: string;\n  genre: string;\n  theme: string[];\n  rating: string;\n  releaseDate: Date;\n  format: Format;\n  status: Status;\n  hours?: number;\n  numDays?: number;\n  banner?: string;\n}\n\ninterface VideoGameWithDate extends VideoGameBase {\n  exactDate: true;\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface VideoGameWithoutDate extends VideoGameBase {\n  exactDate: false;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport type VideoGame = VideoGameWithDate | VideoGameWithoutDate;\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\" | \"Next\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.name;\n\nexport type Measure = \"Hours\" | \"Count\";\n\nconst nintendoColour = '#e60012'\nconst playstationColour = '#0070cc'\nconst xboxColour = '#107c10'\nconst pcColour = '#b5a596'\nconst iosColour = '#555555'\n\n\n\nexport const companyToColor = ({ company }: VideoGame) => {\n  switch (company) {\n    case 'Nintendo':\n      return nintendoColour;\n    case 'PlayStation':\n      return playstationColour;\n    case 'Xbox':\n      return xboxColour;\n    case 'PC':\n      return pcColour;\n    case 'iOS':\n      return iosColour;\n  }\n}\n\nexport const platformToShort: (vg: VideoGame) => [string, string] = (vg) => {\n  switch (vg.platform) {\n    case 'PlayStation 2':\n      return [\"PS2\", companyToColor(vg)]\n    case 'PlayStation 3':\n      return [\"PS3\", companyToColor(vg)]\n    case 'PlayStation P':\n      return [\"PSP\", companyToColor(vg)]\n    case 'PlayStation 4':\n      return [\"PS4\", companyToColor(vg)]\n    case 'PlayStation 5':\n      return [\"PS5\", companyToColor(vg)]\n    case 'Nintendo Wii':\n      return [\"Wii\", companyToColor(vg)]\n    case 'Nintendo GBC':\n      return [\"GBC\", companyToColor(vg)]\n    case 'Nintendo GBA':\n      return [\"GBA\", companyToColor(vg)]\n    case 'Nintendo DS':\n      return [\"DS\", companyToColor(vg)]\n    case 'Nintendo 3DS':\n      return [\"3DS\", companyToColor(vg)]\n    case 'Nintendo Switch':\n      return [\"NSW\", companyToColor(vg)]\n    case 'PC':\n      return [\"PC\", companyToColor(vg)]\n    case 'iOS':\n      return [\"iOS\", companyToColor(vg)]\n    case 'Xbox 360':\n      return [\"360\", companyToColor(vg)]\n    default:\n      throw new Error(\"Unknown platform: \" + vg.platform);\n  }\n}\n","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame, platformToShort } from \"./types\";\nimport { StatCard, StatList } from \"../common/Stats\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce((tree, game) => {\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n    tree[year] ??= [0, 0];\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {} as Record<string, [number, number]>);\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2));\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2));\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Averages Per Year\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === \"Beat\" && game.hours && game.numDays);\n  const hours = Math.round(filtered.sum(\"hours\") / filtered.length);\n  const days = Math.round(filtered.sum(\"numDays\") / filtered.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Averages Per Game\"\n      content={[\n        [\"Hours\", hours],\n        [\"Days To Beat\", days],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  return (\n    <StatCard\n      icon={<Update />}\n      title=\"This Year So Far\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"endDate\")\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<Pause />}\n      aspectRatio={\"16/9\"}\n      divider\n      title=\"Recently Finished\"\n      content={recent}\n      labelComponent={StatsCardLabelMostPlayed}\n      chipComponent={platformToShort}\n    />\n  );\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"hours\")\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<Whatshot />}\n      aspectRatio={\"16/9\"}\n      divider\n      title=\"Most Played\"\n      content={most}\n      labelComponent={StatsCardLabelMostPlayed}\n      chipComponent={platformToShort}\n    />\n  );\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.status === \"Playing\")\n    .sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1))\n  return (\n    <StatList\n      icon={<PlayArrow />}\n      aspectRatio={\"16/9\"}\n      divider\n      title=\"Currently Playing\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[12, 4, 4]}\n      labelComponent={StatsCardLabelCurrentlyPlaying}\n      chipComponent={platformToShort}\n    />\n  );\n};\n\nconst StatsCardLabelMostPlayed = (game: VideoGame) => [\n  [game.endDate?.toLocaleDateString() || \"\", `${format(game.hours!)} Hours`],\n];\n\nconst StatsCardLabelCurrentlyPlaying = (game: VideoGame) => [\n  [game.startDate?.toLocaleDateString() || \"\", game.platform],\n];\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup, useTheme } from \"@mui/material\";\nimport { Dispatch, SetStateAction, useMemo, useState } from \"react\";\nimport Plot from \"../plotly\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, isVideoGame, Measure, VideoGame, VideoGameTree } from \"./types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n  colours: string[];\n}\n\nconst isStringArray = (x: any[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const theme = useTheme();\n  const controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][] = [useState<OptionKeys>(\"company\"), useState<OptionKeys>(\"platform\"), useState<OptionKeys>(\"franchise\")]\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const { ids, labels, parents, values, colours }: SunburstData = useMemo(() => dataToSunburstData(data, controlStates.map(([s]) => s), measure), [data, measure, ...controlStates]);\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Sunburst\"\n        action={<SunBurstControls controlStates={controlStates} />}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\", maxHeight: \"100vw\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n              marker: { line: { color: theme.palette.background.paper }, colors: colours },\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            margin: { l: 0, r: 0, b: 0, t: 0 },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"name\",\n  \"platform\",\n  \"publisher\",\n  \"genre\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  controlStates,\n}: {\n  controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][]\n}) => {\n  return (\n    <FormGroup>\n      {controlStates.map(([val, setVal], index) => (\n        <SelectBox options={options} key={\"sunburst-control-\" + index} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      if (measure === \"Hours\" && curr.hours === undefined) return false;\n      return true;\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.name] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n  const colours: string[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string): [number, string] => {\n    let total = 0;\n    let colour: string = '';\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n          if (groups[0] === 'company') {\n            colour = companyToColor(value)\n          }\n        } else {\n          [count, colour] = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        colours.push(colour);\n        total += count;\n      });\n\n    return [total, colour];\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n    colours\n  };\n};\n\nexport default Sunburst;\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { Measure, VideoGame, VideoGameStringKeys, companyToColor } from \"./types\";\nimport Barchart from \"../common/Barchart\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  name: false,\n  platform: true,\n  publisher: false,\n  rating: true,\n  status: true,\n  genre: true,\n};\n\nconst VgBarchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(true);\n  let [stack, setStack] = useState(true);\n\n  const grouped = groupDate(data, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nexport interface Grouped {\n  [key: string]: {\n    color: string,\n    data: Record<string, number>\n  }\n}\n\nconst groupDate = (data: VideoGame[], group: VideoGameStringKeys | \"none\", measure: Measure, cumulative: boolean): Grouped => {\n  const grouped = data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = cumulative ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] ??= { color: group === 'company' ? companyToColor(game) : '', data: {}};\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Grouped);\n\n  return grouped;\n};\n\nexport default VgBarchart;\n","import { CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst VgTimeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n  const gameData: [string, string, string, Date, Date][] = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [\n      groupFunc(row),\n      row.name,\n      tooltip(row),\n      row.startDate!,\n      row.endDate || CURRENT_DATE]);\n\n  return (\n    <Timeline data={gameData} >\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: flex; background-color: ${companyToColor(row)}\" class=\"backgroundPaper\">\n      <div>\n        <ul style=\"list-style-type: none;padding-left: 5px\">\n          <li>\n            <span><b>${row.name}</b></span>\n          </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n          <li>\n            <span><b>Hours: </b></span>\n            <span\">${row.hours}</span>\n          </li>\n          <li>\n            <span><b>Period: </b></span>\n            <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString() ?? 'present'} </span>\n          </li>\n          <li>\n            <span><b>Days: </b></span>\n            <span>${row.numDays || \"-\"}</span>\n          </li>\n        </ul>\n      </div>\n      ${row.banner ? `<img src=\"${row.banner}\" style=\"height: 150px\" /><hr />` : ''}\n    </div>\n  `;\n\nexport default VgTimeline;\n","import Stats from \"./Stats\";\nimport { Measure, VideoGame, companyToColor } from \"./types\";\nimport Sunburst from \"./Sunburst\";\nimport Barchart from \"./Barchart\";\nimport Finished from \"../common/Finished\";\nimport Timeline from \"./Timeline\";\nimport { Stack } from \"@mui/material\";\n\nconst Graphs = ({ vgData, measure }: { vgData: VideoGame[]; measure: Measure }) => (\n  <Stack spacing={2}>\n    <Stats data={vgData} />\n    <Timeline data={vgData} />\n    <Sunburst data={vgData} measure={measure} />\n    <Barchart data={vgData} measure={measure} />\n    <Finished title=\"All Games\" data={vgData} width={4} colour={(vg: VideoGame) => companyToColor(vg)} />\n  </Stack>\n);\n\nexport default Graphs;\n","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n"],"names":["convertToCumulative","grouped","Object","entries","reduce","prev","_ref4","_ref5","_slicedToArray","key","_ref5$","color","group","data","lastAmount","_minYearMonth$split$m","keys","sort","split","map","s","parseInt","_minYearMonth$split$m2","minYear","minMonth","i","CURRENT_YEAR","j","CURRENT_MONTH","yearMonth","_ref","cumulative","colours","stack","children","theme","useTheme","_jsxs","Card","_jsx","CardContent","Plot","style","width","height","_ref2","_ref3","_ref3$","val","type","name","x","y","values","stackgroup","undefined","marker","length","palette","primary","main","config","displayModeBar","responsive","layout","showlegend","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","paper_bgcolor","mode","plot_bgcolor","font","text","CardMediaImage","image","alt","chip","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","dialogOpen","setDialogOpen","_Fragment","position","CardMedia","_objectSpread","component","src","onClick","Chip","sx","top","right","opacity","bgcolor","getContrastText","label","variant","size","Dialog","open","onClose","maxWidth","PaperProps","backgroundColor","boxShadow","backgroundImage","maxHeight","objectFit","title","colour","_useState3","_useState4","mounted","setMounted","useEffect","recent","filter","show","banner","sortByKey","content","CardHeader","action","FormGroup","row","FormControlLabel","control","Switch","checked","onChange","_","Grid","container","spacing","alignItems","item","alignSelf","xs","borderColor","borderStyle","borderWidth","fullScreen","StatCard","icon","formattedContent","Typography","align","Stack","divider","Divider","flexItem","justifyContent","direction","flex","format","fontSize","sm","md","titleTypographyProps","avatar","paddingBottom","paddingTop","StatList","labelComponent","chipComponent","_ref4$width","_ref4$pictureWidth","pictureWidth","aspectRatio","dividerComponent","useMediaQuery","breakpoints","down","overflow","flexWrap","entry","game","input","Array","isArray","flexShrink","padding","stacks","index","labbels","concat","DEFAULT_HEIGHT","setHeight","callback","useCallback","_step","labels","document","getElementsByTagName","_iterator","_createForOfIteratorHelper","n","done","value","getAttribute","setAttribute","secondary","err","e","f","_step2","rects","_iterator2","rect","newHeight","baseVal","documentElement","clientHeight","window","addEventListener","removeEventListener","Box","overflowX","overflowY","Chart","chartType","id","role","onLoad","setTimeout","chartEvents","eventName","options","grey","A700","timeline","rowLabelStyle","Plotly","bar","sunburst","createPlotlyComponent","Intl","NumberFormat","createSvgIcon","d","companyToColor","company","platformToShort","vg","platform","Error","AllTime","filtered","hours","time","sum","games","Timer","Averages","tree","_game$startDate","_tree$year","year","startDate","getFullYear","toString","parseFloat","toFixed","ShowChart","AveragesPerGame","status","numDays","Math","round","days","AutoGraph","ThisYearSoFar","_game$startDate2","Update","RecentlyComplete","_ref6","a","endDate","slice","Pause","StatsCardLabelMostPlayed","MostPlayed","_ref7","most","Whatshot","CurrentlyPlaying","_ref8","PlayArrow","StatsCardLabelCurrentlyPlaying","_game$endDate","toLocaleDateString","_game$startDate3","SunBurstControls","controlStates","setVal","SelectBox","setValue","dataToSunburstData","groups","measure","curr","groupVals","Date","keyToVal","every","obj","forEach","ids","parents","recurseGroup","parent","total","val2","localeCompare","_ref11","count","_ref12","_recurseGroup","_recurseGroup2","push","_useMemo","useMemo","branchvalues","maxdepth","line","background","paper","colors","none","franchise","publisher","rating","genre","groupDate","_tree$groupVal","groupVal","toISOString","substring","setGroup","setCumulative","_useState5","_useState6","setStack","Barchart","disabled","tooltip","_row$startDate","_row$endDate$toLocale","_row$endDate","groupData","setGroupData","groupFunc","gameData","exactDate","CURRENT_DATE","Timeline","vgData","Stats","Sunburst","Finished","Select","event","target","option","MenuItem"],"sourceRoot":""}