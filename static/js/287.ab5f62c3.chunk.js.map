{"version":3,"file":"static/js/287.ab5f62c3.chunk.js","mappings":"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","sources":["common/Barchart.tsx","utils/colourUtils.ts","common/Card.tsx","common/Finished.tsx","common/Stats.tsx","common/Timeline.tsx","plotly.ts","utils/mathUtils.ts","../node_modules/@mui/icons-material/esm/Whatshot.js","vg/CardMediaImage.tsx","vg/Stats.tsx","vg/Sunburst.tsx","vg/Barchart.tsx","vg/Timeline.tsx","vg/Graphs.tsx","vg/SelectionComponents.tsx","vg/types.ts"],"sourcesContent":["import { Card, CardContent, useTheme } from \"@mui/material\";\nimport Plot from \"../plotly\";\nimport { ReactNode } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { Grouped } from \"../vg/Barchart\";\n\nconst Barchart = ({\n  grouped,\ncumulative,\n  stack,\n  children,\n}: {\n  grouped: Grouped;\n  colours?: Record<string, string>;\n  cumulative: boolean;\n  stack: boolean;\n  children?: ReactNode;\n}) => {\n  const theme = useTheme();\n  let data: Grouped;\n  if (cumulative) {\n    data = convertToCumulative(grouped);\n    stack = true;\n  } else {\n    data = grouped;\n  }\n\n  return (\n    <Card>\n      {children}\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(data).map(([group, { color, data: val }]) => ({\n            type: cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n            marker: {\n              color: Object.entries(data).length === 1 ? theme.palette.primary.main : color,\n            },\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: Object.keys(grouped).length > 1 && Object.keys(grouped).length < 8,\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            plot_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            font: {\n              color: theme.palette.text.primary,\n            },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst convertToCumulative = (grouped: Grouped) => {\n  return Object.entries(grouped).reduce((prev, [key, { color, data: group }]) => {\n    prev[key] = { color: color, data: {} };\n    let lastAmount = 0;\n    const minYearMonth = Object.keys(group).sort()[0];\n    const [minYear, minMonth] = minYearMonth.split(\"-\").map((s) => parseInt(s));\n    for (let i = minYear; i <= CURRENT_YEAR; i++) {\n      for (let j = i === minYear ? minMonth : 1; j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1 : 12); j++) {\n        const yearMonth = i + \"-\" + (j < 10 ? \"0\" : \"\") + j;\n        lastAmount = prev[key].data[yearMonth] = lastAmount + (group[yearMonth] || 0);\n      }\n    }\n    return prev;\n  }, {} as Grouped);\n};\n\nexport default Barchart;\n","import { FastAverageColor } from \"fast-average-color\";\n\nconst fac = new FastAverageColor();\nconst map: Record<string, string> = {};\n\nexport const imageToColour = (img: HTMLImageElement | string | undefined) => {\n  if (img === undefined || img === null) return undefined;\n  if (typeof img === \"string\") {\n    const uri = img === encodeURI(img) ? img : encodeURI(img);\n    return map[uri];\n  }\n  return (map[img.src] ||= fac.getColor(img, { algorithm: \"dominant\", }).hex);\n};\n","import { Box, Card, CardContent, CardMedia, Chip, Dialog, Stack, SxProps, Theme, Typography } from \"@mui/material\";\nimport { FunctionComponent, ReactNode, useRef, useState } from \"react\";\nimport { imageToColour } from \"../utils/colourUtils\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\n\nexport type CardMediaImageProps = {\n  image?: string;\n  alt: string;\n  chip?: [string, string?];\n  landscape?: boolean;\n  height?: string;\n  width?: string;\n  footerComponent?: (colour?: string) => ReactNode;\n  detailComponent?: (colour?: string) => ReactNode;\n  sx?: SxProps<Theme>;\n}\n\nexport type TypedCardMediaImage<T> = FunctionComponent<Omit<CardMediaImageProps, \"banner\" | \"alt\"> & { item: T }>\n\nexport const CardMediaImage = ({\n  image,\n  alt,\n  chip,\n  landscape = false,\n  height,\n  width,\n  footerComponent,\n  detailComponent,\n  sx\n}: CardMediaImageProps) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [colour, setColour] = useState<string | undefined>(imageToColour(image));\n  return (\n    <>\n      <Box sx={{ height, width, position: \"relative\" }}>\n        <CardMedia\n          height={height}\n          width={width}\n          component=\"img\"\n          crossOrigin=\"anonymous\"\n          src={image}\n          alt={alt}\n          onClick={() => setDialogOpen(true)}\n          ref={imgRef}\n          onLoad={() => {\n            footerComponent && setColour?.(imageToColour(imgRef.current!));\n          }}\n          sx={sx}\n        />\n        {chip && (\n          <Chip\n            sx={{\n              position: \"absolute\",\n              top: 0,\n              right: 0,\n              margin: 1,\n              opacity: 0.8,\n              bgcolor: chip[1] || \"primary.main\",\n              color: (theme) => (chip[1] ? theme.palette.getContrastText(chip[1]) : undefined),\n            }}\n            label={chip[0]}\n            variant=\"filled\"\n            size=\"small\"\n          />\n        )}\n      </Box>\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth={false}\n        scroll=\"body\"\n        PaperProps={{ sx: { backgroundColor: \"unset\", boxShadow: \"unset\", backgroundImage: \"unset\" } }}\n      >\n        <Card>\n          <Box position=\"relative\" onClick={() => setDialogOpen(false)}>\n            <Box\n              sx={{\n                background: `linear-gradient(to bottom, ${colour}00 80%, ${colour})`,\n                position: \"absolute\",\n                top: \"90%\",\n                left: 0,\n                right: 0,\n                bottom: 0,\n              }}\n            />\n            <CardMedia\n              component=\"img\"\n              sx={{\n                objectFit: \"contain\",\n                maxHeight: theme => `calc(100vh - ${theme.spacing(4)})`,\n                maxWidth: theme => `calc(100vw - ${theme.spacing(4)})`,\n                aspectRatio: \"auto\",\n                height: { xs: landscape ? \"unset\" : \"100%\", md: landscape ? \"unset\" : \"100vh\" },\n                width: { xs: landscape ? \"100%\" : \"unset\", md: landscape ? \"100vw\" : \"unset\" },\n              }}\n              onLoad={() => {\n                !footerComponent && setColour?.(imageToColour(imgRef.current!));\n              }}\n              src={image}\n              title={alt}\n              onClick={() => setDialogOpen(false)}\n            />\n          </Box>\n          <Box display=\"flex\">\n            <Box flexGrow=\"1\" width=\"0px\">\n              {detailComponent?.(colour)}\n            </Box>\n          </Box>\n        </Card>\n      </Dialog>\n      {footerComponent?.(colour)}\n    </>\n  );\n};\n\nexport const DetailCard = ({ colour, label, value, large }: { colour?: string, label: string, value: string | ReactNode, large?: boolean }) => {\n  if (!value) return null;\n  return (\n      <Grid xs={large ? 6 : 3}>\n          <Card sx={{ height: \"100%\", background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n              <CardContent sx={{\n                  \":last-child\": { paddingBottom: 2 },\n                  height: \"100%\"\n              }}>\n                  <Stack direction={\"column\"} height=\"100%\" justifyContent=\"space-between\">\n                      <Typography align=\"center\" variant=\"body1\">\n                          {value}\n                      </Typography>\n                      <Typography align=\"center\" variant=\"caption\" sx={{ opacity: 0.8 }}>\n                          {label}\n                      </Typography>\n                  </Stack>\n              </CardContent>\n          </Card>\n      </Grid>\n  );\n}","import { Card, CardHeader, CardContent, FormGroup, FormControlLabel, Switch, Dialog } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { useEffect, useState } from \"react\";\nimport { TypedCardMediaImage } from \"./Card\";\n\nconst Finished = <U extends { banner?: string; startDate?: Date; name: string }>({\n  title,\n  data,\n  width,\n  colour,\n  MediaComponent\n}: {\n  title: string;\n  data: U[];\n  width: number;\n  colour?: (item: U) => string;\n  MediaComponent: TypedCardMediaImage<U>;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  if (!mounted) return null;\n  const recent = data.filter((show) => show.banner).sortByKey(\"startDate\");\n  const content = (\n    <>\n      <CardHeader\n        title={title}\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Maximise\"\n              control={<Switch checked={dialogOpen} onChange={(_, checked) => setDialogOpen(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          {recent.map((item) => (\n            <Grid alignSelf=\"stretch\" key={item.name} xs={dialogOpen ? 12 : width}>\n              <Card\n                sx={{\n                  height: \"100%\",\n                  borderColor: colour && colour(item) + 90,\n                  borderStyle: colour && \"solid\",\n                  borderWidth: colour && 3,\n                }}\n              >\n                <MediaComponent item={item} landscape={\"format\" in item} image={item.banner} height=\"100%\" />\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </>\n  );\n\n  return (\n    <Card>\n      {content}\n      <Dialog open={dialogOpen} fullScreen>\n        {content}\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default Finished;\n","import { Card, CardContent, CardHeader, Divider, Stack, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"../vg/types\";\nimport { Season } from \"../show/types\";\nimport { TypedCardMediaImage } from \"./Card\";\nimport { ReactNode } from \"react\";\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: ReactNode;\n  title: string;\n  content: string | [string, number][];\n}) => {\n  const formattedContent =\n    typeof content === \"string\" ? (\n      <Typography align=\"right\" variant=\"h4\">\n        {content}\n      </Typography>\n    ) : (\n      <Stack divider={<Divider orientation=\"vertical\" flexItem />} justifyContent=\"space-evenly\" direction={\"row\"}>\n        {content.map(([key, val]) => (\n          <Stack key={key} direction={\"column\"} flex=\"1 1 0\">\n            <Typography align=\"center\" variant=\"h5\">\n              {format(val)}\n            </Typography>\n            <Typography align=\"center\" variant=\"subtitle2\" color=\"text.secondary\">\n              {key}\n            </Typography>\n          </Stack>\n        ))}\n      </Stack>\n    );\n  return (\n    <Grid xs={12} sm={6} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader\n          titleTypographyProps={{ variant: \"h6\" }}\n          title={title}\n          avatar={icon}\n          sx={{ paddingBottom: \"5px\" }}\n        />\n        <CardContent sx={{ paddingTop: \"5px\" }}>{formattedContent}</CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport type StatsListProps<T extends VideoGame | Season> = {\n  icon: ReactNode;\n  title: string;\n  content: T[];\n  width?: [number, number, number];\n  labelComponent: (t: T) => string[][];\n  chipComponent?: (t: T) => [string, string?];\n  MediaComponent: TypedCardMediaImage<T>;\n  pictureWidth?: [number, number, number];\n  aspectRatio?: string;\n  divider?: boolean;\n  landscape?: boolean;\n}\n\nexport const StatList = <T extends VideoGame | Season>({\n  icon,\n  title,\n  content,\n  width = [12, 12, 6],\n  chipComponent,\n  labelComponent,\n  ...props\n}: StatsListProps<T>) => {\n  return (\n    <Grid xs={width[0]} sm={width[1]} md={width[2]}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Grid\n            container\n            sx={{ overflow: \"auto\", flexWrap: { xs: \"nowrap\", md: width[2] === 12 ? \"nowrap\" : \"wrap\" } }}\n            spacing={1}\n            alignItems=\"center\"\n          >\n            {content.map((entry) => {\n              const { name } = \"name\" in entry ? entry : entry.show;\n              return (\n                <StatsListCard\n                  key={title + \"-statslistcard-\" + name}\n                  item={entry}\n                  labels={labelComponent(entry)}\n                  chip={chipComponent?.(entry)}\n                  {...props}\n                />\n              );\n            })}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst StatsListCard = <T extends VideoGame | Season>({\n  item,\n  labels,\n  chip,\n  pictureWidth = [12, 4, 6],\n  aspectRatio,\n  divider,\n  landscape = false,\n  MediaComponent\n}: {\n  item: T;\n  labels: string[][];\n  chip?: [string, string?];\n  pictureWidth?: [number, number, number];\n  aspectRatio?: string;\n  divider?: boolean;\n  landscape?: boolean;\n  MediaComponent: TypedCardMediaImage<T>;\n}) => {\n  const dividerComponent = <Divider orientation=\"vertical\" flexItem />;\n  return (\n    <Grid flexShrink={0} alignSelf=\"stretch\" xs={pictureWidth[0]} sm={pictureWidth[1]} md={pictureWidth[2]}>\n      <Card variant=\"outlined\" sx={{ height: \"100%\" }}>\n        <MediaComponent\n          item={item}\n          width=\"100%\"\n          sx={{ aspectRatio, flexShrink: 0 }}\n          chip={chip}\n          landscape={landscape}\n          footerComponent={\n            (colour?: string) => (\n              <CardContent\n                sx={{\n                  padding: \"10px\",\n                  \":last-child\": { paddingBottom: \"10px\" },\n                  background: colour,\n                  color: (theme) => colour && theme.palette.getContrastText(colour),\n                }}\n              >\n                {labels.map((stacks, index, labels) => (\n                  <Stack\n                    key={`stacks-${index}`}\n                    justifyContent={stacks.length === 1 ? \"center\" : \"space-between\"}\n                    direction=\"row\"\n                    divider={labels.length === 1 || divider ? dividerComponent : null}\n                  >\n                    {stacks.map((val) => (\n                      <Typography key={val} variant=\"subtitle2\">\n                        {val}\n                      </Typography>\n                    ))}\n                  </Stack>\n                ))}\n              </CardContent>\n            )\n          }\n        />\n      </Card>\n    </Grid>\n  );\n};\n","import { Box, Card, CardContent, useTheme } from \"@mui/material\";\nimport { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\n\nconst DEFAULT_HEIGHT = 90;\n\nconst Timeline = ({ data, children }: { data: [string, string, string, Date, Date][]; children?: ReactNode }) => {\n  const [height, setHeight] = useState<string | number>(DEFAULT_HEIGHT + \"vh\");\n  const theme = useTheme();\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"*\" },\n      { type: \"string\", id: \"Name\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const callback = useCallback(() => {\n    const labels = document.getElementsByTagName(\"text\");\n    for (let label of labels) {\n      if (label.getAttribute(\"text-anchor\") === \"middle\") {\n        label.setAttribute(\"fill\", theme.palette.text.secondary);\n      }\n    }\n\n    const rects = document.getElementsByTagName(\"rect\");\n    for (let rect of rects) {\n      if (rect.getAttribute(\"stroke\") === \"#9a9a9a\") {\n        const newHeight = rect.height.baseVal.value + 50;\n        setHeight(\n          newHeight < document.documentElement.clientHeight * (DEFAULT_HEIGHT / 100) ? newHeight : DEFAULT_HEIGHT + \"vh\"\n        );\n      }\n    }\n  }, [theme.palette.text.secondary]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", callback);\n    return () => window.removeEventListener(\"resize\", callback);\n  }, [callback]);\n\n  return (\n    <Box\n      sx={{\n        \".backgroundPaper\": {\n          backgroundColor: \"background.paper\",\n        },\n      }}\n    >\n      <Card>\n        {children}\n        <CardContent>\n          <Box sx={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n            <Chart\n              key={height}\n              width=\"400vw\"\n              height={height}\n              chartType=\"Timeline\"\n              data={timelineHeader.concat(data)}\n              onLoad={() => {\n                setTimeout(callback, 50);\n              }}\n              chartEvents={[{ eventName: \"ready\", callback }]}\n              options={{\n                backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.grey.A700 : undefined,\n                timeline: { rowLabelStyle: { color: theme.palette.text.primary } },\n              }}\n            />\n          </Box>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default Timeline;\n","import Plotly from \"plotly.js/lib/core\";\nimport bar from \"plotly.js/lib/bar\";\nimport sunburst from \"plotly.js/lib/sunburst\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst loadPlotly = () => {\n  Plotly.register([bar, sunburst]);\n  return createPlotlyComponent(Plotly);\n};\n\nexport default loadPlotly();\n","export const format = new Intl.NumberFormat().format;\n","import createSvgIcon from './utils/createSvgIcon';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon( /*#__PURE__*/_jsx(\"path\", {\n  d: \"M13.5.67s.74 2.65.74 4.8c0 2.06-1.35 3.73-3.41 3.73-2.07 0-3.63-1.67-3.63-3.73l.03-.36C5.21 7.51 4 10.62 4 14c0 4.42 3.58 8 8 8s8-3.58 8-8C20 8.61 17.41 3.8 13.5.67zM11.71 19c-1.78 0-3.22-1.4-3.22-3.14 0-1.62 1.05-2.76 2.81-3.12 1.77-.36 3.6-1.21 4.62-2.58.39 1.29.59 2.65.59 4.04 0 2.65-2.15 4.8-4.8 4.8z\"\n}), 'Whatshot');","import { Box, Card, CardContent, Stack } from \"@mui/material\";\nimport { CardMediaImage, DetailCard, TypedCardMediaImage } from \"../common/Card\";\nimport { VideoGame, companyToColor, ratingToColour, statusToColour } from \"./types\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\nimport { CURRENT_DATE, dateDiffInDays } from \"../utils/dateUtils\";\n\nconst VgCardMediaImage: TypedCardMediaImage<VideoGame> = ({ item, ...props }) => (\n    <CardMediaImage\n        alt={item.name}\n        image={item.banner}\n        detailComponent={(colour) => <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n            <Grid container spacing={1}>\n                <TimelineCard colour={colour} item={item} />\n                <DetailCard colour={colour} label=\"Start Date\" value={item.exactDate ? item.startDate.toLocaleDateString() : item.startDate?.getFullYear()} />\n                <DetailCard colour={colour} label=\"End Date\" value={item.exactDate ? item.endDate?.toLocaleDateString() : item.endDate?.getFullYear()} />\n                <DetailCard colour={colour} label=\"Days To Beat\" value={item.exactDate ? item.numDays : undefined} />\n                <DetailCard colour={colour} label=\"Hours\" value={item.hours} />\n\n                <DetailCard colour={statusToColour(item)} label=\"Status\" value={item.status} />\n                <DetailCard colour={companyToColor(item)} label=\"Platform\" value={item.platform} />\n                <DetailCard colour={colour} label=\"Release Date\" value={item.releaseDate.toLocaleDateString()} />\n                <DetailCard colour={colour} label=\"Format\" value={item.format} />\n\n                <DetailCard colour={colour} label=\"Developer\" value={item.developer} />\n                <DetailCard colour={colour} label=\"Publisher\" value={item.publisher} />\n                <DetailCard colour={colour} label=\"Franchise\" value={item.franchise} />\n                <DetailCard colour={ratingToColour(item)} label=\"PEGI\" value={item.rating} />\n\n                <DetailCard colour={colour} label=\"Genre\" value={item.genre} />\n                <DetailCard large colour={colour} label=\"Themes\" value={item.theme.join(\" - \")} />\n\n            </Grid>\n        </CardContent>}\n        {...props} />\n)\n\nconst startYear = new Date(2004, 0, 1);\nconst days = dateDiffInDays(startYear, CURRENT_DATE)!;\n\nconst TimelineCard = ({ colour, item }: { colour?: string, item: VideoGame }) => {\n    if (!item.startDate || item.startDate < startYear) return null;\n    const endDate = item.endDate ? (item.exactDate ? item.endDate : new Date(item.startDate.getFullYear(), item.startDate.getMonth() + 1, item.startDate.getDay())) : CURRENT_DATE;\n    const startDays = dateDiffInDays(startYear, item.startDate)!\n    const startPercent = startDays / days * 100;\n    const gameLengthPercent = Math.max((item.numDays || dateDiffInDays(item.startDate, endDate)!) / days * 100, 0.5);\n    const endPercent = 100 - gameLengthPercent - startPercent;\n\n    return <Grid xs={12}>\n        <Card sx={{ height: \"100%\", background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n            <CardContent sx={{\n                \":last-child\": { paddingBottom: 2 },\n                height: \"100%\"\n            }}>\n                <Stack direction=\"row\" alignItems=\"center\">\n                    <Box sx={{ width: startPercent + \"%\" }} >\n                        <Box sx={{ height: \"10px\", bgcolor: \"primary.light\", opacity: 0.8 }} />\n                    </Box>\n                    <Box sx={{ width: gameLengthPercent + \"%\" }} >\n                        <Box sx={{ height: \"15px\", bgcolor: \"secondary.dark\" }} />\n                    </Box>\n                    <Box sx={{ width: endPercent + \"%\" }} >\n                        <Box sx={{ height: \"10px\", bgcolor: \"primary.light\", opacity: 0.8 }} />\n                    </Box>\n                </Stack>\n            </CardContent>\n        </Card>\n    </Grid>\n}\n\nexport default VgCardMediaImage\n","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame, platformToShort } from \"./types\";\nimport { StatCard, StatList, StatsListProps } from \"../common/Stats\";\nimport VgCardMediaImage from \"./CardMediaImage\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: VideoGame[] }) => {\n  const grouped = data.reduce((tree, game) => {\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n    tree[year] ??= [0, 0];\n    tree[year] = [tree[year][0] + 1, tree[year][1] + game.hours];\n    return tree;\n  }, {} as Record<string, [number, number]>);\n\n  const games = parseFloat((Object.values(grouped).sum(0) / Object.keys(grouped).length).toFixed(2));\n  const hours = parseFloat((Object.values(grouped).sum(1) / Object.keys(grouped).length).toFixed(2));\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Games\", games],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerGame = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.status === \"Beat\" && game.hours && game.numDays);\n  const hours = Math.round(filtered.sum(\"hours\") / filtered.length);\n  const days = Math.round(filtered.sum(\"numDays\") / filtered.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Game Average\"\n      content={[\n        [\"Hours\", hours],\n        [\"Days To Beat\", days],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const filtered = data.filter((game) => game.startDate?.getFullYear() === CURRENT_YEAR && game.hours);\n  const time = filtered.sum(\"hours\");\n  const games = filtered.length;\n\n  return (\n    <StatCard\n      icon={<Update />}\n      title={`In ${CURRENT_YEAR}`}\n      content={[\n        [\"Games\", games],\n        [\"Hours\", time],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"endDate\")\n    .slice(0, 6);\n  return (\n    <VgStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      labelComponent={StatsCardLabelEndDateHours}\n    />\n  );\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sortByKey(\"hours\")\n    .slice(0, 6);\n  return (\n    <VgStatList\n      icon={<Whatshot />}\n      title=\"Most Played\"\n      content={most}\n      labelComponent={StatsCardLabelEndDateHours}\n    />\n  );\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1));\n  return (\n    <VgStatList\n      icon={<PlayArrow />}\n      title=\"Currently Playing\"\n      content={recent}\n      labelComponent={StatsCardLabelStartDate}\n      width={[12, 12, 12]}\n      pictureWidth={[12, 4, 4]}\n    />\n  );\n};\n\nconst StatsCardLabelEndDateHours = (game: VideoGame) => [\n  [game.endDate?.toLocaleDateString() || \"\", `${format(game.hours!)} Hours`],\n];\n\nconst StatsCardLabelStartDate = (game: VideoGame) => [[game.startDate?.toLocaleDateString() || \"\"]];\n\nconst VgStatList = (props: Omit<StatsListProps<VideoGame>, \"MediaComponent\" | \"aspectRatio\" | \"divider\" | \"chipComponent\" | \"landscape\">) => <StatList\n  aspectRatio=\"16/9\"\n  divider\n  chipComponent={platformToShort}\n  landscape\n  MediaComponent={VgCardMediaImage}\n  {...props} />\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup, useTheme } from \"@mui/material\";\nimport { Dispatch, SetStateAction, useMemo, useState } from \"react\";\nimport Plot from \"../plotly\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, isVideoGame, Measure, VideoGame, VideoGameTree } from \"./types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n  colours: string[];\n}\n\nconst isStringArray = (x: any[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const theme = useTheme();\n  const controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][] = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\"),\n  ];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const { ids, labels, parents, values, colours }: SunburstData = useMemo(\n    () =>\n      dataToSunburstData(\n        data,\n        controlStates.map(([s]) => s),\n        measure\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [data, measure, ...controlStates]\n  );\n\n  return (\n    <Card>\n      <CardHeader title=\"Sunburst\" action={<SunBurstControls controlStates={controlStates} />} />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\", maxHeight: \"100vw\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n              marker: { line: { color: theme.palette.background.paper }, colors: colours },\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            margin: { l: 0, r: 0, b: 0, t: 0 },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"name\",\n  \"platform\",\n  \"publisher\",\n  \"genre\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  controlStates,\n}: {\n  controlStates: [OptionKeys, Dispatch<SetStateAction<OptionKeys>>][];\n}) => {\n  return (\n    <FormGroup>\n      {controlStates.map(([val, setVal], index) => (\n        <SelectBox options={options} key={\"sunburst-control-\" + index} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      return !(measure === \"Hours\" && curr.hours === undefined);\n\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.name] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n  const colours: string[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string): [number, string] => {\n    let total = 0;\n    let colour: string = \"\";\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n          if (groups[0] === \"company\") {\n            colour = companyToColor(value);\n          }\n        } else {\n          [count, colour] = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        colours.push(colour);\n        total += count;\n      });\n\n    return [total, colour];\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n    colours,\n  };\n};\n\nexport default Sunburst;\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"./SelectionComponents\";\nimport { companyToColor, Measure, VideoGame, VideoGameStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  name: false,\n  platform: true,\n  developer: false,\n  publisher: false,\n  rating: true,\n  status: true,\n  genre: true,\n};\n\nconst VgBarchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(false);\n  let [stack, setStack] = useState(true);\n\n  const grouped = groupDate(data, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nexport interface Grouped {\n  [key: string]: {\n    color: string;\n    data: Record<string, number>;\n  };\n}\n\nconst groupDate = (\n  data: VideoGame[],\n  group: VideoGameStringKeys | \"none\",\n  measure: Measure,\n  cumulative: boolean\n): Grouped => {\n  return data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = cumulative ? game.startDate?.toISOString().substring(0, 7) : game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] ??= { color: group === \"company\" ? companyToColor(game) : \"\", data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Grouped);\n};\n\nexport default VgBarchart;\n","import { CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { VideoGame, companyToColor } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst VgTimeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n  const gameData: [string, string, string, Date, Date][] = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.name, tooltip(row), row.startDate!, row.endDate || CURRENT_DATE]);\n\n  return (\n    <Timeline data={gameData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: flex; background-color: ${companyToColor(row)}\" class=\"backgroundPaper\">\n      <div>\n        <ul style=\"list-style-type: none;padding-left: 5px\">\n          <li>\n            <span><b>${row.name}</b></span>\n          </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n          <li>\n            <span><b>Hours: </b></span>\n            <span\">${row.hours}</span>\n          </li>\n          <li>\n            <span><b>Period: </b></span>\n            <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString() ?? \"present\"} </span>\n          </li>\n          <li>\n            <span><b>Days: </b></span>\n            <span>${row.numDays || \"-\"}</span>\n          </li>\n        </ul>\n      </div>\n      ${row.banner ? `<img src=\"${row.banner}\" style=\"height: 150px\" /><hr />` : \"\"}\n    </div>\n  `;\n\nexport default VgTimeline;\n","import Stats from \"./Stats\";\nimport { Measure, VideoGame, companyToColor } from \"./types\";\nimport Sunburst from \"./Sunburst\";\nimport Barchart from \"./Barchart\";\nimport Finished from \"../common/Finished\";\nimport Timeline from \"./Timeline\";\nimport { Stack } from \"@mui/material\";\nimport CardMediaImage from \"./CardMediaImage\";\n\nconst Graphs = ({ vgData, measure }: { vgData: VideoGame[]; measure: Measure }) => (\n  <Stack spacing={2}>\n    <Stats data={vgData} />\n    <Timeline data={vgData} />\n    <Sunburst data={vgData} measure={measure} />\n    <Barchart data={vgData} measure={measure} />\n    <Finished MediaComponent={CardMediaImage} title=\"All Games\" data={vgData} width={4} colour={(vg: VideoGame) => companyToColor(vg)} />\n  </Stack>\n);\n\nexport default Graphs;\n","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n","import { Show } from \"../show/types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface VideoGameBase {\n  name: string;\n  platform: Platform;\n  company: Company;\n  developer: string;\n  publisher: string;\n  franchise: string;\n  genre: string;\n  theme: string[];\n  rating: string;\n  releaseDate: Date;\n  format: Format;\n  status: Status;\n  hours?: number;\n  numDays?: number;\n  banner?: string;\n}\n\ninterface VideoGameWithDate extends VideoGameBase {\n  exactDate: true;\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface VideoGameWithoutDate extends VideoGameBase {\n  exactDate: false;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport type VideoGame = VideoGameWithDate | VideoGameWithoutDate;\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\" | \"Next\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.name;\n\nexport type Measure = \"Hours\" | \"Count\";\n\nconst nintendoColour = \"#e60012\";\nconst playstationColour = \"#0070cc\";\nconst xboxColour = \"#107c10\";\nconst pcColour = \"#b5a596\";\nconst iosColour = \"#555555\";\n\nexport const companyToColor = ({ company }: VideoGame) => {\n  switch (company) {\n    case \"Nintendo\":\n      return nintendoColour;\n    case \"PlayStation\":\n      return playstationColour;\n    case \"Xbox\":\n      return xboxColour;\n    case \"PC\":\n      return pcColour;\n    case \"iOS\":\n      return iosColour;\n  }\n};\n\nexport const platformToShort: (vg: VideoGame) => [string, string] = (vg) => {\n  switch (vg.platform) {\n    case \"PlayStation 2\":\n      return [\"PS2\", companyToColor(vg)];\n    case \"PlayStation 3\":\n      return [\"PS3\", companyToColor(vg)];\n    case \"PlayStation P\":\n      return [\"PSP\", companyToColor(vg)];\n    case \"PlayStation 4\":\n      return [\"PS4\", companyToColor(vg)];\n    case \"PlayStation 5\":\n      return [\"PS5\", companyToColor(vg)];\n    case \"Nintendo Wii\":\n      return [\"Wii\", companyToColor(vg)];\n    case \"Nintendo GBC\":\n      return [\"GBC\", companyToColor(vg)];\n    case \"Nintendo GBA\":\n      return [\"GBA\", companyToColor(vg)];\n    case \"Nintendo DS\":\n      return [\"DS\", companyToColor(vg)];\n    case \"Nintendo 3DS\":\n      return [\"3DS\", companyToColor(vg)];\n    case \"Nintendo Switch\":\n      return [\"NSW\", companyToColor(vg)];\n    case \"PC\":\n      return [\"PC\", companyToColor(vg)];\n    case \"iOS\":\n      return [\"iOS\", companyToColor(vg)];\n    case \"Xbox 360\":\n      return [\"360\", companyToColor(vg)];\n    default:\n      throw new Error(\"Unknown platform: \" + vg.platform);\n  }\n};\n\nexport const ratingToColour = ({ rating }: VideoGame) => {\n  switch (rating) {\n    case \"3+\":\n    case \"7+\":\n      return \"rgb(137,195,46)\";\n    case \"12+\":\n    case \"16+\":\n      return \"rgb(242,144,0)\";\n    case \"18+\":\n      return \"rgb(214,0,21)\";\n    default:\n      throw new Error(\"Unknown rating: \" + rating);\n  }\n}\n\nexport const statusToColour = ({ status }: VideoGame | Show) => {\n  switch (status) {\n    case \"Abandoned\":\n      return \"rgb(214, 39, 40)\";\n    case \"Beat\":\n    case \"Ended\":\n      return \"rgb(44, 160, 44)\";\n    case \"Cancelled\":\n      return \"rgb(44, 160, 0)\";\n    case \"Endless\":\n    case \"Up To Date\":\n      return \"rgb(31, 119, 180)\";\n    case \"Playing\":\n    case \"Watching\":\n      return \"rgb(23, 190, 207)\";\n    case \"Next\":\n    case \"Backlog\":\n      return \"\";\n  }\n}\n"],"names":["convertToCumulative","grouped","Object","entries","reduce","prev","_ref4","_ref5","_slicedToArray","key","_ref5$","color","group","data","lastAmount","_minYearMonth$split$m","keys","sort","split","map","s","parseInt","_minYearMonth$split$m2","minYear","minMonth","i","CURRENT_YEAR","j","CURRENT_MONTH","yearMonth","_ref","cumulative","stack","children","theme","useTheme","_jsxs","Card","_jsx","CardContent","Plot","style","width","height","_ref2","_ref3","_ref3$","val","type","name","x","y","values","stackgroup","undefined","marker","length","palette","primary","main","config","displayModeBar","responsive","layout","showlegend","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","paper_bgcolor","mode","plot_bgcolor","font","text","fac","FastAverageColor","imageToColour","img","_img$src","uri","encodeURI","src","getColor","algorithm","hex","CardMediaImage","image","alt","chip","_ref$landscape","landscape","footerComponent","detailComponent","sx","_useState","useState","_useState2","dialogOpen","setDialogOpen","imgRef","useRef","_useState3","_useState4","colour","setColour","_Fragment","Box","position","CardMedia","component","crossOrigin","onClick","ref","onLoad","current","Chip","top","right","opacity","bgcolor","getContrastText","label","variant","size","Dialog","open","onClose","maxWidth","scroll","PaperProps","backgroundColor","boxShadow","backgroundImage","background","concat","left","bottom","objectFit","maxHeight","spacing","aspectRatio","xs","md","title","display","flexGrow","DetailCard","value","large","Grid","paddingBottom","Stack","direction","justifyContent","Typography","align","MediaComponent","mounted","setMounted","useEffect","recent","filter","show","banner","sortByKey","content","CardHeader","action","FormGroup","row","FormControlLabel","control","Switch","checked","onChange","_","container","alignItems","item","alignSelf","borderColor","borderStyle","borderWidth","fullScreen","StatCard","icon","formattedContent","divider","Divider","flexItem","flex","format","sm","titleTypographyProps","avatar","paddingTop","StatList","_ref4$width","chipComponent","labelComponent","props","_objectWithoutProperties","_excluded","overflow","flexWrap","entry","StatsListCard","_objectSpread","labels","_ref6","_ref6$pictureWidth","pictureWidth","_ref6$landscape","dividerComponent","flexShrink","padding","stacks","index","DEFAULT_HEIGHT","setHeight","callback","useCallback","_step","document","getElementsByTagName","_iterator","_createForOfIteratorHelper","n","done","getAttribute","setAttribute","secondary","err","e","f","_step2","rects","_iterator2","rect","newHeight","baseVal","documentElement","clientHeight","window","addEventListener","removeEventListener","overflowX","overflowY","Chart","chartType","id","role","setTimeout","chartEvents","eventName","options","grey","A700","timeline","rowLabelStyle","Plotly","bar","sunburst","createPlotlyComponent","Intl","NumberFormat","createSvgIcon","d","startYear","Date","days","dateDiffInDays","CURRENT_DATE","TimelineCard","startDate","endDate","exactDate","getFullYear","getMonth","getDay","startPercent","gameLengthPercent","Math","max","numDays","endPercent","_item$startDate","_item$endDate","_item$endDate2","toLocaleDateString","hours","statusToColour","status","companyToColor","platform","releaseDate","developer","publisher","franchise","ratingToColour","rating","genre","join","AllTime","filtered","game","time","sum","games","Timer","Averages","tree","_game$startDate","_tree$year","year","toString","parseFloat","toFixed","ShowChart","AveragesPerGame","round","AutoGraph","ThisYearSoFar","_game$startDate2","Update","RecentlyComplete","a","slice","VgStatList","Pause","StatsCardLabelEndDateHours","MostPlayed","_ref7","most","Whatshot","CurrentlyPlaying","_ref8","PlayArrow","StatsCardLabelStartDate","_game$endDate","_game$startDate3","platformToShort","VgCardMediaImage","SunBurstControls","controlStates","setVal","SelectBox","setValue","dataToSunburstData","groups","measure","curr","groupVals","keyToVal","every","obj","forEach","ids","parents","colours","recurseGroup","parent","total","val2","localeCompare","_ref11","count","_ref12","isVideoGame","_recurseGroup","_recurseGroup2","push","_useMemo","useMemo","branchvalues","maxdepth","line","paper","colors","none","company","groupDate","_tree$groupVal","groupVal","toISOString","substring","setGroup","setCumulative","_useState5","_useState6","setStack","Barchart","disabled","tooltip","_row$startDate","_row$endDate$toLocale","_row$endDate","groupData","setGroupData","groupFunc","gameData","Timeline","vgData","Stats","Sunburst","Finished","vg","Select","event","target","option","MenuItem","arg","Error"],"sourceRoot":""}