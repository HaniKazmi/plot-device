{"version":3,"file":"static/js/516.386a9ba5.chunk.js","mappings":"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","sources":["plotly.tsx","vg/SelectionComponents.tsx","vg/Barchart.tsx","vg/Timeline.tsx","vg/Filter.tsx","vg/Stats.tsx","vg/Sunburst.tsx","vg/types.ts","vg.tsx"],"sourcesContent":["import Plotly from 'plotly.js/lib/core'\nimport bar from 'plotly.js/lib/bar';\nimport sunburst from 'plotly.js/lib/sunburst';\nimport createPlotlyComponent from 'react-plotly.js/factory'\n\nconst loadPlotly = () => {\n  Plotly.register([ bar, sunburst ])\n  return createPlotlyComponent(Plotly);\n}\n\nexport default loadPlotly(); ","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n","import { Card, CardContent, CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Plot from \"../plotly\"\nimport { SelectBox } from \"./SelectionComponents\";\nimport { Measure, VideoGame, VideoGameStringKeys } from \"./types\";\n\nconst options: Record<VideoGameStringKeys | \"none\", boolean> = {\n  none: true,\n  company: true,\n  format: true,\n  franchise: false,\n  game: false,\n  platform: true,\n  publisher: false,\n  rating: true,\n  status: true,\n};\n\nconst Barchart = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [group, setGroup] = useState<VideoGameStringKeys | \"none\">(\"company\");\n  const [cumulative, setCumulative] = useState(false);\n\n  const grouped = data.reduce((tree, game) => {\n    const groupVal = group === \"none\" ? \"\" : game[group];\n    const year = game.startDate?.getFullYear().toString();\n    if (!year || !game.hours) return tree;\n\n    tree[groupVal] = tree[groupVal] || {};\n    tree[groupVal][year] = (tree[groupVal][year] || 0) + (measure === \"Count\" ? 1 : game.hours);\n    return tree;\n  }, {} as Record<string, Record<string, number>>);\n\n  if (cumulative) {\n    Object.values(grouped).forEach(group => {\n      let lastAmount = 0\n      const min = parseInt(Object.keys(group).sort()[0])\n      const end = new Date().getFullYear()\n      for (let i = min; i <= end; i++) {\n        lastAmount = group[i] = lastAmount + (group[i] || 0)\n      }\n    })\n  }\n\n  return (\n    <Card>\n      <CardHeader\n        title={measure === \"Count\" ? \"Games Played\" : \"Hours Played\"}\n        action={\n          <FormGroup>\n            <SelectBox options={Object.keys(options) as (VideoGameStringKeys | \"none\")[]} value={group} setValue={setGroup} />\n            <FormControlLabel\n              label=\"Cumulative\"\n              control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n            />\n          </FormGroup>}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(grouped).map(([group, val]) => ({\n            type: cumulative ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: \"*\",\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: options[group],\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: \"stack\",\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"linear\" },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default Barchart;\n","import { Card, CardContent, CardHeader, FormControlLabel, FormGroup, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { VideoGame } from \"./types\";\n\nconst Timeline = ({ data }: { data: VideoGame[] }) => {\n  const [groupData, setGroupData] = useState(false);\n  const groupFunc = groupData ? ({ company }: VideoGame) => company : () => \"*\";\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"Company\" },\n      { type: \"string\", id: \"Game\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const gameData = data\n    .filter(({ exactDate, startDate }) => exactDate && startDate.getFullYear() > 2014)\n    .map((row) => [groupFunc(row), row.game, tooltip(row), row.startDate, row.endDate]);\n\n  let chartHeight: string;\n\n  if (groupData) chartHeight = \"55vh\";\n  else chartHeight = \"30vh\";\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Group Data\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n          <Chart\n            key={chartHeight}\n            width=\"400vw\"\n            height={chartHeight}\n            chartType=\"Timeline\"\n            data={timelineHeader.concat(gameData)}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst tooltip = (row: VideoGame) =>\n  `\n    <div style=\"display: inline-block\">\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${row.game}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${row.hours}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate?.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Days: </b></span>\n                <span>${row.numDays || \"-\"}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nexport default Timeline;\n","import { FilterAlt, AllInclusive, QuestionMark, CatchingPokemon, Timer, Functions } from \"@mui/icons-material\";\nimport { SpeedDial, SpeedDialIcon, SpeedDialAction, Stack, Fab } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport { Measure, Predicate, VideoGame } from \"./types\";\n\nconst Filter = ({\n  setFilterFunc,\n  measure,\n  setMeasure,\n}: {\n  setFilterFunc: (func: () => Predicate<VideoGame>) => void;\n  measure: Measure;\n  setMeasure: (measure: Measure) => void;\n}) => {\n  const [filterEndless, setFilterEndless] = useState(false);\n  const [filterPokemon, setFilterPokemon] = useState(false);\n  const [filterUnconfirmed, setFilterUnconfirmed] = useState(false);\n\n  useEffect(() => {\n    const filters = [\n      filterEndless ? ({ status }: VideoGame) => status !== \"Endless\" : () => true,\n      filterPokemon ? ({ franchise }: VideoGame) => franchise !== \"Pokémon\" : () => true,\n      filterUnconfirmed\n        ? ({ platform, startDate }: VideoGame) => {\n          if (platform === \"PC\") {\n            if (!startDate?.getFullYear() || startDate?.getFullYear() < 2015) return false;\n          } else if (\n            platform !== \"Nintendo Switch\" &&\n            platform !== \"Nintendo 3DS\" &&\n            platform !== \"PlayStation 4\" &&\n            platform !== \"PlayStation 5\"\n          ) return false;\n\n          return true;\n        }\n        : () => true,\n    ];\n    setFilterFunc(() => (vgData: VideoGame) => filters.reduce((p, c) => p && c(vgData), true));\n  }, [filterEndless, filterPokemon, filterUnconfirmed, setFilterFunc]);\n\n  const fabProps = (enabled: boolean) =>\n    enabled ? { sx: { backgroundColor: \"primary.light\", \"&:hover\": { backgroundColor: \"primary.dark\" } } } : {};\n\n  return (\n    <Stack\n      direction=\"column\"\n      spacing={2}\n      sx={{ position: \"fixed\", right: (theme) => theme.spacing(2), bottom: (theme) => theme.spacing(2) }}\n    >\n      <SpeedDial icon={<SpeedDialIcon icon={<FilterAlt />} />} ariaLabel=\"add\">\n        <SpeedDialAction\n          FabProps={fabProps(filterEndless)}\n          tooltipOpen\n          tooltipTitle=\"Endless\"\n          icon={<AllInclusive />}\n          onClick={() => setFilterEndless(!filterEndless)}\n        />\n        <SpeedDialAction\n          FabProps={fabProps(filterUnconfirmed)}\n          tooltipOpen\n          tooltipTitle=\"Unconfirmed\"\n          icon={<QuestionMark />}\n          onClick={() => setFilterUnconfirmed(!filterUnconfirmed)}\n        />\n        <SpeedDialAction\n          FabProps={fabProps(filterPokemon)}\n          tooltipOpen\n          tooltipTitle=\"Pokemon\"\n          icon={<CatchingPokemon />}\n          onClick={() => setFilterPokemon(!filterPokemon)}\n        />\n      </SpeedDial>\n      <Fab color=\"secondary\" onClick={() => setMeasure(measure === \"Count\" ? \"Hours\" : \"Count\")}>\n        {measure === \"Count\" ? <Functions /> : <Timer />}\n      </Fab>\n    </Stack>\n  );\n};\n\nexport default Filter;\n","import { Functions, Pause, PlayArrow, ShowChart, SkipNext, Timer, Update, Whatshot } from \"@mui/icons-material\";\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemText,\n  Divider,\n  Stack,\n  CardMedia,\n} from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { Fragment } from \"react\";\nimport { VideoGame } from \"./types\";\n\nconst Stats = ({ data }: { data: VideoGame[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <TotalGames data={data} />\n      <TotalTime data={data} />\n      <ThisYearSoFar data={data} />\n      <AverageTimePerGame data={data} />\n      <MostPlayed data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst format = new Intl.NumberFormat().format;\n\nconst TotalTime = ({ data }: { data: VideoGame[] }) => {\n  const total = format(data.filter((game) => game.hours).reduce((pre, cur) => pre + cur.hours!, 0));\n  return <StatCard icon={<Timer />} title=\"Time Gamed\" content={`${total} Hours`} />;\n};\n\nconst TotalGames = ({ data }: { data: VideoGame[] }) => {\n  const total = format(data.length);\n  return <StatCard icon={<Functions />} title=\"Number of Games\" content={total} />;\n};\n\nconst AverageTimePerGame = ({ data }: { data: VideoGame[] }) => {\n  const total = format(\n    Math.round(data.filter((game) => game.hours).reduce((pre, cur) => pre + cur.hours!, 0) / data.length)\n  );\n  return <StatCard icon={<ShowChart />} title=\"Avg Time per Game\" content={`${total} Hours`} />;\n};\n\nconst ThisYearSoFar = ({ data }: { data: VideoGame[] }) => {\n  const total = format(\n    data\n      .filter((game) => game.startDate?.getFullYear() === new Date().getFullYear() && game.hours)\n      .reduce((pre, cur) => pre + cur.hours!, 0)\n  );\n  return <StatCard icon={<Update />} title=\"This Year So Far\" content={`${total} Hours`} />;\n};\n\nconst RecentlyComplete = ({ data }: { data: VideoGame[] }) => {\n  const recent = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.endDate! < b.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Pause />} title=\"Recently Finished\" content={recent} />;\n};\n\nconst MostPlayed = ({ data }: { data: VideoGame[] }) => {\n  const most = data\n    .filter((a) => a.hours && a.startDate && a.endDate)\n    .sort((a, b) => (a.hours! < b.hours! ? 1 : -1))\n    .slice(0, 6);\n  return <StatList icon={<Whatshot />} title=\"Most Played\" content={most} />;\n};\n\nconst CurrentlyPlaying = ({ data }: { data: VideoGame[] }) => {\n  const recent = data.filter((a) => a.status === \"Playing\").sort((a, b) => (a.startDate! > b.startDate! ? 1 : -1))[0];\n  return (\n    <Grid xs={12} md={4}>\n      <Stack direction=\"column\" spacing={1} /* sx={{ height: \"100%\" }} */ >\n        <Card sx={{ flex: \"0 1 auto\" }}>\n          <CardHeader\n            titleTypographyProps={{ variant: \"h6\" }}\n            title=\"Currently Playing\"\n            subheader={`Started ${recent.startDate?.toLocaleDateString()}`}\n            avatar={<PlayArrow />}\n          />\n          <CardMedia component=\"img\" src=\"https://images.launchbox-app.com/455861bb-adee-48ad-88e9-19373db19a8e.jpg\" />\n        </Card>\n        <Card sx={{ flex: \"1 1 auto\" }}>\n          <CardHeader\n            titleTypographyProps={{ variant: \"h6\" }}\n            title=\"Next Up\"\n            subheader={`Releases ${new Date(\"11/10/2022\").toLocaleDateString()}`}\n            avatar={<SkipNext />}\n          />\n          <CardMedia component=\"img\" src=\"https://images.launchbox-app.com/76ef597d-d0a3-4baa-ac5e-0f00da125e65.jpg\" />\n        </Card>\n      </Stack>\n    </Grid>\n  );\n};\n\nconst StatList = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: VideoGame[];\n}) => {\n  return (\n    <Grid xs={6} md={4}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <List>\n            {content.map((game) => (\n              <Fragment key={game.game}>\n                <Divider variant=\"middle\" component=\"li\" />\n                <ListItem>\n                  <ListItemText\n                    secondaryTypographyProps={{ component: \"span\" }}\n                    primary={game.game}\n                    secondary={\n                      <Stack direction={{ xs: \"column\", md: \"row\" }} justifyContent=\"space-between\">\n                        <Typography>{game.endDate?.toLocaleDateString()}</Typography>\n                        <Typography>{`${format(game.hours!)} Hours`}</Typography>\n                      </Stack>\n                    }\n                  />\n                </ListItem>\n              </Fragment>\n            ))}\n            <Divider variant=\"middle\" component=\"li\" />\n          </List>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string;\n}) => {\n  return (\n    <Grid xs={6} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Typography align=\"right\" variant=\"h4\">\n            {content}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default Stats;\n","import { Card, CardContent, CardHeader, FormGroup } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\nimport Plot from \"../plotly\"\nimport { SelectBox } from \"./SelectionComponents\";\nimport { isVideoGame, KeysMatching, Measure, VideoGame, VideoGameTree } from \"./types\";\n\ninterface SunburstData {\n  ids: string[];\n  labels: string[];\n  parents: string[];\n  values: number[];\n}\n\nconst isStringArray = (x: any[]): x is string[] => x.every((i) => typeof i === \"string\");\n\ntype OptionKeys = KeysMatching<VideoGame, string | VideoGame[\"startDate\"]>;\n\nconst Sunburst = ({ data, measure }: { data: VideoGame[]; measure: Measure }) => {\n  const [{ ids, labels, parents, values }, setSunburstData] = useState<SunburstData>({\n    ids: [],\n    labels: [],\n    parents: [],\n    values: [],\n  });\n\n  return (\n    <Card>\n      <CardHeader\n        title=\"Sunburst\"\n        action={<SunBurstControls data={data} setSunburstData={setSunburstData} measure={measure} />}\n      />\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={[\n            {\n              labels,\n              parents,\n              values,\n              ids,\n              type: \"sunburst\",\n              branchvalues: \"total\",\n              //@ts-ignore\n              maxdepth: 3,\n              sort: false,\n            },\n          ]}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{ margin: { l: 0, r: 0, b: 0, t: 0 } }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst options: OptionKeys[] = [\n  \"company\",\n  \"format\",\n  \"franchise\",\n  \"game\",\n  \"platform\",\n  \"publisher\",\n  \"rating\",\n  \"status\",\n  \"startDate\",\n];\n\nconst SunBurstControls = ({\n  data,\n  setSunburstData,\n  measure,\n}: {\n  data: VideoGame[];\n  setSunburstData: (d: SunburstData) => void;\n  measure: Measure;\n}) => {\n  const groups = [\n    useState<OptionKeys>(\"company\"),\n    useState<OptionKeys>(\"platform\"),\n    useState<OptionKeys>(\"franchise\")\n  ];\n  const groupVals = groups.map(([val]) => val);\n\n  useEffect(() => {\n    const sunburstData = dataToSunburstData(data, groupVals, measure);\n    setSunburstData(sunburstData);\n    // eslint-disable-next-line\n  }, [setSunburstData, data, measure, ...groupVals]);\n\n  return (\n    <FormGroup>\n      {groups.map(([val, setVal]) => (\n        <SelectBox options={options} key={val} value={val} setValue={setVal} />\n      ))}\n    </FormGroup>\n  );\n};\n\nconst dataToSunburstData = (data: VideoGame[], groups: OptionKeys[], measure: Measure) => {\n  const keyToVal = (game: VideoGame, key: OptionKeys) => {\n    const val = game[key];\n    if (val instanceof Date) {\n      return val.getFullYear().toString();\n    }\n    return val;\n  };\n\n  const grouped = data\n    .filter((curr) => {\n      if (measure === \"Hours\" && curr.hours === undefined) return false;\n      return true;\n    })\n    .reduce((tree, game) => {\n      const groupVals = groups.map((group) => keyToVal(game, group));\n      if (!isStringArray(groupVals)) return tree;\n      let obj = tree;\n      groupVals.forEach((val) => (obj = obj[val] = (obj[val] as VideoGameTree) || {}));\n      obj[game.game] = game;\n      return tree;\n    }, {} as VideoGameTree);\n\n  const ids: string[] = [];\n  const labels: string[] = [];\n  const parents: string[] = [];\n  const values: number[] = [];\n\n  const recurseGroup = (tree: VideoGameTree, parent: string) => {\n    let total = 0;\n    Object.entries(tree)\n      .sort(([val], [val2]) => val.localeCompare(val2))\n      .forEach(([key, value]) => {\n        let count: number;\n        if (isVideoGame(value)) {\n          count = measure === \"Hours\" ? value.hours! : 1;\n        } else {\n          count = recurseGroup(value, `${parent}-${key}`);\n        }\n\n        labels.push(key);\n        parents.push(parent);\n        values.push(count);\n        ids.push(`${parent}-${key}`);\n        total += count;\n      });\n\n    return total;\n  };\n\n  recurseGroup(grouped, \"\");\n\n  return {\n    labels,\n    parents,\n    values,\n    ids,\n  };\n};\n\nexport default Sunburst;\n","export type KeysMatching<T, V> = keyof { [P in keyof T as T[P] extends V ? P : never]: P };\nexport type Predicate<T> = (input: T) => boolean;\n\ninterface VideoGameBase {\n  game: string;\n  platform: Platform;\n  company: Company;\n  publisher: string;\n  franchise: string;\n  genre: string[];\n  theme: string[];\n  rating: string;\n  format: Format;\n  status: Status;\n  hours?: number;\n  numDays?: number;\n}\n\ninterface VideoGameWithDate extends VideoGameBase {\n  exactDate: true;\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface VideoGameWithoutDate extends VideoGameBase {\n  exactDate: false;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport type VideoGame = VideoGameWithDate | VideoGameWithoutDate\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.game;\n\nexport type Measure = \"Hours\" | \"Count\";\n","import { ThemeProvider } from \"@emotion/react\";\nimport { createTheme, Stack } from \"@mui/material\";\nimport { useEffect, useState } from \"react\";\n\nimport Barchart from \"./vg/Barchart\";\nimport Timeline from \"./vg/Timeline\";\nimport Filter from \"./vg/Filter\";\nimport Stats from \"./vg/Stats\";\nimport Sunburst from \"./vg/Sunburst\";\nimport { Company, Format, Measure, Platform, Predicate, Status, VideoGame } from \"./vg/types\";\n\nconst GamesGraphs = ({ hide } : { hide: boolean}) => {\n  const [data, setData] = useState<Record<string, string>[]>();\n  const [filterFunc, setFilterFunc] = useState<Predicate<VideoGame>>(() => () => true);\n  const [measure, setMeasure] = useState<Measure>(\"Count\");\n\n  useEffect(() => getVgData(setData), []);\n\n  if (!data || hide) {\n    console.log(\"no data\");\n    return null;\n  }\n\n  const vgData: VideoGame[] = data\n    .map((row) => {\n      const startDate = row[\"Start Date\"] ? new Date(row[\"Start Date\"]) : undefined;\n      let endDate = row[\"End Date\"] ? new Date(row[\"End Date\"]) : undefined;\n      if (endDate && row[\"End Date\"].length < 5) endDate.setFullYear(endDate.getFullYear() + 1);\n      endDate = startDate && (endDate || new Date())\n      return {\n        game: row[\"Game\"],\n        platform: row[\"Platform\"] as Platform,\n        company: row[\"Platform\"].split(\" \")[0]! as Company,\n        franchise: row[\"Franchise\"],\n        genre: row[\"Genre\"].split(\"\\n\"),\n        theme: row[\"Theme\"].split(\"\\n\"),\n        format: row[\"Format\"] as Format,\n        publisher: row[\"Publisher\"],\n        rating: row[\"Rating\"],\n        status: row[\"Status\"] as Status,\n        exactDate: !!row[\"Start Date\"] && row[\"Start Date\"].length > 5,\n        startDate: startDate,\n        endDate: endDate,\n        hours: row[\"Hours\"] ? parseInt(row[\"Hours\"]) : undefined,\n        numDays: dateDiffInDays(startDate, endDate),\n      } as VideoGame;\n    })\n    .filter(filterFunc);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Stack spacing={2}>\n        <Stats data={vgData} />\n        <Timeline data={vgData} />\n        <Sunburst data={vgData} measure={measure} />\n        <Barchart data={vgData} measure={measure} />\n        <Filter setFilterFunc={setFilterFunc} measure={measure} setMeasure={setMeasure} />\n      </Stack>\n    </ThemeProvider>\n  );\n};\n\nconst theme = createTheme({\n  components: {\n    MuiCard: {\n      styleOverrides: {\n        root: ({ theme }) => ({\n          \"&:hover\": {\n            boxShadow: theme.shadows[4],\n          },\n        }),\n      },\n    },\n  },\n});\n\nconst arrayToJson = (data: string[][]) => {\n  const [header, ...rows] = data;\n  return rows.map((row) =>\n    row.reduce((json, val, index) => {\n      json[header[index]] = val\n      return json\n    }, {} as Record<string, string>)\n  );\n};\n\nconst getVgData = (setData: (b: Record<string, string>[]) => void) => {\n  gapi.client.sheets.spreadsheets.values\n    .get({\n      spreadsheetId: \"1JCAN_lB2QaVxj1rD4f88mN4tHjmhxF3CZlGtZGwYCLk\",\n      range: \"Games List!A:Z\",\n    })\n    .then((response) => response.result.values!)\n    .then(arrayToJson)\n    .then(setData);\n};\n\nconst dateDiffInDays = (dt1?: Date, dt2?: Date) => {\n  if (!dt1 || !dt2) return;\n  return Math.floor(\n    (dt2.getTime() - dt1.getTime()) /\n    (1000 * 60 * 60 * 24) + 1\n  );\n};\n\nexport default GamesGraphs;\n"],"names":["Plotly","bar","sunburst","createPlotlyComponent","SelectBox","options","value","setValue","Select","variant","onChange","event","target","map","option","MenuItem","none","company","format","franchise","game","platform","publisher","rating","status","data","measure","useState","group","setGroup","cumulative","setCumulative","grouped","reduce","tree","groupVal","year","startDate","getFullYear","toString","hours","Object","values","forEach","lastAmount","min","parseInt","keys","sort","end","Date","i","Card","CardHeader","title","action","FormGroup","FormControlLabel","label","control","Switch","checked","_","CardContent","style","width","height","entries","val","type","name","x","y","stackgroup","config","displayModeBar","responsive","layout","showlegend","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","tooltip","row","toLocaleDateString","endDate","numDays","chartHeight","groupData","setGroupData","groupFunc","gameData","filter","exactDate","overflowX","overflowY","chartType","id","role","concat","setFilterFunc","setMeasure","filterEndless","setFilterEndless","filterPokemon","setFilterPokemon","filterUnconfirmed","setFilterUnconfirmed","useEffect","filters","vgData","p","c","fabProps","enabled","sx","backgroundColor","Stack","direction","spacing","position","right","theme","bottom","SpeedDial","icon","SpeedDialIcon","FilterAlt","ariaLabel","SpeedDialAction","FabProps","tooltipOpen","tooltipTitle","AllInclusive","onClick","QuestionMark","CatchingPokemon","Fab","color","Functions","Timer","Intl","NumberFormat","TotalTime","total","pre","cur","StatCard","content","TotalGames","length","AverageTimePerGame","Math","round","ShowChart","ThisYearSoFar","Update","RecentlyComplete","recent","a","slice","StatList","Pause","MostPlayed","most","Whatshot","CurrentlyPlaying","xs","md","flex","titleTypographyProps","subheader","avatar","PlayArrow","CardMedia","component","src","SkipNext","List","Fragment","Divider","ListItem","ListItemText","secondaryTypographyProps","primary","secondary","justifyContent","Typography","align","container","alignItems","SunBurstControls","setSunburstData","groups","groupVals","sunburstData","dataToSunburstData","setVal","curr","undefined","key","keyToVal","every","obj","ids","labels","parents","recurseGroup","parent","val2","localeCompare","count","push","branchvalues","maxdepth","createTheme","components","MuiCard","styleOverrides","root","boxShadow","shadows","arrayToJson","header","json","index","getVgData","setData","gapi","client","sheets","spreadsheets","get","spreadsheetId","range","then","response","result","dateDiffInDays","dt1","dt2","floor","getTime","hide","filterFunc","console","log","setFullYear","split","genre"],"sourceRoot":""}