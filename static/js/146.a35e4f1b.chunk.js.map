{"version":3,"file":"static/js/146.a35e4f1b.chunk.js","mappings":"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","sources":["common/Barchart.tsx","utils/colourUtils.ts","common/Card.tsx","common/Finished.tsx","common/Stats.tsx","common/Timeline.tsx","plotly.ts","show/Barchart.tsx","show/CardMediaImage.tsx","show/types.ts","show/Stats.tsx","show/Timeline.tsx","show/Graphs.tsx","utils/mathUtils.ts","vg/SelectionComponents.tsx","vg/types.ts"],"sourcesContent":["import { Card, CardContent, useTheme } from \"@mui/material\";\nimport Plot from \"../plotly\";\nimport { ReactNode } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { Grouped } from \"../vg/Barchart\";\n\nconst Barchart = ({\n  grouped,\ncumulative,\n  stack,\n  children,\n}: {\n  grouped: Grouped;\n  colours?: Record<string, string>;\n  cumulative: boolean;\n  stack: boolean;\n  children?: ReactNode;\n}) => {\n  const theme = useTheme();\n  let data: Grouped;\n  if (cumulative) {\n    data = convertToCumulative(grouped);\n    stack = true;\n  } else {\n    data = grouped;\n  }\n\n  return (\n    <Card>\n      {children}\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(data).map(([group, { color, data: val }]) => ({\n            type: cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n            marker: {\n              color: Object.entries(data).length === 1 ? theme.palette.primary.main : color,\n            },\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: Object.keys(grouped).length > 1 && Object.keys(grouped).length < 8,\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            plot_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            font: {\n              color: theme.palette.text.primary,\n            },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst convertToCumulative = (grouped: Grouped) => {\n  return Object.entries(grouped).reduce((prev, [key, { color, data: group }]) => {\n    prev[key] = { color: color, data: {} };\n    let lastAmount = 0;\n    const minYearMonth = Object.keys(group).sort()[0];\n    const [minYear, minMonth] = minYearMonth.split(\"-\").map((s) => parseInt(s));\n    for (let i = minYear; i <= CURRENT_YEAR; i++) {\n      for (let j = i === minYear ? minMonth : 1; j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1 : 12); j++) {\n        const yearMonth = i + \"-\" + (j < 10 ? \"0\" : \"\") + j;\n        lastAmount = prev[key].data[yearMonth] = lastAmount + (group[yearMonth] || 0);\n      }\n    }\n    return prev;\n  }, {} as Grouped);\n};\n\nexport default Barchart;\n","import { FastAverageColor } from \"fast-average-color\";\n\nconst fac = new FastAverageColor();\nconst map: Record<string, string> = {};\n\nexport const imageToColour = (img: HTMLImageElement | string | undefined) => {\n  if (img === undefined || img === null) return undefined;\n  if (typeof img === \"string\") {\n    const uri = img === encodeURI(img) ? img : encodeURI(img);\n    return map[uri];\n  }\n  return (map[img.src] ||= fac.getColor(img, { algorithm: \"dominant\", }).hex);\n};\n","import { Box, Card, CardContent, CardMedia, Chip, Dialog, Stack, SxProps, Theme, Typography } from \"@mui/material\";\nimport { FunctionComponent, ReactNode, useRef, useState } from \"react\";\nimport { imageToColour } from \"../utils/colourUtils\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\n\nexport type CardMediaImageProps = {\n  image?: string;\n  alt: string;\n  chip?: [string, string?];\n  landscape?: boolean;\n  height?: string;\n  width?: string;\n  footerComponent?: (colour?: string) => ReactNode;\n  detailComponent?: (colour?: string) => ReactNode;\n  sx?: SxProps<Theme>;\n}\n\nexport type TypedCardMediaImage<T> = FunctionComponent<Omit<CardMediaImageProps, \"banner\" | \"alt\"> & { item: T }>\n\nexport const CardMediaImage = ({\n  image,\n  alt,\n  chip,\n  landscape = false,\n  height,\n  width,\n  footerComponent,\n  detailComponent,\n  sx\n}: CardMediaImageProps) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [colour, setColour] = useState<string | undefined>(imageToColour(image));\n  return (\n    <>\n      <Box sx={{ height, width, position: \"relative\" }}>\n        <CardMedia\n          height={height}\n          width={width}\n          component=\"img\"\n          crossOrigin=\"anonymous\"\n          src={image}\n          alt={alt}\n          onClick={() => setDialogOpen(true)}\n          ref={imgRef}\n          onLoad={() => {\n            footerComponent && setColour?.(imageToColour(imgRef.current!));\n          }}\n          sx={sx}\n        />\n        {chip && (\n          <Chip\n            sx={{\n              position: \"absolute\",\n              top: 0,\n              right: 0,\n              margin: 1,\n              opacity: 0.8,\n              bgcolor: chip[1] || \"primary.main\",\n              color: (theme) => (chip[1] ? theme.palette.getContrastText(chip[1]) : undefined),\n            }}\n            label={chip[0]}\n            variant=\"filled\"\n            size=\"small\"\n          />\n        )}\n      </Box>\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth={false}\n        scroll=\"body\"\n        PaperProps={{ sx: { backgroundColor: \"unset\", boxShadow: \"unset\", backgroundImage: \"unset\" } }}\n      >\n        <Card>\n          <Box position=\"relative\" onClick={() => setDialogOpen(false)}>\n            <Box\n              sx={{\n                background: `linear-gradient(to bottom, ${colour}00 80%, ${colour})`,\n                position: \"absolute\",\n                top: \"90%\",\n                left: 0,\n                right: 0,\n                bottom: 0,\n              }}\n            />\n            <CardMedia\n              component=\"img\"\n              sx={{\n                objectFit: \"contain\",\n                maxHeight: theme => `calc(100vh - ${theme.spacing(4)})`,\n                maxWidth: theme => `calc(100vw - ${theme.spacing(4)})`,\n                aspectRatio: \"auto\",\n                height: { xs: landscape ? \"unset\" : \"100%\", md: landscape ? \"unset\" : \"100vh\" },\n                width: { xs: landscape ? \"100%\" : \"unset\", md: landscape ? \"100vw\" : \"unset\" },\n              }}\n              onLoad={() => {\n                !footerComponent && setColour?.(imageToColour(imgRef.current!));\n              }}\n              src={image}\n              title={alt}\n              onClick={() => setDialogOpen(false)}\n            />\n          </Box>\n          <Box display=\"flex\">\n            <Box flexGrow=\"1\" width=\"0px\">\n              {detailComponent?.(colour)}\n            </Box>\n          </Box>\n        </Card>\n      </Dialog>\n      {footerComponent?.(colour)}\n    </>\n  );\n};\n\nexport const DetailCard = ({ colour, label, value, large }: { colour?: string, label: string, value: string | ReactNode, large?: boolean }) => {\n  if (!value) return null;\n  return (\n      <Grid xs={large ? 6 : 3}>\n          <Card sx={{ height: \"100%\", background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n              <CardContent sx={{\n                  \":last-child\": { paddingBottom: 2 },\n                  height: \"100%\"\n              }}>\n                  <Stack direction={\"column\"} height=\"100%\" justifyContent=\"space-between\">\n                      <Typography align=\"center\" variant=\"body1\">\n                          {value}\n                      </Typography>\n                      <Typography align=\"center\" variant=\"caption\" sx={{ opacity: 0.8 }}>\n                          {label}\n                      </Typography>\n                  </Stack>\n              </CardContent>\n          </Card>\n      </Grid>\n  );\n}","import { Card, CardHeader, CardContent, FormGroup, FormControlLabel, Switch, Dialog } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { useEffect, useState } from \"react\";\nimport { TypedCardMediaImage } from \"./Card\";\n\nconst Finished = <U extends { banner?: string; startDate?: Date; name: string }>({\n  title,\n  data,\n  width,\n  colour,\n  MediaComponent\n}: {\n  title: string;\n  data: U[];\n  width: number;\n  colour?: (item: U) => string;\n  MediaComponent: TypedCardMediaImage<U>;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  if (!mounted) return null;\n  const recent = data.filter((show) => show.banner).sortByKey(\"startDate\");\n  const content = (\n    <>\n      <CardHeader\n        title={title}\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Maximise\"\n              control={<Switch checked={dialogOpen} onChange={(_, checked) => setDialogOpen(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          {recent.map((item) => (\n            <Grid alignSelf=\"stretch\" key={item.name} xs={dialogOpen ? 12 : width}>\n              <Card\n                sx={{\n                  height: \"100%\",\n                  borderColor: colour && colour(item) + 90,\n                  borderStyle: colour && \"solid\",\n                  borderWidth: colour && 3,\n                }}\n              >\n                <MediaComponent item={item} landscape={\"format\" in item} image={item.banner} height=\"100%\" />\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </>\n  );\n\n  return (\n    <Card>\n      {content}\n      <Dialog open={dialogOpen} fullScreen>\n        {content}\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default Finished;\n","import { Card, CardContent, CardHeader, Divider, Stack, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"../vg/types\";\nimport { Season } from \"../show/types\";\nimport { TypedCardMediaImage } from \"./Card\";\nimport { ReactNode } from \"react\";\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: ReactNode;\n  title: string;\n  content: string | [string, number][];\n}) => {\n  const formattedContent =\n    typeof content === \"string\" ? (\n      <Typography align=\"right\" variant=\"h4\">\n        {content}\n      </Typography>\n    ) : (\n      <Stack divider={<Divider orientation=\"vertical\" flexItem />} justifyContent=\"space-evenly\" direction={\"row\"}>\n        {content.map(([key, val]) => (\n          <Stack key={key} direction={\"column\"} flex=\"1 1 0\">\n            <Typography align=\"center\" variant=\"h5\">\n              {format(val)}\n            </Typography>\n            <Typography align=\"center\" variant=\"subtitle2\" color=\"text.secondary\">\n              {key}\n            </Typography>\n          </Stack>\n        ))}\n      </Stack>\n    );\n  return (\n    <Grid xs={12} sm={6} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader\n          titleTypographyProps={{ variant: \"h6\" }}\n          title={title}\n          avatar={icon}\n          sx={{ paddingBottom: \"5px\" }}\n        />\n        <CardContent sx={{ paddingTop: \"5px\" }}>{formattedContent}</CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport type StatsListProps<T extends VideoGame | Season> = {\n  icon: ReactNode;\n  title: string;\n  content: T[];\n  width?: [number, number, number];\n  labelComponent: (t: T) => string[][];\n  chipComponent?: (t: T) => [string, string?];\n  MediaComponent: TypedCardMediaImage<T>;\n  pictureWidth?: [number, number, number];\n  aspectRatio?: string;\n  divider?: boolean;\n  landscape?: boolean;\n}\n\nexport const StatList = <T extends VideoGame | Season>({\n  icon,\n  title,\n  content,\n  width = [12, 12, 6],\n  chipComponent,\n  labelComponent,\n  ...props\n}: StatsListProps<T>) => {\n  return (\n    <Grid xs={width[0]} sm={width[1]} md={width[2]}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Grid\n            container\n            sx={{ overflow: \"auto\", flexWrap: { xs: \"nowrap\", md: width[2] === 12 ? \"nowrap\" : \"wrap\" } }}\n            spacing={1}\n            alignItems=\"center\"\n          >\n            {content.map((entry) => {\n              const { name } = \"name\" in entry ? entry : entry.show;\n              return (\n                <StatsListCard\n                  key={title + \"-statslistcard-\" + name}\n                  item={entry}\n                  labels={labelComponent(entry)}\n                  chip={chipComponent?.(entry)}\n                  {...props}\n                />\n              );\n            })}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nconst StatsListCard = <T extends VideoGame | Season>({\n  item,\n  labels,\n  chip,\n  pictureWidth = [12, 4, 6],\n  aspectRatio,\n  divider,\n  landscape = false,\n  MediaComponent\n}: {\n  item: T;\n  labels: string[][];\n  chip?: [string, string?];\n  pictureWidth?: [number, number, number];\n  aspectRatio?: string;\n  divider?: boolean;\n  landscape?: boolean;\n  MediaComponent: TypedCardMediaImage<T>;\n}) => {\n  const dividerComponent = <Divider orientation=\"vertical\" flexItem />;\n  return (\n    <Grid flexShrink={0} alignSelf=\"stretch\" xs={pictureWidth[0]} sm={pictureWidth[1]} md={pictureWidth[2]}>\n      <Card variant=\"outlined\" sx={{ height: \"100%\" }}>\n        <MediaComponent\n          item={item}\n          width=\"100%\"\n          sx={{ aspectRatio, flexShrink: 0 }}\n          chip={chip}\n          landscape={landscape}\n          footerComponent={\n            (colour?: string) => (\n              <CardContent\n                sx={{\n                  padding: \"10px\",\n                  \":last-child\": { paddingBottom: \"10px\" },\n                  background: colour,\n                  color: (theme) => colour && theme.palette.getContrastText(colour),\n                }}\n              >\n                {labels.map((stacks, index, labels) => (\n                  <Stack\n                    key={`stacks-${index}`}\n                    justifyContent={stacks.length === 1 ? \"center\" : \"space-between\"}\n                    direction=\"row\"\n                    divider={labels.length === 1 || divider ? dividerComponent : null}\n                  >\n                    {stacks.map((val) => (\n                      <Typography key={val} variant=\"subtitle2\">\n                        {val}\n                      </Typography>\n                    ))}\n                  </Stack>\n                ))}\n              </CardContent>\n            )\n          }\n        />\n      </Card>\n    </Grid>\n  );\n};\n","import { Box, Card, CardContent, useTheme } from \"@mui/material\";\nimport { ReactNode, useCallback, useEffect, useState } from \"react\";\nimport Chart from \"react-google-charts\";\n\nconst DEFAULT_HEIGHT = 90;\n\nconst Timeline = ({ data, children }: { data: [string, string, string, Date, Date][]; children?: ReactNode }) => {\n  const [height, setHeight] = useState<string | number>(DEFAULT_HEIGHT + \"vh\");\n  const theme = useTheme();\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"*\" },\n      { type: \"string\", id: \"Name\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const callback = useCallback(() => {\n    const labels = document.getElementsByTagName(\"text\");\n    for (let label of labels) {\n      if (label.getAttribute(\"text-anchor\") === \"middle\") {\n        label.setAttribute(\"fill\", theme.palette.text.secondary);\n      }\n    }\n\n    const rects = document.getElementsByTagName(\"rect\");\n    for (let rect of rects) {\n      if (rect.getAttribute(\"stroke\") === \"#9a9a9a\") {\n        const newHeight = rect.height.baseVal.value + 50;\n        setHeight(\n          newHeight < document.documentElement.clientHeight * (DEFAULT_HEIGHT / 100) ? newHeight : DEFAULT_HEIGHT + \"vh\"\n        );\n      }\n    }\n  }, [theme.palette.text.secondary]);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", callback);\n    return () => window.removeEventListener(\"resize\", callback);\n  }, [callback]);\n\n  return (\n    <Box\n      sx={{\n        \".backgroundPaper\": {\n          backgroundColor: \"background.paper\",\n        },\n      }}\n    >\n      <Card>\n        {children}\n        <CardContent>\n          <Box sx={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n            <Chart\n              key={height}\n              width=\"400vw\"\n              height={height}\n              chartType=\"Timeline\"\n              data={timelineHeader.concat(data)}\n              onLoad={() => {\n                setTimeout(callback, 50);\n              }}\n              chartEvents={[{ eventName: \"ready\", callback }]}\n              options={{\n                backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.grey.A700 : undefined,\n                timeline: { rowLabelStyle: { color: theme.palette.text.primary } },\n              }}\n            />\n          </Box>\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default Timeline;\n","import Plotly from \"plotly.js/lib/core\";\nimport bar from \"plotly.js/lib/bar\";\nimport sunburst from \"plotly.js/lib/sunburst\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst loadPlotly = () => {\n  Plotly.register([bar, sunburst]);\n  return createPlotlyComponent(Plotly);\n};\n\nexport default loadPlotly();\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"../vg/SelectionComponents\";\nimport { Measure, Season, Show, ShowStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\nimport { Grouped } from \"../vg/Barchart\";\n\nconst options: Record<ShowStringKeys | \"none\", boolean> = {\n  name: false,\n  status: true,\n  none: false,\n};\n\nconst ShowBarchart = ({ data, measure }: { data: Show[]; measure: Measure }) => {\n  const [group, setGroup] = useState<ShowStringKeys | \"none\">(\"none\");\n  const [cumulative, setCumulative] = useState(false);\n  let [stack, setStack] = useState(true);\n\n  let seasonArray = data.flatMap((show) => show.s);\n  const grouped = groupDate(seasonArray, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Episodes\" ? \"Episodes Watched\" : \"Hours Watched\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (ShowStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (data: Season[], group: ShowStringKeys | \"none\", measure: Measure, cumulative: boolean): Grouped => {\n  const grouped = data.reduce((tree, season) => {\n    const { show } = season;\n    const groupVal = group === \"none\" ? \"\" : show[group];\n    const year = cumulative\n      ? season.startDate?.toISOString().substring(0, 7)\n      : season.startDate?.getFullYear().toString();\n    if (!year || !season.minutes) return tree;\n\n    tree[groupVal] ??= { color: \"\", data: {} };\n    tree[groupVal].data[year] = (tree[groupVal].data[year] || 0) + (measure === \"Episodes\" ? season.e : season.minutes);\n    return tree;\n  }, {} as Grouped);\n\n  if (measure === \"Hours\") {\n    Object.values(grouped).forEach(({ data: record }) =>\n      Object.entries(record).forEach(([key, value]) => (record[key] = Math.floor(value / 60)))\n    );\n  }\n\n  return grouped;\n};\n\nexport default ShowBarchart;\n","import { Box, Card, CardContent, Stack, Tooltip, Typography } from \"@mui/material\";\nimport { CardMediaImage, DetailCard, TypedCardMediaImage } from \"../common/Card\";\nimport { Season, Show, isShow } from \"./types\";\nimport Grid from \"@mui/material/Unstable_Grid2/Grid2\";\nimport { statusToColour } from \"../vg/types\";\nimport { CURRENT_DATE, dateDiffInDays } from \"../utils/dateUtils\";\nimport { useState } from \"react\";\n\nconst ShowCardMediaImage = <T extends Show | Season>({ item, ...props }: Parameters<TypedCardMediaImage<T>>[0]) => {\n  const show = isShow(item) ? item : item.show;\n  return (\n    <CardMediaImage\n      alt={show.name}\n      image={show.banner}\n      detailComponent={(colour) => (\n        <CardContent sx={{ background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}>\n          <Grid container spacing={1}>\n            <TimelineCard colour={colour} item={show} />\n            <DetailCard colour={colour} label=\"Start Date\" value={show.startDate.toLocaleDateString()} />\n            <DetailCard colour={colour} label=\"End Date\" value={show.endDate?.toLocaleDateString()} />\n            <DetailCard colour={statusToColour(show)} label=\"Status\" value={show.status} />\n            <DetailCard colour={colour} label=\"Last Watched\" value={`S${show.s.length}E${show.s.at(-1)!.e}`} />\n            <DetailCard colour={colour} label=\"Hours\" value={Math.floor(show.minutes / 60)} />\n            <DetailCard colour={colour} label=\"Episodes\" value={show.e} />\n          </Grid>\n        </CardContent>\n      )}\n      {...props}\n    />\n  );\n};\n\nconst startYear = new Date(2008, 0, 1);\nconst days = dateDiffInDays(startYear, CURRENT_DATE)!;\n\nconst TimelineSegment = ({ percent }: { percent: number; }) => (\n  <Box sx={{ width: `${percent}%` }}>\n    <Box sx={{ height: (theme) => theme.spacing(1), bgcolor: \"grey\", opacity: 0.8 }} />\n  </Box>\n);\n\nconst TimelineCard = ({ colour, item }: { colour?: string; item: Show }) => {\n  const [enabled, setEnabled] = useState<Season>();\n  if (!item.startDate || item.startDate < startYear) return null;\n  let startDate = startYear;\n  let oddSeason = true;\n  const segments = item.s.flatMap((season) => {\n    const seasonSegments = [];\n\n    if (startDate < season.startDate) {\n      const daysToSeasonStart = dateDiffInDays(startDate, season.startDate)!;\n      const percentToSeasonStart = (daysToSeasonStart / days) * 100;\n      seasonSegments.push(<TimelineSegment key={`${season.s}-before`} percent={percentToSeasonStart} />);\n    }\n\n    const endDate = season.endDate || CURRENT_DATE;\n    const seasonLengthPercent = Math.max((dateDiffInDays(season.startDate, endDate)! / days) * 100, 0.5);\n    seasonSegments.push(\n      <Box\n        key={season.s}\n        onMouseEnter={() => setEnabled(season)}\n        onMouseLeave={() => setEnabled(undefined)}\n        sx={{ width: seasonLengthPercent + \"%\" }}\n      >\n        <Tooltip\n          title={\n            <>\n              <Typography variant=\"h6\" align=\"center\">\n                S{season.s}\n              </Typography>\n              <Typography>\n                {season.startDate.toLocaleDateString()} - {endDate.toLocaleDateString()}\n              </Typography>\n              <Typography>{season.e} Episodes</Typography>\n              <Typography>{Math.floor(season.minutes / 60)} Hours</Typography>\n            </>\n          }\n          placement=\"top\"\n        >\n          <Box\n            sx={{\n              height: (theme) => (enabled === season? theme.spacing(3) : theme.spacing(2)),\n              backgroundColor: `${oddSeason ? \"secondary\" : \"primary\"}.${enabled === season ? \"light\" : \"main\"}`,\n            }}\n          />\n        </Tooltip>\n      </Box>\n    );\n\n    startDate = new Date(endDate);\n    startDate.setDate(startDate.getDate() + 1);\n    oddSeason = !oddSeason;\n    return seasonSegments;\n  });\n\n  if (startDate <= CURRENT_DATE) {\n    const daysToEnd = dateDiffInDays(startDate, CURRENT_DATE)!;\n    const percentToEnd = (daysToEnd / days) * 100;\n    segments.push(<TimelineSegment key={\"last\"} percent={percentToEnd} />);\n  }\n\n  return (\n    <Grid xs={12}>\n      <Card\n        sx={{ height: \"100%\", background: colour, color: (theme) => colour && theme.palette.getContrastText(colour) }}\n      >\n        <CardContent\n          sx={{\n            \":last-child\": { paddingBottom: 0 },\n            height: \"100%\",\n            padding: 1,\n            paddingTop: 0,\n          }}\n        >\n          <Stack direction=\"row\" alignItems=\"center\" height={(theme) => theme.spacing(3)}>\n            {segments}\n          </Stack>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport default ShowCardMediaImage;\n","import { KeysMatching } from \"../utils/types\";\n\nexport interface Show {\n  name: string;\n  status: Status;\n  startDate: Date;\n  endDate?: Date;\n  anime: boolean;\n  s: Season[];\n  e: number;\n  minutes: number;\n  banner?: string;\n}\n\nexport interface Season {\n  s: number;\n  e: number;\n  subtitle?: string;\n  startDate: Date;\n  endDate?: Date;\n  episodeLength: number;\n  minutes: number;\n  show: Show;\n}\n\nexport type Status = \"Watching\" | \"Up To Date\" | \"Ended\" | \"Cancelled\" | \"Abandoned\";\n\nexport type ShowKeys = keyof Show;\nexport type ShowStringKeys = KeysMatching<Show, string>;\n\nexport type Measure = \"Hours\" | \"Episodes\";\n\nexport const isShow = (arg: Show | Season): arg is Show => \"name\" in arg","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { Season, Show } from \"./types\";\nimport { StatCard, StatList, StatsListProps } from \"../common/Stats\";\nimport ShowCardMediaImage from \"./CardMediaImage\";\n\nconst Stats = ({ data }: { data: Show[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerShow data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: Show[] }) => {\n  const totalShows = data.length;\n  const totalEpisodes = data.sum(\"e\");\n  const totalTime = Math.floor(data.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Shows\", totalShows],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s).filter((s) => s.startDate.getFullYear() === CURRENT_YEAR);\n  const totalSeasons = filtered.length;\n  const totalEpisodes = filtered.sum(\"e\");\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Update />}\n      title={`In ${CURRENT_YEAR}`}\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: Show[] }) => {\n  const grouped = data\n    .flatMap((show) => show.s)\n    .reduce((tree, s) => {\n      const year = s.startDate.getFullYear().toString();\n      if (!year || !s.minutes) return tree;\n      tree[year] ??= [0, 0, 0];\n      tree[year] = [tree[year][0] + 1, tree[year][1] + s.e, tree[year][2] + s.minutes];\n      return tree;\n    }, {} as Record<string, [number, number, number]>);\n\n  const seasons = Math.floor(Object.values(grouped).sum(0) / Object.keys(grouped).length);\n  const episodes = Math.floor(Object.values(grouped).sum(1) / Object.keys(grouped).length);\n  const hours = Math.floor(Object.values(grouped).sum(2) / Object.keys(grouped).length / 60);\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Yearly Average\"\n      content={[\n        [\"Seasons\", seasons],\n        [\"Episodes\", episodes],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerShow = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s);\n  const totalSeasons = Math.round(filtered.length / data.length);\n  const totalEpisodes = Math.round(filtered.sum(\"e\") / data.length);\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60 / data.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Show Average\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .flatMap((show) => show.s)\n    .filter((season) => season.endDate)\n    .sort((seasonA, seasonB) => (seasonA.endDate! < seasonB.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return (\n    <ShowStatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      chipComponent={({ show }) => [show.status, undefined]}\n      labelComponent={statsCardLabelStatsCardLabelRecentlyComplete}\n    />\n  );\n};\n\nconst statsCardLabelStatsCardLabelRecentlyComplete = (season: Season) => [\n  [\n    `S ${season.s}`,\n    season.endDate?.toLocaleDateString(undefined, { month: \"short\", year: \"numeric\", day: \"numeric\" }) || \"\",\n  ],\n  [`${season.e} Eps`, `${format(Math.round(season.minutes! / 60))} Hours`],\n];\n\nconst CurrentlyPlaying = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .filter((show) => show.status === \"Watching\")\n    .map((show) => show.s.at(-1)!)\n    .filter((season) => !season.endDate)\n    .sort((seasonA, seasonB) => (seasonA.startDate! < seasonB.startDate! ? 1 : -1));\n  return (\n    <ShowStatList\n      icon={<PlayArrow />}\n      title=\"Currently Watching\"\n      content={recent}\n      width={[12, 12, 12]}\n      pictureWidth={[6, 4, 2]}\n      labelComponent={statsCardLabelStatsCardLabelCurrentlyPlaying}\n    />\n  );\n};\n\nconst statsCardLabelStatsCardLabelCurrentlyPlaying = (season: Season) => [\n  [`S ${season.s}`, season.startDate?.toLocaleDateString() || \"\"],\n];\n\nconst ShowStatList = (props: Omit<StatsListProps<Season>, \"MediaComponent\">) => <StatList\n  MediaComponent={ShowCardMediaImage}\n  {...props} />\n\n\nexport default Stats;\n","import { CardHeader, FormGroup, FormControlLabel, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { Season, Show } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\nimport Timeline from \"../common/Timeline\";\n\nconst ShowTimeline = ({ data }: { data: Show[] }) => {\n  const [groupData, setGroupData] = useState(true);\n\n  const titleData: [string, Show | Season, string?][] = groupData\n    ? data.map((show) => [show.name, show, show.banner])\n    : data.flatMap((show) =>\n        show.s.map(\n          (s) =>\n            [`${show.name} - S${s.s}${s.subtitle ? \" - \" + s.subtitle : \"\"}`, s, show.banner] as [\n              string,\n              Season,\n              string?\n            ]\n        )\n      );\n\n  const showData: [string, string, string, Date, Date][] = titleData.map(([title, s, banner]) => [\n    \"*\",\n    title,\n    tooltip(title, s, banner),\n    s.startDate,\n    s.endDate || CURRENT_DATE,\n  ]);\n\n  return (\n    <Timeline data={showData}>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Combine Seasons\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n    </Timeline>\n  );\n};\n\nconst tooltip = (title: string, row: Show | Season, banner?: string) =>\n  `\n  <div style=\"display: flex;\" class=\"backgroundPaper\">\n    ${banner ? `<img src=\"${banner}\" style=\"height: 150px\" /><hr />` : \"\"}  \n    <div>     \n      <ul style=\"list-style-type: none;padding: 5px\">\n        <li>\n          <span><b>${title}</b></span>\n        </li>\n      </ul>\n      <hr />\n      <ul style=\"list-style-type: none;padding-left: 10px\">\n        <li>\n          <span><b>Hours: </b></span>\n          <span\">${Math.round(row.minutes / 60)}</span>\n        </li>\n        <li>\n          <span><b>Period: </b></span>\n          <span>${row.startDate.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n        </li>\n        <li>\n          <span><b>Episodes: </b></span>\n          <span>${row.e}</span>\n        </li>\n      </ul>\n    </div>     \n  </div>\n  `;\n\nexport default ShowTimeline;\n","import { Stack } from \"@mui/material\";\nimport Finished from \"../common/Finished\";\nimport Barchart from \"./Barchart\";\nimport Stats from \"./Stats\";\nimport Timeline from \"./Timeline\";\nimport { Show } from \"./types\";\nimport ShowCardMediaImage from \"./CardMediaImage\";\n\nconst Graphs = ({ data }: { data: Show[] }) => (\n  <Stack spacing={2}>\n    <Stats data={data} />\n    <Timeline data={data} />\n    <Barchart data={data} measure={\"Hours\"} />\n    <Finished title=\"All Shows\" data={data} width={3} MediaComponent={ShowCardMediaImage} />\n  </Stack>\n);\n\nexport default Graphs;\n","export const format = new Intl.NumberFormat().format;\n","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n","import { Show } from \"../show/types\";\nimport { KeysMatching } from \"../utils/types\";\n\ninterface VideoGameBase {\n  name: string;\n  platform: Platform;\n  company: Company;\n  developer: string;\n  publisher: string;\n  franchise: string;\n  genre: string;\n  theme: string[];\n  rating: string;\n  releaseDate: Date;\n  format: Format;\n  status: Status;\n  hours?: number;\n  numDays?: number;\n  banner?: string;\n}\n\ninterface VideoGameWithDate extends VideoGameBase {\n  exactDate: true;\n  startDate: Date;\n  endDate: Date;\n}\n\ninterface VideoGameWithoutDate extends VideoGameBase {\n  exactDate: false;\n  startDate?: Date;\n  endDate?: Date;\n}\n\nexport type VideoGame = VideoGameWithDate | VideoGameWithoutDate;\n\nexport type VideoGameKeys = keyof VideoGame;\nexport type VideoGameStringKeys = KeysMatching<VideoGame, string>;\n\nexport type Format = \"Physical\" | \"Digital\" | \"Pirated\";\nexport type Status = \"Playing\" | \"Endless\" | \"Abandoned\" | \"Beat\" | \"Backlog\" | \"Next\";\nexport type Company = \"PlayStation\" | \"Nintendo\" | \"PC\" | \"iOS\" | \"Xbox\";\nexport type Platform = `${Company}${string}`;\n\nexport interface VideoGameTree {\n  [key: string]: VideoGameTree | VideoGame;\n}\n\nexport const isVideoGame = (arg: VideoGameTree | VideoGame): arg is VideoGame => !!arg.name;\n\nexport type Measure = \"Hours\" | \"Count\";\n\nconst nintendoColour = \"#e60012\";\nconst playstationColour = \"#0070cc\";\nconst xboxColour = \"#107c10\";\nconst pcColour = \"#b5a596\";\nconst iosColour = \"#555555\";\n\nexport const companyToColor = ({ company }: VideoGame) => {\n  switch (company) {\n    case \"Nintendo\":\n      return nintendoColour;\n    case \"PlayStation\":\n      return playstationColour;\n    case \"Xbox\":\n      return xboxColour;\n    case \"PC\":\n      return pcColour;\n    case \"iOS\":\n      return iosColour;\n  }\n};\n\nexport const platformToShort: (vg: VideoGame) => [string, string] = (vg) => {\n  switch (vg.platform) {\n    case \"PlayStation 2\":\n      return [\"PS2\", companyToColor(vg)];\n    case \"PlayStation 3\":\n      return [\"PS3\", companyToColor(vg)];\n    case \"PlayStation P\":\n      return [\"PSP\", companyToColor(vg)];\n    case \"PlayStation 4\":\n      return [\"PS4\", companyToColor(vg)];\n    case \"PlayStation 5\":\n      return [\"PS5\", companyToColor(vg)];\n    case \"Nintendo Wii\":\n      return [\"Wii\", companyToColor(vg)];\n    case \"Nintendo GBC\":\n      return [\"GBC\", companyToColor(vg)];\n    case \"Nintendo GBA\":\n      return [\"GBA\", companyToColor(vg)];\n    case \"Nintendo DS\":\n      return [\"DS\", companyToColor(vg)];\n    case \"Nintendo 3DS\":\n      return [\"3DS\", companyToColor(vg)];\n    case \"Nintendo Switch\":\n      return [\"NSW\", companyToColor(vg)];\n    case \"PC\":\n      return [\"PC\", companyToColor(vg)];\n    case \"iOS\":\n      return [\"iOS\", companyToColor(vg)];\n    case \"Xbox 360\":\n      return [\"360\", companyToColor(vg)];\n    default:\n      throw new Error(\"Unknown platform: \" + vg.platform);\n  }\n};\n\nexport const ratingToColour = ({ rating }: VideoGame) => {\n  switch (rating) {\n    case \"3+\":\n    case \"7+\":\n      return \"rgb(137,195,46)\";\n    case \"12+\":\n    case \"16+\":\n      return \"rgb(242,144,0)\";\n    case \"18+\":\n      return \"rgb(214,0,21)\";\n    default:\n      throw new Error(\"Unknown rating: \" + rating);\n  }\n}\n\nexport const statusToColour = ({ status }: VideoGame | Show) => {\n  switch (status) {\n    case \"Abandoned\":\n      return \"rgb(214, 39, 40)\";\n    case \"Beat\":\n    case \"Ended\":\n      return \"rgb(44, 160, 44)\";\n    case \"Cancelled\":\n      return \"rgb(44, 160, 0)\";\n    case \"Endless\":\n    case \"Up To Date\":\n      return \"rgb(31, 119, 180)\";\n    case \"Playing\":\n    case \"Watching\":\n      return \"rgb(23, 190, 207)\";\n    case \"Next\":\n    case \"Backlog\":\n      return \"\";\n  }\n}\n"],"names":["convertToCumulative","grouped","Object","entries","reduce","prev","_ref4","_ref5","_slicedToArray","key","_ref5$","color","group","data","lastAmount","_minYearMonth$split$m","keys","sort","split","map","s","parseInt","_minYearMonth$split$m2","minYear","minMonth","i","CURRENT_YEAR","j","CURRENT_MONTH","yearMonth","_ref","cumulative","stack","children","theme","useTheme","_jsxs","Card","_jsx","CardContent","Plot","style","width","height","_ref2","_ref3","_ref3$","val","type","name","x","y","values","stackgroup","undefined","marker","length","palette","primary","main","config","displayModeBar","responsive","layout","showlegend","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","paper_bgcolor","mode","plot_bgcolor","font","text","fac","FastAverageColor","imageToColour","img","_img$src","uri","encodeURI","src","getColor","algorithm","hex","CardMediaImage","image","alt","chip","_ref$landscape","landscape","footerComponent","detailComponent","sx","_useState","useState","_useState2","dialogOpen","setDialogOpen","imgRef","useRef","_useState3","_useState4","colour","setColour","_Fragment","Box","position","CardMedia","component","crossOrigin","onClick","ref","onLoad","current","Chip","top","right","opacity","bgcolor","getContrastText","label","variant","size","Dialog","open","onClose","maxWidth","scroll","PaperProps","backgroundColor","boxShadow","backgroundImage","background","concat","left","bottom","objectFit","maxHeight","spacing","aspectRatio","xs","md","title","display","flexGrow","DetailCard","value","large","Grid","paddingBottom","Stack","direction","justifyContent","Typography","align","MediaComponent","mounted","setMounted","useEffect","recent","filter","show","banner","sortByKey","content","CardHeader","action","FormGroup","row","FormControlLabel","control","Switch","checked","onChange","_","container","alignItems","item","alignSelf","borderColor","borderStyle","borderWidth","fullScreen","StatCard","icon","formattedContent","divider","Divider","flexItem","flex","format","sm","titleTypographyProps","avatar","paddingTop","StatList","_ref4$width","chipComponent","labelComponent","props","_objectWithoutProperties","_excluded","overflow","flexWrap","entry","StatsListCard","_objectSpread","labels","_ref6","_ref6$pictureWidth","pictureWidth","_ref6$landscape","dividerComponent","flexShrink","padding","stacks","index","DEFAULT_HEIGHT","setHeight","callback","useCallback","_step","document","getElementsByTagName","_iterator","_createForOfIteratorHelper","n","done","getAttribute","setAttribute","secondary","err","e","f","_step2","rects","_iterator2","rect","newHeight","baseVal","documentElement","clientHeight","window","addEventListener","removeEventListener","overflowX","overflowY","Chart","chartType","id","role","setTimeout","chartEvents","eventName","options","grey","A700","timeline","rowLabelStyle","Plotly","bar","sunburst","createPlotlyComponent","status","none","groupDate","measure","tree","season","_season$startDate","_season$startDate2","_tree$groupVal","groupVal","year","startDate","toISOString","substring","getFullYear","toString","minutes","forEach","record","Math","floor","setGroup","setCumulative","_useState5","_useState6","setStack","seasonArray","flatMap","Barchart","SelectBox","setValue","disabled","startYear","Date","days","dateDiffInDays","CURRENT_DATE","TimelineSegment","percent","TimelineCard","enabled","setEnabled","oddSeason","segments","seasonSegments","percentToSeasonStart","push","endDate","seasonLengthPercent","max","onMouseEnter","onMouseLeave","Tooltip","toLocaleDateString","placement","setDate","getDate","percentToEnd","_show$endDate","statusToColour","at","AllTime","totalShows","totalEpisodes","sum","totalTime","Timer","ThisYearSoFar","filtered","totalSeasons","Update","Averages","_tree$year","seasons","episodes","hours","ShowChart","AveragesPerShow","round","AutoGraph","RecentlyComplete","seasonA","seasonB","slice","ShowStatList","Pause","_ref7","statsCardLabelStatsCardLabelRecentlyComplete","_season$endDate","month","day","CurrentlyPlaying","_ref8","PlayArrow","statsCardLabelStatsCardLabelCurrentlyPlaying","ShowCardMediaImage","tooltip","_row$endDate","groupData","setGroupData","showData","subtitle","Timeline","Stats","Finished","Intl","NumberFormat","Select","event","target","option","MenuItem","isVideoGame","arg","companyToColor","company","platformToShort","vg","platform","Error","ratingToColour","rating"],"sourceRoot":""}