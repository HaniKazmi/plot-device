{"version":3,"file":"static/js/579.77caa729.chunk.js","mappings":"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","sources":["common/Barchart.tsx","common/Card.tsx","common/Finished.tsx","common/Stats.tsx","plotly.ts","show/Barchart.tsx","show/Stats.tsx","show/Timeline.tsx","show/Graphs.tsx","utils/mathUtils.ts","vg/SelectionComponents.tsx"],"sourcesContent":["import { Card, CardContent, useTheme } from \"@mui/material\";\nimport Plot from \"../plotly\";\nimport { ReactNode } from \"react\";\nimport { CURRENT_MONTH, CURRENT_YEAR } from \"../utils/dateUtils\";\n\nconst Barchart = ({\n  grouped,\n  cumulative,\n  stack,\n  children,\n}: {\n  grouped: Record<string, Record<string, number>>;\n  cumulative: boolean;\n  stack: boolean;\n  children?: ReactNode;\n}) => {\n  const theme = useTheme();\n  let data: Record<string, Record<string, number>>;\n  if (cumulative) {\n    data = convertToCumulative(grouped);\n    stack = true;\n  } else {\n    data = grouped;\n  }\n\n  return (\n    <Card>\n      {children}\n      <CardContent>\n        <Plot\n          style={{ width: \"100%\", height: \"95vh\" }}\n          data={Object.entries(data).map(([group, val]) => ({\n            type: cumulative || !stack ? \"scatter\" : \"bar\",\n            name: group,\n            x: Object.keys(val),\n            y: Object.values(val),\n            stackgroup: stack ? \"*\" : undefined,\n          }))}\n          config={{ displayModeBar: false, responsive: true }}\n          layout={{\n            showlegend: Object.keys(grouped).length > 1 && Object.keys(grouped).length < 8,\n            legend: { x: 0, y: 1, orientation: \"h\" },\n            barmode: stack ? \"stack\" : undefined,\n            margin: { l: 40, r: 0, t: 0, b: 40 },\n            xaxis: { tickmode: \"array\" },\n            paper_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            plot_bgcolor: theme.palette.mode === \"dark\" ? \"rgba(0,0,0,0)\" : undefined,\n            font: {\n              color: theme.palette.text.primary,\n            },\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nconst convertToCumulative = (grouped: Record<string, Record<string, number>>) => {\n  return Object.entries(grouped).reduce((prev, [key, group]) => {\n    prev[key] = {};\n    let lastAmount = 0;\n    const minYearMonth = Object.keys(group).sort()[0];\n    const [minYear, minMonth] = minYearMonth.split(\"-\").map((s) => parseInt(s));\n    for (let i = minYear; i <= CURRENT_YEAR; i++) {\n      for (let j = i === minYear ? minMonth : 1; j <= (i === CURRENT_YEAR ? CURRENT_MONTH + 1 : 12); j++) {\n        const yearMonth = i + \"-\" + (j < 10 ? \"0\" : \"\") + j;\n        lastAmount = prev[key][yearMonth] = lastAmount + (group[yearMonth] || 0);\n      }\n    }\n    return prev;\n  }, {} as Record<string, Record<string, number>>);\n};\n\nexport default Barchart;\n","import { CardMedia, Dialog, SxProps, Theme } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport const CardMediaImage = ({\n  image,\n  alt,\n  ...props\n}: {\n  image?: string;\n  alt: string;\n  height?: string;\n  width?: string;\n  sx?: SxProps<Theme>;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n  const content = <CardMedia component=\"img\" src={image} alt={alt} onClick={() => setDialogOpen(true)} {...props} />;\n  return (\n    <>\n      {content}\n      <Dialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        maxWidth={false}\n        PaperProps={{ sx: { backgroundColor: \"unset\", boxShadow: \"unset\", backgroundImage: \"unset\" } }}\n      >\n        <img\n          style={{ maxHeight: \"calc(100vh - 64px)\", objectFit: \"contain\", maxWidth: \"100%\", width: \"100vw\" }}\n          src={image}\n          alt={alt}\n          onClick={() => setDialogOpen(false)}\n        />\n      </Dialog>\n    </>\n  );\n};\n","import { Card, CardHeader, CardContent, FormGroup, FormControlLabel, Switch, Dialog } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { useState } from \"react\";\nimport { CardMediaImage } from \"./Card\";\n\nconst Finished = ({\n  title,\n  data,\n  width,\n}: {\n  title: string;\n  data: { banner?: string; startDate?: Date; name: string }[];\n  width: number;\n}) => {\n  const [dialogOpen, setDialogOpen] = useState<boolean>(false);\n\n  const recent = data.filter((show) => show.banner).sortByKey(\"startDate\");\n  const content = (\n    <>\n      <CardHeader\n        title={title}\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Maximise\"\n              control={<Switch checked={dialogOpen} onChange={(_, checked) => setDialogOpen(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <Grid container spacing={1} alignItems=\"center\">\n          {recent.map((item) => (\n            <Grid alignSelf=\"stretch\" key={item.name} xs={dialogOpen ? 4 : width}>\n              <Card sx={{ height: \"100%\" }}>\n                <CardMediaImage image={item.banner} height=\"100%\" alt={item.name} />\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </CardContent>\n    </>\n  );\n\n  return (\n    <Card>\n      {content}\n      <Dialog open={dialogOpen} fullScreen>\n        {content}\n      </Dialog>\n    </Card>\n  );\n};\n\nexport default Finished;\n","import { Card, CardContent, CardHeader, Divider, Stack, Typography } from \"@mui/material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { format } from \"../utils/mathUtils\";\nimport { VideoGame } from \"../vg/types\";\nimport { Show } from \"../show/types\";\nimport { CardMediaImage } from \"./Card\";\n\nexport const StatCard = ({\n  icon,\n  title,\n  content,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: string | [string, number][];\n}) => {\n  const formattedContent =\n    typeof content === \"string\" ? (\n      <Typography align=\"right\" variant=\"h4\">\n        {content}\n      </Typography>\n    ) : (\n      <Stack divider={<Divider orientation=\"vertical\" flexItem />} justifyContent=\"space-evenly\" direction={\"row\"}>\n        {content.map(([key, val]) => (\n          <Stack key={val} direction={\"column\"}>\n            <Typography align=\"center\" variant=\"h5\">\n              {format(val)}\n            </Typography>\n            <Typography align=\"center\" sx={{ fontSize: 14 }} color=\"text.secondary\">\n              {key}\n            </Typography>\n          </Stack>\n        ))}\n      </Stack>\n    );\n  return (\n    <Grid xs={12} md={3}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader\n          titleTypographyProps={{ variant: \"h6\" }}\n          title={title}\n          avatar={icon}\n          sx={{ paddingBottom: \"5px\" }}\n        />\n        <CardContent sx={{ paddingTop: \"5px\" }}>{formattedContent}</CardContent>\n      </Card>\n    </Grid>\n  );\n};\n\nexport const StatList = <T extends VideoGame | Show, U>({\n  icon,\n  title,\n  content,\n  labelComponent,\n  width = 6,\n  pictureWdith = 6,\n  aspectRatio,\n  divider,\n}: {\n  icon: JSX.Element & React.ReactNode;\n  title: string;\n  content: [T, U][] | T[];\n  labelComponent: (u: U) => string[][];\n  width?: number;\n  pictureWdith?: number;\n  aspectRatio?: string;\n  divider?: boolean;\n}) => {\n  const dividerComponent = <Divider orientation=\"vertical\" flexItem />;\n  return (\n    <Grid xs={width}>\n      <Card sx={{ height: \"100%\" }}>\n        <CardHeader titleTypographyProps={{ variant: \"h6\" }} title={title} avatar={icon} />\n        <CardContent>\n          <Grid container spacing={1} alignItems=\"center\">\n            {content.map((entry) => {\n              let game: T;\n              let input: U;\n              if (Array.isArray(entry)) {\n                game = entry[0];\n                input = entry[1];\n              } else {\n                game = entry;\n                input = entry as unknown as U;\n              }\n              return (\n                <Grid alignSelf=\"stretch\" key={game.name} xs={pictureWdith}>\n                  <Card variant=\"outlined\" sx={{ height: \"100%\" }}>\n                    <CardMediaImage image={game.banner} width=\"100%\" sx={{ aspectRatio }} alt={game.name} />\n                    <CardContent sx={{ padding: \"10px\", \":last-child\": { paddingBottom: \"10px\" } }}>\n                      {labelComponent(input).map((stacks, index, labbels) => (\n                        <Stack\n                          key={`${title}-stacks-${game.name}-${index}`}\n                          justifyContent=\"space-between\"\n                          alignItems=\"baseline\"\n                          direction=\"row\"\n                          divider={labbels.length === 1 ? dividerComponent : null}\n                        >\n                          {stacks.map((val) => (\n                            <Typography key={val} variant=\"subtitle2\" color=\"text.secondary\">\n                              {val}\n                            </Typography>\n                          ))}\n                        </Stack>\n                      ))}\n                    </CardContent>\n                  </Card>\n                </Grid>\n              );\n            })}\n          </Grid>\n        </CardContent>\n      </Card>\n    </Grid>\n  );\n};\n","import Plotly from \"plotly.js/lib/core\";\nimport bar from \"plotly.js/lib/bar\";\nimport sunburst from \"plotly.js/lib/sunburst\";\nimport createPlotlyComponent from \"react-plotly.js/factory\";\n\nconst loadPlotly = () => {\n  Plotly.register([bar, sunburst]);\n  return createPlotlyComponent(Plotly);\n};\n\nexport default loadPlotly();\n","import { CardHeader, FormControlLabel, FormGroup, Stack, Switch } from \"@mui/material\";\nimport { useState } from \"react\";\nimport { SelectBox } from \"../vg//SelectionComponents\";\nimport { Measure, Season, Show, ShowStringKeys } from \"./types\";\nimport Barchart from \"../common/Barchart\";\n\nconst options: Record<ShowStringKeys | \"none\", boolean> = {\n  name: false,\n  status: true,\n  none: false,\n};\n\nconst ShowBarchart = ({ data, measure }: { data: Show[]; measure: Measure }) => {\n  const [group, setGroup] = useState<ShowStringKeys | \"none\">(\"none\");\n  const [cumulative, setCumulative] = useState(false);\n  let [stack, setStack] = useState(true);\n\n  let seasonArray = data.flatMap((show) => show.s.map((s) => [show, s] as [Show, Season]));\n  const grouped = groupDate(seasonArray, group, measure, cumulative);\n\n  return (\n    <Barchart grouped={grouped} cumulative={cumulative} stack={stack}>\n      <CardHeader\n        title={measure === \"Episodes\" ? \"Episodes Watched\" : \"Hours Watched\"}\n        action={\n          <FormGroup>\n            <SelectBox\n              options={Object.keys(options) as (ShowStringKeys | \"none\")[]}\n              value={group}\n              setValue={setGroup}\n            />\n            <Stack direction={\"row\"}>\n              <FormControlLabel\n                label=\"Cumulative\"\n                control={<Switch checked={cumulative} onChange={(_, checked) => setCumulative(checked)} />}\n              />\n              <FormControlLabel\n                label=\"Stack\"\n                control={<Switch checked={stack} onChange={(_, checked) => setStack(checked)} disabled={cumulative} />}\n              />\n            </Stack>\n          </FormGroup>\n        }\n      />\n    </Barchart>\n  );\n};\n\nconst groupDate = (data: [Show, Season][], group: ShowStringKeys | \"none\", measure: Measure, cumulative: boolean) => {\n  const grouped = data.reduce((tree, [show, season]) => {\n    const groupVal = group === \"none\" ? \"\" : show[group];\n    const year = cumulative\n      ? season.startDate?.toISOString().substring(0, 7)\n      : season.startDate?.getFullYear().toString();\n    if (!year || !season.minutes) return tree;\n\n    tree[groupVal] = tree[groupVal] || {};\n    tree[groupVal][year] = (tree[groupVal][year] || 0) + (measure === \"Episodes\" ? season.e : season.minutes);\n    return tree;\n  }, {} as Record<string, Record<string, number>>);\n\n  if (measure === \"Hours\") {\n    Object.values(grouped).forEach((record) =>\n      Object.entries(record).forEach(([key, value]) => (record[key] = Math.floor(value / 60)))\n    );\n  }\n\n  return grouped;\n};\n\nexport default ShowBarchart;\n","import { AutoGraph, Pause, PlayArrow, ShowChart, Timer, Update } from \"@mui/icons-material\";\nimport Grid from \"@mui/material/Unstable_Grid2\";\nimport { CURRENT_YEAR } from \"../utils/dateUtils\";\nimport { format } from \"../utils/mathUtils\";\nimport { Season, Show } from \"./types\";\nimport { StatCard, StatList } from \"../common/Stats\";\n\nconst Stats = ({ data }: { data: Show[] }) => {\n  return (\n    <Grid container spacing={1} alignItems=\"stretch\">\n      <AllTime data={data} />\n      <ThisYearSoFar data={data} />\n      <Averages data={data} />\n      <AveragesPerShow data={data} />\n      <RecentlyComplete data={data} />\n      <CurrentlyPlaying data={data} />\n    </Grid>\n  );\n};\n\nconst AllTime = ({ data }: { data: Show[] }) => {\n  const totalShows = data.length;\n  const totalEpisodes = data.sum(\"e\");\n  const totalTime = Math.floor(data.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Timer />}\n      title=\"All Time\"\n      content={[\n        [\"Shows\", totalShows],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst ThisYearSoFar = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s).filter((s) => s.startDate.getFullYear() === CURRENT_YEAR);\n  const totalSeasons = filtered.length;\n  const totalEpisodes = filtered.sum(\"e\");\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60);\n  return (\n    <StatCard\n      icon={<Update />}\n      title=\"This Year So Far\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst Averages = ({ data }: { data: Show[] }) => {\n  const grouped = data\n    .flatMap((show) => show.s)\n    .reduce((tree, s) => {\n      const year = s.startDate.getFullYear().toString();\n      if (!year || !s.minutes) return tree;\n\n      if (!tree[year]) {\n        tree[year] = [0, 0, 0];\n      }\n      tree[year] = [tree[year][0] + 1, tree[year][1] + s.e, tree[year][2] + s.minutes];\n      return tree;\n    }, {} as Record<string, [number, number, number]>);\n\n  const seasons = Math.floor(Object.values(grouped).sum(0) / Object.keys(grouped).length);\n  const episodes = Math.floor(Object.values(grouped).sum(1) / Object.keys(grouped).length);\n  const hours = Math.floor(Object.values(grouped).sum(2) / Object.keys(grouped).length / 60);\n\n  return (\n    <StatCard\n      icon={<ShowChart />}\n      title=\"Averages Per Year\"\n      content={[\n        [\"Seasons\", seasons],\n        [\"Episodes\", episodes],\n        [\"Hours\", hours],\n      ]}\n    />\n  );\n};\n\nconst AveragesPerShow = ({ data }: { data: Show[] }) => {\n  const filtered = data.flatMap((show) => show.s);\n  const totalSeasons = Math.round(filtered.length / data.length);\n  const totalEpisodes = Math.round(filtered.sum(\"e\") / data.length);\n  const totalTime = Math.floor(filtered.sum(\"minutes\") / 60 / data.length);\n\n  return (\n    <StatCard\n      icon={<AutoGraph />}\n      title=\"Averages Per Show\"\n      content={[\n        [\"Seasons\", totalSeasons],\n        [\"Episodes\", totalEpisodes],\n        [\"Hours\", totalTime],\n      ]}\n    />\n  );\n};\n\nconst RecentlyComplete = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .flatMap((show) => show.s.map((s) => [show, s] as [Show, Season]))\n    .filter(([, season]) => season.endDate)\n    .sort(([, seasonA], [, seasonB]) => (seasonA.endDate! < seasonB.endDate! ? 1 : -1))\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<Pause />}\n      title=\"Recently Finished\"\n      content={recent}\n      width={12}\n      pictureWdith={2}\n      labelComponent={statsCardLabelStatsCardLabelRecentlyComplete}\n    />\n  );\n};\n\nconst statsCardLabelStatsCardLabelRecentlyComplete = (season: Season) => [\n  [`S ${season.s}`, season.endDate?.toLocaleDateString() || \"\"],\n  [`${season.e} Eps`, `${format(Math.round(season.minutes! / 60))} Hours`],\n];\n\nconst CurrentlyPlaying = ({ data }: { data: Show[] }) => {\n  const recent = data\n    .filter((show) => show.status === \"Watching\")\n    .map((show) => [show, show.s.at(-1)] as [Show, Season])\n    .filter(([_, season]) => !season.endDate)\n    .sort(([, seasonA], [, seasonB]) => (seasonA.startDate! < seasonB.startDate! ? 1 : -1))\n    .slice(0, 6);\n  return (\n    <StatList\n      icon={<PlayArrow />}\n      title=\"Currently Watching\"\n      content={recent}\n      width={12}\n      pictureWdith={2}\n      labelComponent={statsCardLabelStatsCardLabelCurrentlyPlaying}\n    />\n  );\n};\n\nconst statsCardLabelStatsCardLabelCurrentlyPlaying = (season: Season) => [\n  [`S ${season.s}`, season.startDate?.toLocaleDateString() || \"\"],\n];\n\nexport default Stats;\n","import { Card, CardHeader, FormGroup, FormControlLabel, Switch, CardContent, useTheme } from \"@mui/material\";\nimport { useCallback, useState } from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Season, Show } from \"./types\";\nimport { CURRENT_DATE } from \"../utils/dateUtils\";\n\nconst DEFAULT_HEIGHT = 90;\n\nconst Timeline = ({ data }: { data: Show[] }) => {\n  const [groupData, setGroupData] = useState(true);\n  const [height, setHeight] = useState<string | number>(DEFAULT_HEIGHT + \"vh\");\n  const theme = useTheme();\n\n  const timelineHeader: any[] = [\n    [\n      { type: \"string\", id: \"*\" },\n      { type: \"string\", id: \"Show\" },\n      { type: \"string\", role: \"tooltip\" },\n      { type: \"date\", id: \"Start\" },\n      { type: \"date\", id: \"End\" },\n    ],\n  ];\n\n  const seasons = data.flatMap((show) => show.s.map((s) => [`${show.name} - S${s.s}`, s] as [string, Season]));\n\n  const showData = groupData\n    ? data.map((show) => [\n        \"*\",\n        show.name,\n        tooltip(show.name, show, theme.palette.mode === \"dark\"),\n        show.startDate,\n        show.endDate || CURRENT_DATE,\n      ])\n    : seasons.map(([title, season]) => [\n        \"*\",\n        title,\n        tooltip(title, season, theme.palette.mode === \"dark\"),\n        season.startDate,\n        season.endDate || CURRENT_DATE,\n      ]);\n\n  const callback = useCallback(() => {\n    const labels = document.getElementsByTagName(\"text\");\n    for (let label of labels) {\n      if (label.getAttribute(\"text-anchor\") === \"middle\") {\n        label.setAttribute(\"fill\", theme.palette.text.secondary);\n      }\n    }\n\n    const rects = document.getElementsByTagName(\"rect\");\n    for (let rect of rects) {\n      if (rect.getAttribute(\"stroke\") === \"#9a9a9a\") {\n        const newHeight = rect.height.baseVal.value + 50;\n        setHeight(\n          newHeight < document.documentElement.clientHeight * (DEFAULT_HEIGHT / 100) ? newHeight : DEFAULT_HEIGHT + \"vh\"\n        );\n      }\n    }\n  }, [theme.palette.text.secondary]);\n  return (\n    <Card>\n      <CardHeader\n        title=\"Timeline\"\n        action={\n          <FormGroup row>\n            <FormControlLabel\n              label=\"Combine Seasons\"\n              control={<Switch checked={groupData} onChange={(_, checked) => setGroupData(checked)} />}\n            />\n          </FormGroup>\n        }\n      />\n      <CardContent>\n        <div style={{ overflowX: \"auto\", overflowY: \"hidden\" }}>\n          <Chart\n            key={height}\n            width=\"400vw\"\n            height={height}\n            chartType=\"Timeline\"\n            data={timelineHeader.concat(showData)}\n            onLoad={() => {\n              setTimeout(callback, 100);\n            }}\n            chartEvents={[{ eventName: \"ready\", callback: callback }]}\n            options={{\n              backgroundColor: theme.palette.mode === \"dark\" ? theme.palette.grey.A700 : undefined,\n            }}\n          />\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst tooltip = (title: string, row: Show | Season, darkMode: boolean) =>\n  `\n    <div style=\"display: inline-block; ${darkMode ? \"background-color: black\" : \"\"}\" >\n        <ul style=\"list-style-type: none;padding: 5px\">\n            <li>\n                <span><b>${title}</b></span>\n            </li>\n        </ul>\n        <hr />\n        <ul style=\"list-style-type: none;padding-left: 10px\">\n            <li>\n                <span><b>Hours: </b></span>\n                <span\">${Math.round(row.minutes / 60)}</span>\n            </li>\n            <li>\n                <span><b>Period: </b></span>\n                <span>${row.startDate.toLocaleDateString()} - ${row.endDate?.toLocaleDateString()} </span>\n            </li>\n            <li>\n                <span><b>Episodes: </b></span>\n                <span>${row.e}</span>\n            </li>\n        </ul>\n    </div>\n    `;\n\nexport default Timeline;\n","import Finished from \"../common/Finished\";\nimport Barchart from \"./Barchart\";\nimport Stats from \"./Stats\";\nimport Timeline from \"./Timeline\";\nimport { Show } from \"./types\";\n\nconst Graphs = ({ data }: { data: Show[] }) => (\n  <>\n    <Stats data={data} />\n    <Timeline data={data} />\n    <Barchart data={data} measure={\"Hours\"} />\n    <Finished title=\"All Shows\" data={data} width={3} />\n  </>\n);\n\nexport default Graphs;\n","export const format = new Intl.NumberFormat().format;\n","import { Select, MenuItem } from \"@mui/material\";\n\nexport const SelectBox = <T extends string>({\n  options,\n  value,\n  setValue,\n}: {\n  options: T[];\n  value: T;\n  setValue: (func: T) => void;\n}) => (\n  <Select variant=\"standard\" value={value} onChange={(event) => setValue(event.target.value as T)}>\n    {options.map((option) => (\n      <MenuItem key={option} value={option}>\n        {option}\n      </MenuItem>\n    ))}\n  </Select>\n);\n"],"names":["convertToCumulative","grouped","Object","entries","reduce","prev","_ref4","_ref5","_slicedToArray","key","group","lastAmount","_minYearMonth$split$m","keys","sort","split","map","s","parseInt","_minYearMonth$split$m2","minYear","minMonth","i","CURRENT_YEAR","j","CURRENT_MONTH","yearMonth","_ref","data","cumulative","stack","children","theme","useTheme","_jsxs","Card","_jsx","CardContent","Plot","style","width","height","_ref2","_ref3","val","type","name","x","y","values","stackgroup","undefined","config","displayModeBar","responsive","layout","showlegend","length","legend","orientation","barmode","margin","l","r","t","b","xaxis","tickmode","paper_bgcolor","palette","mode","plot_bgcolor","font","color","text","primary","CardMediaImage","image","alt","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","dialogOpen","setDialogOpen","content","CardMedia","_objectSpread","component","src","onClick","_Fragment","Dialog","open","onClose","maxWidth","PaperProps","sx","backgroundColor","boxShadow","backgroundImage","maxHeight","objectFit","title","recent","filter","show","banner","sortByKey","CardHeader","action","FormGroup","row","FormControlLabel","label","control","Switch","checked","onChange","_","Grid","container","spacing","alignItems","item","alignSelf","xs","fullScreen","StatCard","icon","formattedContent","Typography","align","variant","Stack","divider","Divider","flexItem","justifyContent","direction","format","fontSize","md","titleTypographyProps","avatar","paddingBottom","paddingTop","StatList","labelComponent","_ref4$width","_ref4$pictureWdith","pictureWdith","aspectRatio","dividerComponent","entry","game","input","Array","isArray","padding","stacks","index","labbels","concat","Plotly","bar","sunburst","createPlotlyComponent","options","status","none","groupDate","measure","tree","_season$startDate","_season$startDate2","season","groupVal","year","startDate","toISOString","substring","getFullYear","toString","minutes","e","forEach","record","value","Math","floor","setGroup","_useState3","_useState4","setCumulative","_useState5","_useState6","setStack","seasonArray","flatMap","Barchart","SelectBox","setValue","disabled","AllTime","totalShows","totalEpisodes","sum","totalTime","Timer","ThisYearSoFar","filtered","totalSeasons","Update","Averages","seasons","episodes","hours","ShowChart","AveragesPerShow","round","AutoGraph","RecentlyComplete","_ref6","_ref7","endDate","_ref9","_ref10","seasonA","seasonB","slice","Pause","statsCardLabelStatsCardLabelRecentlyComplete","_season$endDate","toLocaleDateString","CurrentlyPlaying","_ref13","at","_ref14","_ref15","_ref16","_ref17","PlayArrow","statsCardLabelStatsCardLabelCurrentlyPlaying","tooltip","darkMode","_row$endDate","groupData","setGroupData","DEFAULT_HEIGHT","setHeight","showData","CURRENT_DATE","callback","useCallback","_step","labels","document","getElementsByTagName","_iterator","_createForOfIteratorHelper","n","done","getAttribute","setAttribute","secondary","err","f","_step2","rects","_iterator2","rect","newHeight","baseVal","documentElement","clientHeight","overflowX","overflowY","Chart","chartType","id","role","onLoad","setTimeout","chartEvents","eventName","grey","A700","Stats","Timeline","Finished","Intl","NumberFormat","Select","event","target","option","MenuItem"],"sourceRoot":""}